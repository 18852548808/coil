{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An image loading library for Android backed by Kotlin Coroutines. Coil is: Fast : Coil performs a number of optimizations including memory and disk caching, downsampling the image in memory, re-using Bitmaps, automatically pausing/cancelling requests, and more. Lightweight : Coil adds ~1500 methods to your APK (for apps that already use OkHttp and Coroutines), which is comparable to Picasso and significantly less than Glide and Fresco. Easy to use : Coil's API leverages Kotlin's language features for simplicity and minimal boilerplate. Modern : Coil is Kotlin-first and uses modern libraries including Coroutines, OkHttp, Okio, and AndroidX Lifecycles. Coil is an acronym for: Co routine I mage L oader. Made with \u2764\ufe0f at Instacart . Download Coil is available on mavenCentral() . implementation ( io.coil-kt:coil:0.6.0 ) Quick Start To load an image into an ImageView , use the load extension function: // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... Requests can be configured with an optional trailing lambda: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } To get an image imperatively, use the get suspend function: val drawable = Coil . get ( https://www.example.com/image.jpg ) Requirements AndroidX Min SDK 14+ Compile SDK: 28+ Java 8+ R8 / Proguard Coil is fully compatible with R8 out of the box and doesn't require adding any extra rules. If you use Proguard, you may need to add rules for Coroutines , OkHttp and Okio . License Copyright 2019 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#download","text":"Coil is available on mavenCentral() . implementation ( io.coil-kt:coil:0.6.0 )","title":"Download"},{"location":"#quick-start","text":"To load an image into an ImageView , use the load extension function: // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... Requests can be configured with an optional trailing lambda: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } To get an image imperatively, use the get suspend function: val drawable = Coil . get ( https://www.example.com/image.jpg )","title":"Quick Start"},{"location":"#requirements","text":"AndroidX Min SDK 14+ Compile SDK: 28+ Java 8+","title":"Requirements"},{"location":"#r8-proguard","text":"Coil is fully compatible with R8 out of the box and doesn't require adding any extra rules. If you use Proguard, you may need to add rules for Coroutines , OkHttp and Okio .","title":"R8 / Proguard"},{"location":"#license","text":"Copyright 2019 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Changelog [Unreleased] - yyyy-mm-dd Initial release.","title":"Change Log"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased-yyyy-mm-dd","text":"Initial release.","title":"[Unreleased] - yyyy-mm-dd"},{"location":"code_of_conduct/","text":"Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colin.white instacart.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colin.white instacart.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing In an effort to keep the library small and stable, please keep contributions limited to bug fixes, documentation improvements, and test improvements. If you have a new feature idea, please build it in an external library. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code passes all tests by running ./test.sh . Modified from OkHttp's Contributing section.","title":"Contributing"},{"location":"contributing/#contributing","text":"In an effort to keep the library small and stable, please keep contributions limited to bug fixes, documentation improvements, and test improvements. If you have a new feature idea, please build it in an external library. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code passes all tests by running ./test.sh . Modified from OkHttp's Contributing section.","title":"Contributing"},{"location":"faq/","text":"FAQ Have a question that isn't part of the FAQ? Check StackOverflow with the tag #coil. We monitor that tag for any new questions. Can Coil be used with Java projects or mixed Kotlin/Java projects? Yes! Read more here . How do I preload an image? Read here .","title":"FAQ"},{"location":"faq/#faq","text":"Have a question that isn't part of the FAQ? Check StackOverflow with the tag #coil. We monitor that tag for any new questions.","title":"FAQ"},{"location":"faq/#can-coil-be-used-with-java-projects-or-mixed-kotlinjava-projects","text":"Yes! Read more here .","title":"Can Coil be used with Java projects or mixed Kotlin/Java projects?"},{"location":"faq/#how-do-i-preload-an-image","text":"Read here .","title":"How do I preload an image?"},{"location":"getting_started/","text":"Getting Started Artifacts Coil has 3 artifacts published to mavenCentral() : io.coil-kt:coil : The default artifact, which includes the Coil singleton. io.coil-kt:coil-base : The base artifact, which does not include the Coil singleton. Prefer this artifact if you want to use dependency injection to inject your ImageLoader instance(s). io.coil-kt:coil-gif : Includes a set of decoders to support decoding GIFs. See GIFs for more details. Java 8 Coil requires Java 8 bytecode. To enable Java 8 desugaring by D8 : Gradle ( .gradle ): android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } } tasks . withType ( org . jetbrains . kotlin . gradle . tasks . KotlinCompile ). all { kotlinOptions { jvmTarget = 1.8 } } Gradle Kotlin DSL ( .gradle.kts ): android { compileOptions { sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } } tasks . withType KotlinCompile { kotlinOptions { jvmTarget = 1.8 } } API The heart of Coil's API is the ImageLoader . ImageLoader exposes two methods for image loading: load : Starts an asynchronous request to load the data into the Target . fun load ( request : LoadRequest ): RequestDisposable get : A suspend function, which returns a Drawable . suspend fun get ( request : GetRequest ): Drawable Extension Functions Coil provides a set of extension functions for ImageLoader s, ImageView s, and the Coil singleton to provide type-safe methods. Here's an example for loading a URL into an ImageView : imageView . load ( https://www.example.com/image.jpg ) By default, requests are initialized with the options from DefaultRequestOptions , however each individual request can be configured with an optional trailing lambda param: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } See the docs here and here for more information. Supported Data Types The base data types that are supported by all ImageLoader instances are: String (mapped to HttpUrl) HttpUrl Uri ( android.resource , content , file , http , and https schemes only) File (mapped to file Uri) @DrawableRes Int Drawable Bitmap Preloading To preload an image into memory, execute a load request without a Target : Coil . load ( context , https://www.example.com/image.jpg ) To only preload the image into the disk cache, disable the memory cache for the request: Coil . load ( context , https://www.example.com/image.jpg ) { memoryCachePolicy ( CachePolicy . DISABLED ) } Cancelling Requests load requests will be automatically cancelled if the associated View is detached, the associated Lifecycle is destroyed, or another request is started on the same View . Furthermore, each load request returns a RequestDisposable , which can be used to check if a request is in flight or dispose the request (effectively cancelling it and freeing its associated resources): val disposable = imageView . load ( https://www.example.com/image.jpg ) // Cancel the request. disposable . dispose () get requests will only be cancelled if the coroutine context's job is cancelled. Image Sampling Suppose you have an image that is 500x500 on disk, but you only need to load it into memory at 100x100 to be displayed in a view. Coil will load the image into memory, but what happens now if you need the image at 500x500? There's still more \"quality\" to read from disk, but the image is already loaded into memory at 100x100. Ideally, we would use the 100x100 image as a placeholder while we read the image from disk at 500x500. This is exactly what Coil does and Coil handles this process automatically for all BitmapDrawables . Paired with crossfade(true) , this can create a visual effect where the image detail appears to fade in, similar to a progressive JPEG . Here's what it looks like in the sample app: Images in the list have intentionally been loaded with very low detail and the crossfade is slowed down to highlight the visual effect. Bitmap Pooling Similar to Glide and Fresco, Coil supports bitmap pooling. Bitmap pooling is a technique to re-use Bitmap objects once they are no longer in use (i.e. when a View is detached, a Fragment's view is destroyed, etc.). This can significantly improve memory performance (especially on pre-Oreo devices), however it creates several API limitations. To make this optimization as seamless and transparent to the consumer as possible, Targets must opt-in to bitmap pooling. To opt in, implement PoolableViewTarget ; this requires the target to release all references to its current Drawable when its next lifecycle method is called. See PoolableViewTarget for more information. Note Do not use ImageView.getDrawable if the ImageView 's Drawable has been set through Coil's ImageViewTarget . Instead, either load the image using a custom Target or copy underlying Bitmap using Bitmap.copy .","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#artifacts","text":"Coil has 3 artifacts published to mavenCentral() : io.coil-kt:coil : The default artifact, which includes the Coil singleton. io.coil-kt:coil-base : The base artifact, which does not include the Coil singleton. Prefer this artifact if you want to use dependency injection to inject your ImageLoader instance(s). io.coil-kt:coil-gif : Includes a set of decoders to support decoding GIFs. See GIFs for more details.","title":"Artifacts"},{"location":"getting_started/#java-8","text":"Coil requires Java 8 bytecode. To enable Java 8 desugaring by D8 : Gradle ( .gradle ): android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } } tasks . withType ( org . jetbrains . kotlin . gradle . tasks . KotlinCompile ). all { kotlinOptions { jvmTarget = 1.8 } } Gradle Kotlin DSL ( .gradle.kts ): android { compileOptions { sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } } tasks . withType KotlinCompile { kotlinOptions { jvmTarget = 1.8 } }","title":"Java 8"},{"location":"getting_started/#api","text":"The heart of Coil's API is the ImageLoader . ImageLoader exposes two methods for image loading: load : Starts an asynchronous request to load the data into the Target . fun load ( request : LoadRequest ): RequestDisposable get : A suspend function, which returns a Drawable . suspend fun get ( request : GetRequest ): Drawable","title":"API"},{"location":"getting_started/#extension-functions","text":"Coil provides a set of extension functions for ImageLoader s, ImageView s, and the Coil singleton to provide type-safe methods. Here's an example for loading a URL into an ImageView : imageView . load ( https://www.example.com/image.jpg ) By default, requests are initialized with the options from DefaultRequestOptions , however each individual request can be configured with an optional trailing lambda param: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } See the docs here and here for more information.","title":"Extension Functions"},{"location":"getting_started/#supported-data-types","text":"The base data types that are supported by all ImageLoader instances are: String (mapped to HttpUrl) HttpUrl Uri ( android.resource , content , file , http , and https schemes only) File (mapped to file Uri) @DrawableRes Int Drawable Bitmap","title":"Supported Data Types"},{"location":"getting_started/#preloading","text":"To preload an image into memory, execute a load request without a Target : Coil . load ( context , https://www.example.com/image.jpg ) To only preload the image into the disk cache, disable the memory cache for the request: Coil . load ( context , https://www.example.com/image.jpg ) { memoryCachePolicy ( CachePolicy . DISABLED ) }","title":"Preloading"},{"location":"getting_started/#cancelling-requests","text":"load requests will be automatically cancelled if the associated View is detached, the associated Lifecycle is destroyed, or another request is started on the same View . Furthermore, each load request returns a RequestDisposable , which can be used to check if a request is in flight or dispose the request (effectively cancelling it and freeing its associated resources): val disposable = imageView . load ( https://www.example.com/image.jpg ) // Cancel the request. disposable . dispose () get requests will only be cancelled if the coroutine context's job is cancelled.","title":"Cancelling Requests"},{"location":"getting_started/#image-sampling","text":"Suppose you have an image that is 500x500 on disk, but you only need to load it into memory at 100x100 to be displayed in a view. Coil will load the image into memory, but what happens now if you need the image at 500x500? There's still more \"quality\" to read from disk, but the image is already loaded into memory at 100x100. Ideally, we would use the 100x100 image as a placeholder while we read the image from disk at 500x500. This is exactly what Coil does and Coil handles this process automatically for all BitmapDrawables . Paired with crossfade(true) , this can create a visual effect where the image detail appears to fade in, similar to a progressive JPEG . Here's what it looks like in the sample app: Images in the list have intentionally been loaded with very low detail and the crossfade is slowed down to highlight the visual effect.","title":"Image Sampling"},{"location":"getting_started/#bitmap-pooling","text":"Similar to Glide and Fresco, Coil supports bitmap pooling. Bitmap pooling is a technique to re-use Bitmap objects once they are no longer in use (i.e. when a View is detached, a Fragment's view is destroyed, etc.). This can significantly improve memory performance (especially on pre-Oreo devices), however it creates several API limitations. To make this optimization as seamless and transparent to the consumer as possible, Targets must opt-in to bitmap pooling. To opt in, implement PoolableViewTarget ; this requires the target to release all references to its current Drawable when its next lifecycle method is called. See PoolableViewTarget for more information. Note Do not use ImageView.getDrawable if the ImageView 's Drawable has been set through Coil's ImageViewTarget . Instead, either load the image using a custom Target or copy underlying Bitmap using Bitmap.copy .","title":"Bitmap Pooling"},{"location":"gifs/","text":"Gifs Unlike Glide, GIFs are not supported by default. However, Coil has an extension library to support them. To add GIF support, import the extension library: implementation ( io.coil-kt:coil-gif:0.6.0 ) And add the decoders to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader ( context ) { componentRegistry { if ( SDK_INT = P ) { add ( ImageDecoderDecoder ()) } else { add ( GifDecoder ()) } } } Note Prefer using ImageDecoderDecoder on Android P and above, as it's backed by Android P's new ImageDecoder API. This provides native support for GIFs and Animated WebPs . And that's it! The ImageLoader will automatically detect any GIFs using their file headers and decode them correctly.","title":"GIFs"},{"location":"gifs/#gifs","text":"Unlike Glide, GIFs are not supported by default. However, Coil has an extension library to support them. To add GIF support, import the extension library: implementation ( io.coil-kt:coil-gif:0.6.0 ) And add the decoders to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader ( context ) { componentRegistry { if ( SDK_INT = P ) { add ( ImageDecoderDecoder ()) } else { add ( GifDecoder ()) } } } Note Prefer using ImageDecoderDecoder on Android P and above, as it's backed by Android P's new ImageDecoder API. This provides native support for GIFs and Animated WebPs . And that's it! The ImageLoader will automatically detect any GIFs using their file headers and decode them correctly.","title":"Gifs"},{"location":"image_loaders/","text":"Image Loaders Image Loaders are service objects that handle image requests with load and get . They handle caching, image decoding, request management, bitmap pooling, memory management, and more. New instances can be created like so: val imageLoader = ImageLoader ( context ) Similar to Requests , Image Loader s can be configured with an optional trailing lambda param: val imageLoader = ImageLoader ( context ) { availableMemoryPercentage ( 0.5 ) bitmapPoolPercentage ( 0.5 ) crossfade ( true ) } Internally, this constructs a RealImageLoader using ImageLoaderBuilder . Singleton vs. Dependency Injection Ideally, you should construct and inject your ImageLoader instance(s) using dependency injection. This will scale well as your app grows and it is the best way to manage multiple ImageLoader instances. However, for simple use cases the Coil artifact provides a default ImageLoader instance that can be accessed with Coil.loader() . Both ImageView.load and Coil.load use the default ImageLoader instance as a default parameter: inline fun ImageView . load ( url : String ?, imageLoader : ImageLoader = Coil . loader (), builder : LoadRequestBuilder .() - Unit = {} ): RequestDisposable { return imageLoader . load ( context , url ) { target ( this @load ) builder () } } The ImageView extension function can be called with a specific ImageLoader like so: imageView . load ( https://www.example.com/image.jpg , imageLoader ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } The default ImageLoader is instantiated lazily and can be replaced with Coil.setDefaultImageLoader . Note Use the io.coil-kt:coil-base artifact if you are using dependency injection. Testing ImageLoader is an interface, which you can replace with a fake implementation. For instance, you could inject a fake ImageLoader implementation which always returns the same Drawable synchronously: val fakeImageLoader = object : ImageLoader { private val drawable = ColorDrawable ( Color . BLACK ) private val disposable = object : RequestDisposable { override fun isDisposed () = true override fun dispose () {} } override val defaults = DefaultRequestOptions () override fun load ( request : LoadRequest ): RequestDisposable { // Always call onStart before onSuccess. request . target ?. onStart ( drawable ) request . target ?. onSuccess ( drawable ) return disposable } override suspend fun get ( request : GetRequest ) = drawable override fun clearMemory () {} override fun shutdown () {} } This is perfect for screenshot and instrumentation tests where you want consistent rendering behavior.","title":"Image Loaders"},{"location":"image_loaders/#image-loaders","text":"Image Loaders are service objects that handle image requests with load and get . They handle caching, image decoding, request management, bitmap pooling, memory management, and more. New instances can be created like so: val imageLoader = ImageLoader ( context ) Similar to Requests , Image Loader s can be configured with an optional trailing lambda param: val imageLoader = ImageLoader ( context ) { availableMemoryPercentage ( 0.5 ) bitmapPoolPercentage ( 0.5 ) crossfade ( true ) } Internally, this constructs a RealImageLoader using ImageLoaderBuilder .","title":"Image Loaders"},{"location":"image_loaders/#singleton-vs-dependency-injection","text":"Ideally, you should construct and inject your ImageLoader instance(s) using dependency injection. This will scale well as your app grows and it is the best way to manage multiple ImageLoader instances. However, for simple use cases the Coil artifact provides a default ImageLoader instance that can be accessed with Coil.loader() . Both ImageView.load and Coil.load use the default ImageLoader instance as a default parameter: inline fun ImageView . load ( url : String ?, imageLoader : ImageLoader = Coil . loader (), builder : LoadRequestBuilder .() - Unit = {} ): RequestDisposable { return imageLoader . load ( context , url ) { target ( this @load ) builder () } } The ImageView extension function can be called with a specific ImageLoader like so: imageView . load ( https://www.example.com/image.jpg , imageLoader ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } The default ImageLoader is instantiated lazily and can be replaced with Coil.setDefaultImageLoader . Note Use the io.coil-kt:coil-base artifact if you are using dependency injection.","title":"Singleton vs. Dependency Injection"},{"location":"image_loaders/#testing","text":"ImageLoader is an interface, which you can replace with a fake implementation. For instance, you could inject a fake ImageLoader implementation which always returns the same Drawable synchronously: val fakeImageLoader = object : ImageLoader { private val drawable = ColorDrawable ( Color . BLACK ) private val disposable = object : RequestDisposable { override fun isDisposed () = true override fun dispose () {} } override val defaults = DefaultRequestOptions () override fun load ( request : LoadRequest ): RequestDisposable { // Always call onStart before onSuccess. request . target ?. onStart ( drawable ) request . target ?. onSuccess ( drawable ) return disposable } override suspend fun get ( request : GetRequest ) = drawable override fun clearMemory () {} override fun shutdown () {} } This is perfect for screenshot and instrumentation tests where you want consistent rendering behavior.","title":"Testing"},{"location":"image_pipeline/","text":"Extending the Image Pipeline Android supports many image formats out of the box, however there are also plenty of formats it does not (e.g. GIF, SVG, TIFF, etc.) Fortunately, ImageLoaders support pluggable components to add new data types, new fetching behavior, new image encodings, or otherwise overwrite the base image loading behavior. Coil's image pipeline consists of three main parts: Mappers , Fetchers , and Decoders . Custom components must be added to the ImageLoader when constructing it through its ComponentRegistry : val imageLoader = ImageLoader ( context ) { componentRegistry { add ( ItemMapper ()) add ( ProtocolBufferFetcher ()) add ( GifDecoder ()) } } Mappers Mappers allow you to add support for custom data types. For instance, say we get this model from our server: data class Item ( val id : Int , val imageUrl : String , val price : Int , val weight : Double ) We could write a custom mapper to map it to an HttpUrl : class ItemMapper : Mapper Item , HttpUrl { override fun map ( data : Item ): HttpUrl = HttpUrl . get ( data . imageUrl ) } After registering it when constructing our ImageLoader (see above), we can safely load an Item : imageView . loadAny ( item ) loadAny is the type-unsafe version of load that accepts any data type. If you want to know a Target 's size when mapping an object, you can extend from Measured Mapper . Note Extending from Measured Mapper can prevent setting placeholders and or cached drawables synchronously, as they force Coil to wait for the target to be measured. Prefer extending Mapper if you do not need to know the Target 's size. See Mapper and Measured Mapper for more information. Fetchers Fetchers translate data into either a BufferedSource or a Drawable . See Fetcher for more information. Decoders Decoders read a BufferedSource as input and return a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.). See Decoder for more information. Note Decoders are responsible for closing the BufferedSource when finished. This allows custom decoders to return a Drawable while still reading the source. This can be useful to support file types such as progressive JPEG where there is incremental information to show.","title":"Extending the Image Pipeline"},{"location":"image_pipeline/#extending-the-image-pipeline","text":"Android supports many image formats out of the box, however there are also plenty of formats it does not (e.g. GIF, SVG, TIFF, etc.) Fortunately, ImageLoaders support pluggable components to add new data types, new fetching behavior, new image encodings, or otherwise overwrite the base image loading behavior. Coil's image pipeline consists of three main parts: Mappers , Fetchers , and Decoders . Custom components must be added to the ImageLoader when constructing it through its ComponentRegistry : val imageLoader = ImageLoader ( context ) { componentRegistry { add ( ItemMapper ()) add ( ProtocolBufferFetcher ()) add ( GifDecoder ()) } }","title":"Extending the Image Pipeline"},{"location":"image_pipeline/#mappers","text":"Mappers allow you to add support for custom data types. For instance, say we get this model from our server: data class Item ( val id : Int , val imageUrl : String , val price : Int , val weight : Double ) We could write a custom mapper to map it to an HttpUrl : class ItemMapper : Mapper Item , HttpUrl { override fun map ( data : Item ): HttpUrl = HttpUrl . get ( data . imageUrl ) } After registering it when constructing our ImageLoader (see above), we can safely load an Item : imageView . loadAny ( item ) loadAny is the type-unsafe version of load that accepts any data type. If you want to know a Target 's size when mapping an object, you can extend from Measured Mapper . Note Extending from Measured Mapper can prevent setting placeholders and or cached drawables synchronously, as they force Coil to wait for the target to be measured. Prefer extending Mapper if you do not need to know the Target 's size. See Mapper and Measured Mapper for more information.","title":"Mappers"},{"location":"image_pipeline/#fetchers","text":"Fetchers translate data into either a BufferedSource or a Drawable . See Fetcher for more information.","title":"Fetchers"},{"location":"image_pipeline/#decoders","text":"Decoders read a BufferedSource as input and return a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.). See Decoder for more information. Note Decoders are responsible for closing the BufferedSource when finished. This allows custom decoders to return a Drawable while still reading the source. This can be useful to support file types such as progressive JPEG where there is incremental information to show.","title":"Decoders"},{"location":"java_compatibility/","text":"Java Compatibility Coil's API was designed to be Kotlin-first. It leverages Kotlin language features such as inlined lambdas, receiver params, default arguments, and extension functions, which are not available in Java. Also, suspend functions cannot be implemented in Java. This means custom Transformations , Size Resolvers , Fetchers , and Decoders must be implemented in Kotlin. With these limitations in mind, here is the recommended way to execute load requests from Java: LoadRequest request = ImageLoaders . newLoadBuilder ( imageLoader , context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . target ( imageView ) . build (); imageLoader . load ( request ); If you're using the default ImageLoader , you can get it via Coil.loader() . Note You should not use the API extension functions in Java. Instead, you should create Request objects manually like above. suspend functions cannot be easily called from Java. Thus, to get an image synchronously you'll have to create a wrapper function for get : object ImageLoaderCompat { @JvmStatic @WorkerThread fun getBlocking ( imageLoader : ImageLoader , request : GetRequest ): Drawable = runBlocking { imageLoader . get ( request ) } } Then call the ImageLoaderCompat function from Java: GetRequest request = ImageLoaders . newGetBuilder ( imageLoader ) . data ( https://www.example.com/image.jpg ) . size ( 1080 , 1920 ) . build (); Drawable drawable = ImageLoaderCompat . getBlocking ( imageLoader , request ); Note ImageLoaderCompat.getBlocking will block the current thread instead of suspending. Do not call this from the main thread.","title":"Java Compatibility"},{"location":"java_compatibility/#java-compatibility","text":"Coil's API was designed to be Kotlin-first. It leverages Kotlin language features such as inlined lambdas, receiver params, default arguments, and extension functions, which are not available in Java. Also, suspend functions cannot be implemented in Java. This means custom Transformations , Size Resolvers , Fetchers , and Decoders must be implemented in Kotlin. With these limitations in mind, here is the recommended way to execute load requests from Java: LoadRequest request = ImageLoaders . newLoadBuilder ( imageLoader , context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . target ( imageView ) . build (); imageLoader . load ( request ); If you're using the default ImageLoader , you can get it via Coil.loader() . Note You should not use the API extension functions in Java. Instead, you should create Request objects manually like above. suspend functions cannot be easily called from Java. Thus, to get an image synchronously you'll have to create a wrapper function for get : object ImageLoaderCompat { @JvmStatic @WorkerThread fun getBlocking ( imageLoader : ImageLoader , request : GetRequest ): Drawable = runBlocking { imageLoader . get ( request ) } } Then call the ImageLoaderCompat function from Java: GetRequest request = ImageLoaders . newGetBuilder ( imageLoader ) . data ( https://www.example.com/image.jpg ) . size ( 1080 , 1920 ) . build (); Drawable drawable = ImageLoaderCompat . getBlocking ( imageLoader , request ); Note ImageLoaderCompat.getBlocking will block the current thread instead of suspending. Do not call this from the main thread.","title":"Java Compatibility"},{"location":"migrating/","text":"Migrating from Glide/Picasso Here are a few examples of how to migrate Glide/Picasso calls into Coil calls: Basic Usage // Glide Glide . with ( context ) . load ( url ) . into ( imageView ) // Picasso Picasso . get () . load ( url ) . into ( imageView ) // Coil imageView . load ( url ) Custom Requests imageView . scaleType = ImageView . ScaleType . FIT_CENTER // Glide Glide . with ( context ) . load ( url ) . placeholder ( placeholder ) . fitCenter () . into ( imageView ) // Picasso Picasso . get () . load ( url ) . placeholder ( placeholder ) . fit () . into ( imageView ) // Coil (autodetects the scale type) imageView . load ( url ) { placeholder ( placeholder ) } Non-View Targets // Glide (has optional callbacks for start and error) Glide . with ( context ) . load ( url ) . into ( object : CustomTarget Drawable () { override fun onResourceReady ( resource : Drawable , transition : Transition Drawable ) { // Handle the successful result. } override fun onLoadCleared ( placeholder : Drawable ) { // Remove the drawable provided in onResourceReady from any Views and ensure no references to it remain. } }) // Picasso Picasso . get () . load ( url ) . into ( object : BitmapTarget { override fun onBitmapLoaded ( bitmap : Bitmap , from : Picasso . LoadedFrom ) { // Handle the successful result. } override fun onBitmapFailed ( e : Exception , errorDrawable : Drawable ?) { // Handle the error drawable. } override fun onPrepareLoad ( placeHolderDrawable : Drawable ?) { // Handle the placeholder drawable. } }) // Coil (has optional callbacks for start and error) Coil . load ( context , url ) { target { drawable - // Handle the successful result. } } Background Thread // Glide (blocks the current thread; must not be called from the main thread) val drawable = Glide . with ( context ) . load ( url ) . submit ( width , height ) . get () // Picasso (blocks the current thread; must not be called from the main thread) val drawable = Picasso . get () . load ( url ) . resize ( width , height ) . get () // Coil (suspends the current context; thread safe) val drawable = Coil . get ( url ) { size ( width , height ) }","title":"Migrating from Glide/Picasso"},{"location":"migrating/#migrating-from-glidepicasso","text":"Here are a few examples of how to migrate Glide/Picasso calls into Coil calls:","title":"Migrating from Glide/Picasso"},{"location":"migrating/#basic-usage","text":"// Glide Glide . with ( context ) . load ( url ) . into ( imageView ) // Picasso Picasso . get () . load ( url ) . into ( imageView ) // Coil imageView . load ( url )","title":"Basic Usage"},{"location":"migrating/#custom-requests","text":"imageView . scaleType = ImageView . ScaleType . FIT_CENTER // Glide Glide . with ( context ) . load ( url ) . placeholder ( placeholder ) . fitCenter () . into ( imageView ) // Picasso Picasso . get () . load ( url ) . placeholder ( placeholder ) . fit () . into ( imageView ) // Coil (autodetects the scale type) imageView . load ( url ) { placeholder ( placeholder ) }","title":"Custom Requests"},{"location":"migrating/#non-view-targets","text":"// Glide (has optional callbacks for start and error) Glide . with ( context ) . load ( url ) . into ( object : CustomTarget Drawable () { override fun onResourceReady ( resource : Drawable , transition : Transition Drawable ) { // Handle the successful result. } override fun onLoadCleared ( placeholder : Drawable ) { // Remove the drawable provided in onResourceReady from any Views and ensure no references to it remain. } }) // Picasso Picasso . get () . load ( url ) . into ( object : BitmapTarget { override fun onBitmapLoaded ( bitmap : Bitmap , from : Picasso . LoadedFrom ) { // Handle the successful result. } override fun onBitmapFailed ( e : Exception , errorDrawable : Drawable ?) { // Handle the error drawable. } override fun onPrepareLoad ( placeHolderDrawable : Drawable ?) { // Handle the placeholder drawable. } }) // Coil (has optional callbacks for start and error) Coil . load ( context , url ) { target { drawable - // Handle the successful result. } }","title":"Non-View Targets"},{"location":"migrating/#background-thread","text":"// Glide (blocks the current thread; must not be called from the main thread) val drawable = Glide . with ( context ) . load ( url ) . submit ( width , height ) . get () // Picasso (blocks the current thread; must not be called from the main thread) val drawable = Picasso . get () . load ( url ) . resize ( width , height ) . get () // Coil (suspends the current context; thread safe) val drawable = Coil . get ( url ) { size ( width , height ) }","title":"Background Thread"},{"location":"requests/","text":"Requests Requests are value objects that provide all the necessary information for an ImageLoader to execute an image request. Requests can be created a number of ways. This simplest way is to use the trailing lambda syntax: val request = LoadRequest ( context , imageLoader . defaults ) { data ( https://www.example.com/image.jpg ) crossfade ( true ) } Requests can also be created using typical builder syntax. This works best for Java: val request = imageLoader . newLoadBuilder ( context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . build () Once you've created a request, pass it to an ImageLoader to execute it: imageLoader . load ( request ) Optionally, you can use the type-safe load and get extension functions to create and execute requests. See the API documentation for more information.","title":"Requests"},{"location":"requests/#requests","text":"Requests are value objects that provide all the necessary information for an ImageLoader to execute an image request. Requests can be created a number of ways. This simplest way is to use the trailing lambda syntax: val request = LoadRequest ( context , imageLoader . defaults ) { data ( https://www.example.com/image.jpg ) crossfade ( true ) } Requests can also be created using typical builder syntax. This works best for Java: val request = imageLoader . newLoadBuilder ( context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . build () Once you've created a request, pass it to an ImageLoader to execute it: imageLoader . load ( request ) Optionally, you can use the type-safe load and get extension functions to create and execute requests. See the API documentation for more information.","title":"Requests"},{"location":"targets/","text":"Targets Targets handle the result of an image request. They often act as \"view adapters\" by taking the placeholder/error/success Drawables and applying them to a View . Here's the easiest way to create a custom target: Coil . load ( context , https://www.example.com/image.jpg ) { target { drawable - // Handle the successful result. } } There are 3 types of targets: Target : The base target class. Prefer this if the image request isn't tied to a View . ViewTarget : A target with an associated View . Prefer this if the request sets the placeholder/error/success Drawables on a View . Using ViewTarget also binds the request to the View 's lifecycle. PoolableViewTarget : A ViewTarget that supports bitmap pooling . This has performance benefits, however it comes with several strict behavior requirements. Read the docs for more information.","title":"Targets"},{"location":"targets/#targets","text":"Targets handle the result of an image request. They often act as \"view adapters\" by taking the placeholder/error/success Drawables and applying them to a View . Here's the easiest way to create a custom target: Coil . load ( context , https://www.example.com/image.jpg ) { target { drawable - // Handle the successful result. } } There are 3 types of targets: Target : The base target class. Prefer this if the image request isn't tied to a View . ViewTarget : A target with an associated View . Prefer this if the request sets the placeholder/error/success Drawables on a View . Using ViewTarget also binds the request to the View 's lifecycle. PoolableViewTarget : A ViewTarget that supports bitmap pooling . This has performance benefits, however it comes with several strict behavior requirements. Read the docs for more information.","title":"Targets"},{"location":"transformations/","text":"Transformations Transformations allow you to modify the pixel data of an image before the Drawable is returned from the request. By default, Coil comes packaged with 4 transformations: blur , circle crop , and grayscale , and rounded corners . See the API doc for more information. Note Transformations are only applied to BitmapDrawable s.","title":"Transformations"},{"location":"transformations/#transformations","text":"Transformations allow you to modify the pixel data of an image before the Drawable is returned from the request. By default, Coil comes packaged with 4 transformations: blur , circle crop , and grayscale , and rounded corners . See the API doc for more information. Note Transformations are only applied to BitmapDrawable s.","title":"Transformations"},{"location":"api/coil-base/","text":"coil-base Packages Name Summary coil coil.annotation coil.api coil.bitmappool coil.collection coil.decode coil.drawable coil.fetch coil.map coil.network coil.request coil.size coil.target coil.transform coil.util Index All Types","title":"coil-base"},{"location":"api/coil-base/#packages","text":"Name Summary coil coil.annotation coil.api coil.bitmappool coil.collection coil.decode coil.drawable coil.fetch coil.map coil.network coil.request coil.size coil.target coil.transform coil.util","title":"Packages"},{"location":"api/coil-base/#index","text":"All Types","title":"Index"},{"location":"api/coil-base/alltypes/","text":"All Types Name Summary coil.bitmappool.BitmapPool An object pool that enables callers to reuse Bitmap objects. coil.transform.BlurTransformation A Transformation that applies a Gaussian blur to an image. coil.annotation.BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker . coil.request.CachePolicy Represents the read/write policy for a cache source. coil.transform.CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. coil.util.CoilLogger A singleton that enables/disables logging to Log . coil.ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. coil.drawable.CrossfadeDrawable A Drawable that crossfades from start to end . coil.decode.DataSource Represents the source that a Drawable was loaded from. coil.decode.Decoder Converts a BufferedSource into a Drawable . coil.decode.DecodeResult The result of Decoder.decode . coil.decode.DecodeUtils A collection of useful utility methods for decoding images. coil.DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . coil.size.DisplaySizeResolver A SizeResolver that constrains a Target to the size of the display. coil.fetch.DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . coil.fetch.Fetcher A Fetcher translates data into either a BufferedSource or a Drawable . coil.fetch.FetchResult The result of Fetcher.fetch . coil.request.GetRequest A value object that represents a get image request. coil.request.GetRequestBuilder Builder for a GetRequest . coil.transform.GrayscaleTransformation A Transformation that converts an image to shades of gray. coil.network.HttpException Exception for an unexpected, non-2xx HTTP response. coil.ImageLoader Loads images using load and get . coil.target.ImageViewTarget A Target , which handles setting images on an ImageView . coil.request.LoadRequest A value object that represents a load image request. coil.request.LoadRequestBuilder Builder for a LoadRequest . coil.map.Mapper An interface to convert data with type T into V . coil.map.MeasuredMapper An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously. coil.decode.Options A set of configuration options for loading and decoding an image. coil.size.OriginalSize Represents the width and height of the source image. coil.size.PixelSize A non-zero width and height in pixels. coil.target.PoolableViewTarget A ViewTarget that supports Bitmap pooling. coil.request.Request A value object that represents an image request. coil.request.RequestBuilder Base class for LoadRequestBuilder and GetRequestBuilder . coil.request.RequestDisposable Represents the work of an image request. coil.transform.RoundedCornersTransformation A Transformation that rounds the corners of an image. coil.size.Scale Represents a scaling policy. coil.size.Size Represents the target size of an image request. coil.size.SizeResolver An interface for measuring the target size for an image request. coil.fetch.SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . coil.collection.SparseIntArraySet A collection of unordered, unique Int s. Int s are stored as primitives in an Array , which reduces memory usage. coil.target.Target A listener that accepts the result of an image load. coil.transform.Transformation An interface for making transformations to an image's pixel data. coil.size.ViewSizeResolver A SizeResolver that measures the size of a View . coil.target.ViewTarget A Target with an associated View .","title":"Home"},{"location":"api/coil-base/alltypes/#all-types","text":"Name Summary coil.bitmappool.BitmapPool An object pool that enables callers to reuse Bitmap objects. coil.transform.BlurTransformation A Transformation that applies a Gaussian blur to an image. coil.annotation.BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker . coil.request.CachePolicy Represents the read/write policy for a cache source. coil.transform.CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. coil.util.CoilLogger A singleton that enables/disables logging to Log . coil.ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. coil.drawable.CrossfadeDrawable A Drawable that crossfades from start to end . coil.decode.DataSource Represents the source that a Drawable was loaded from. coil.decode.Decoder Converts a BufferedSource into a Drawable . coil.decode.DecodeResult The result of Decoder.decode . coil.decode.DecodeUtils A collection of useful utility methods for decoding images. coil.DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . coil.size.DisplaySizeResolver A SizeResolver that constrains a Target to the size of the display. coil.fetch.DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . coil.fetch.Fetcher A Fetcher translates data into either a BufferedSource or a Drawable . coil.fetch.FetchResult The result of Fetcher.fetch . coil.request.GetRequest A value object that represents a get image request. coil.request.GetRequestBuilder Builder for a GetRequest . coil.transform.GrayscaleTransformation A Transformation that converts an image to shades of gray. coil.network.HttpException Exception for an unexpected, non-2xx HTTP response. coil.ImageLoader Loads images using load and get . coil.target.ImageViewTarget A Target , which handles setting images on an ImageView . coil.request.LoadRequest A value object that represents a load image request. coil.request.LoadRequestBuilder Builder for a LoadRequest . coil.map.Mapper An interface to convert data with type T into V . coil.map.MeasuredMapper An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously. coil.decode.Options A set of configuration options for loading and decoding an image. coil.size.OriginalSize Represents the width and height of the source image. coil.size.PixelSize A non-zero width and height in pixels. coil.target.PoolableViewTarget A ViewTarget that supports Bitmap pooling. coil.request.Request A value object that represents an image request. coil.request.RequestBuilder Base class for LoadRequestBuilder and GetRequestBuilder . coil.request.RequestDisposable Represents the work of an image request. coil.transform.RoundedCornersTransformation A Transformation that rounds the corners of an image. coil.size.Scale Represents a scaling policy. coil.size.Size Represents the target size of an image request. coil.size.SizeResolver An interface for measuring the target size for an image request. coil.fetch.SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . coil.collection.SparseIntArraySet A collection of unordered, unique Int s. Int s are stored as primitives in an Array , which reduces memory usage. coil.target.Target A listener that accepts the result of an image load. coil.transform.Transformation An interface for making transformations to an image's pixel data. coil.size.ViewSizeResolver A SizeResolver that measures the size of a View . coil.target.ViewTarget A Target with an associated View .","title":"All Types"},{"location":"api/coil-base/coil/","text":"coil-base / coil Package coil Types Name Summary ComponentRegistry class ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. DefaultRequestOptions data class DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . ImageLoader interface ImageLoader Loads images using load and get .","title":"Home"},{"location":"api/coil-base/coil/#package-coil","text":"","title":"Package coil"},{"location":"api/coil-base/coil/#types","text":"Name Summary ComponentRegistry class ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. DefaultRequestOptions data class DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . ImageLoader interface ImageLoader Loads images using load and get .","title":"Types"},{"location":"api/coil-base/coil/-component-registry/","text":"coil-base / coil / ComponentRegistry ComponentRegistry class ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. Use this class to register support for custom Mapper s, MeasuredMapper s, Fetcher s, and Decoder s. Types Name Summary Builder class Builder Functions Name Summary getMapper fun T : Any getMapper(data: T): Mapper T, * ? getMeasuredMapper fun T : Any getMeasuredMapper(data: T): MeasuredMapper T, * ? newBuilder fun newBuilder(): Builder requireDecoder fun T : Any requireDecoder(data: T, source: BufferedSource , mimeType: String ?): Decoder requireFetcher fun T : Any requireFetcher(data: T): Fetcher T Companion Object Functions Name Summary invoke operator fun invoke(builder: ComponentRegistry.Builder .() - Unit = {}): ComponentRegistry operator fun invoke(registry: ComponentRegistry , builder: ComponentRegistry.Builder .() - Unit = {}): ComponentRegistry Create a new ComponentRegistry instance.","title":"Home"},{"location":"api/coil-base/coil/-component-registry/#componentregistry","text":"class ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. Use this class to register support for custom Mapper s, MeasuredMapper s, Fetcher s, and Decoder s.","title":"ComponentRegistry"},{"location":"api/coil-base/coil/-component-registry/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"api/coil-base/coil/-component-registry/#functions","text":"Name Summary getMapper fun T : Any getMapper(data: T): Mapper T, * ? getMeasuredMapper fun T : Any getMeasuredMapper(data: T): MeasuredMapper T, * ? newBuilder fun newBuilder(): Builder requireDecoder fun T : Any requireDecoder(data: T, source: BufferedSource , mimeType: String ?): Decoder requireFetcher fun T : Any requireFetcher(data: T): Fetcher T","title":"Functions"},{"location":"api/coil-base/coil/-component-registry/#companion-object-functions","text":"Name Summary invoke operator fun invoke(builder: ComponentRegistry.Builder .() - Unit = {}): ComponentRegistry operator fun invoke(registry: ComponentRegistry , builder: ComponentRegistry.Builder .() - Unit = {}): ComponentRegistry Create a new ComponentRegistry instance.","title":"Companion Object Functions"},{"location":"api/coil-base/coil/-component-registry/get-mapper/","text":"coil-base / coil / ComponentRegistry / getMapper getMapper fun T : Any getMapper(data: T): Mapper T, * ?","title":"Get mapper"},{"location":"api/coil-base/coil/-component-registry/get-mapper/#getmapper","text":"fun T : Any getMapper(data: T): Mapper T, * ?","title":"getMapper"},{"location":"api/coil-base/coil/-component-registry/get-measured-mapper/","text":"coil-base / coil / ComponentRegistry / getMeasuredMapper getMeasuredMapper fun T : Any getMeasuredMapper(data: T): MeasuredMapper T, * ?","title":"Get measured mapper"},{"location":"api/coil-base/coil/-component-registry/get-measured-mapper/#getmeasuredmapper","text":"fun T : Any getMeasuredMapper(data: T): MeasuredMapper T, * ?","title":"getMeasuredMapper"},{"location":"api/coil-base/coil/-component-registry/invoke/","text":"coil-base / coil / ComponentRegistry / invoke invoke inline operator fun invoke(builder: ComponentRegistry.Builder .() - Unit = {}): ComponentRegistry Create a new ComponentRegistry instance. Example: val registry = ComponentRegistry { add(GifDecoder()) } inline operator fun invoke(registry: ComponentRegistry , builder: ComponentRegistry.Builder .() - Unit = {}): ComponentRegistry Create a new ComponentRegistry instance.","title":"Invoke"},{"location":"api/coil-base/coil/-component-registry/invoke/#invoke","text":"inline operator fun invoke(builder: ComponentRegistry.Builder .() - Unit = {}): ComponentRegistry Create a new ComponentRegistry instance. Example: val registry = ComponentRegistry { add(GifDecoder()) } inline operator fun invoke(registry: ComponentRegistry , builder: ComponentRegistry.Builder .() - Unit = {}): ComponentRegistry Create a new ComponentRegistry instance.","title":"invoke"},{"location":"api/coil-base/coil/-component-registry/new-builder/","text":"coil-base / coil / ComponentRegistry / newBuilder newBuilder fun newBuilder(): Builder","title":"New builder"},{"location":"api/coil-base/coil/-component-registry/new-builder/#newbuilder","text":"fun newBuilder(): Builder","title":"newBuilder"},{"location":"api/coil-base/coil/-component-registry/require-decoder/","text":"coil-base / coil / ComponentRegistry / requireDecoder requireDecoder fun T : Any requireDecoder(data: T, source: BufferedSource , mimeType: String ?): Decoder","title":"Require decoder"},{"location":"api/coil-base/coil/-component-registry/require-decoder/#requiredecoder","text":"fun T : Any requireDecoder(data: T, source: BufferedSource , mimeType: String ?): Decoder","title":"requireDecoder"},{"location":"api/coil-base/coil/-component-registry/require-fetcher/","text":"coil-base / coil / ComponentRegistry / requireFetcher requireFetcher fun T : Any requireFetcher(data: T): Fetcher T","title":"Require fetcher"},{"location":"api/coil-base/coil/-component-registry/require-fetcher/#requirefetcher","text":"fun T : Any requireFetcher(data: T): Fetcher T","title":"requireFetcher"},{"location":"api/coil-base/coil/-component-registry/-builder/","text":"coil-base / coil / ComponentRegistry / Builder Builder class Builder Constructors Name Summary init Builder() Builder(registry: ComponentRegistry ) Functions Name Summary add fun T : Any add(mapper: Mapper T, * ): ComponentRegistry.Builder Add a custom Mapper . fun T : Any add(measuredMapper: MeasuredMapper T, * ): ComponentRegistry.Builder Add a custom MeasuredMapper . fun T : Any add(fetcher: Fetcher T ): ComponentRegistry.Builder Add a custom Fetcher . fun add(decoder: Decoder ): ComponentRegistry.Builder Add a custom Decoder . build fun build(): ComponentRegistry","title":"Home"},{"location":"api/coil-base/coil/-component-registry/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/coil-base/coil/-component-registry/-builder/#constructors","text":"Name Summary init Builder() Builder(registry: ComponentRegistry )","title":"Constructors"},{"location":"api/coil-base/coil/-component-registry/-builder/#functions","text":"Name Summary add fun T : Any add(mapper: Mapper T, * ): ComponentRegistry.Builder Add a custom Mapper . fun T : Any add(measuredMapper: MeasuredMapper T, * ): ComponentRegistry.Builder Add a custom MeasuredMapper . fun T : Any add(fetcher: Fetcher T ): ComponentRegistry.Builder Add a custom Fetcher . fun add(decoder: Decoder ): ComponentRegistry.Builder Add a custom Decoder . build fun build(): ComponentRegistry","title":"Functions"},{"location":"api/coil-base/coil/-component-registry/-builder/-init-/","text":"coil-base / coil / ComponentRegistry / Builder / init init Builder() Builder(registry: ComponentRegistry )","title":" init "},{"location":"api/coil-base/coil/-component-registry/-builder/-init-/#init","text":"Builder() Builder(registry: ComponentRegistry )","title":"&lt;init&gt;"},{"location":"api/coil-base/coil/-component-registry/-builder/add/","text":"coil-base / coil / ComponentRegistry / Builder / add add inline fun reified T : Any add(mapper: Mapper T, * ): ComponentRegistry.Builder Add a custom Mapper . inline fun reified T : Any add(measuredMapper: MeasuredMapper T, * ): ComponentRegistry.Builder Add a custom MeasuredMapper . inline fun reified T : Any add(fetcher: Fetcher T ): ComponentRegistry.Builder Add a custom Fetcher . fun add(decoder: Decoder ): ComponentRegistry.Builder Add a custom Decoder .","title":"Add"},{"location":"api/coil-base/coil/-component-registry/-builder/add/#add","text":"inline fun reified T : Any add(mapper: Mapper T, * ): ComponentRegistry.Builder Add a custom Mapper . inline fun reified T : Any add(measuredMapper: MeasuredMapper T, * ): ComponentRegistry.Builder Add a custom MeasuredMapper . inline fun reified T : Any add(fetcher: Fetcher T ): ComponentRegistry.Builder Add a custom Fetcher . fun add(decoder: Decoder ): ComponentRegistry.Builder Add a custom Decoder .","title":"add"},{"location":"api/coil-base/coil/-component-registry/-builder/build/","text":"coil-base / coil / ComponentRegistry / Builder / build build fun build(): ComponentRegistry","title":"Build"},{"location":"api/coil-base/coil/-component-registry/-builder/build/#build","text":"fun build(): ComponentRegistry","title":"build"},{"location":"api/coil-base/coil/-default-request-options/","text":"coil-base / coil / DefaultRequestOptions DefaultRequestOptions data class DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . See Also ImageLoader.defaults Constructors Name Summary init DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, allowRgb565: Boolean = false, crossfadeMillis: Int = 0, placeholder: Drawable ? = null, error: Drawable ? = null) A set of default request options, which are used to initialize a RequestBuilder . Properties Name Summary allowRgb565 val allowRgb565: Boolean crossfadeMillis val crossfadeMillis: Int dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? placeholder val placeholder: Drawable ?","title":"Home"},{"location":"api/coil-base/coil/-default-request-options/#defaultrequestoptions","text":"data class DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . See Also ImageLoader.defaults","title":"DefaultRequestOptions"},{"location":"api/coil-base/coil/-default-request-options/#constructors","text":"Name Summary init DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, allowRgb565: Boolean = false, crossfadeMillis: Int = 0, placeholder: Drawable ? = null, error: Drawable ? = null) A set of default request options, which are used to initialize a RequestBuilder .","title":"Constructors"},{"location":"api/coil-base/coil/-default-request-options/#properties","text":"Name Summary allowRgb565 val allowRgb565: Boolean crossfadeMillis val crossfadeMillis: Int dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? placeholder val placeholder: Drawable ?","title":"Properties"},{"location":"api/coil-base/coil/-default-request-options/-init-/","text":"coil-base / coil / DefaultRequestOptions / init init DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, allowRgb565: Boolean = false, crossfadeMillis: Int = 0, placeholder: Drawable ? = null, error: Drawable ? = null) A set of default request options, which are used to initialize a RequestBuilder . See Also ImageLoader.defaults","title":" init "},{"location":"api/coil-base/coil/-default-request-options/-init-/#init","text":"DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, allowRgb565: Boolean = false, crossfadeMillis: Int = 0, placeholder: Drawable ? = null, error: Drawable ? = null) A set of default request options, which are used to initialize a RequestBuilder . See Also ImageLoader.defaults","title":"&lt;init&gt;"},{"location":"api/coil-base/coil/-default-request-options/allow-rgb565/","text":"coil-base / coil / DefaultRequestOptions / allowRgb565 allowRgb565 val allowRgb565: Boolean","title":"Allow rgb565"},{"location":"api/coil-base/coil/-default-request-options/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean","title":"allowRgb565"},{"location":"api/coil-base/coil/-default-request-options/crossfade-millis/","text":"coil-base / coil / DefaultRequestOptions / crossfadeMillis crossfadeMillis val crossfadeMillis: Int","title":"Crossfade millis"},{"location":"api/coil-base/coil/-default-request-options/crossfade-millis/#crossfademillis","text":"val crossfadeMillis: Int","title":"crossfadeMillis"},{"location":"api/coil-base/coil/-default-request-options/dispatcher/","text":"coil-base / coil / DefaultRequestOptions / dispatcher dispatcher val dispatcher: CoroutineDispatcher","title":"Dispatcher"},{"location":"api/coil-base/coil/-default-request-options/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher","title":"dispatcher"},{"location":"api/coil-base/coil/-default-request-options/error/","text":"coil-base / coil / DefaultRequestOptions / error error val error: Drawable ?","title":"Error"},{"location":"api/coil-base/coil/-default-request-options/error/#error","text":"val error: Drawable ?","title":"error"},{"location":"api/coil-base/coil/-default-request-options/placeholder/","text":"coil-base / coil / DefaultRequestOptions / placeholder placeholder val placeholder: Drawable ?","title":"Placeholder"},{"location":"api/coil-base/coil/-default-request-options/placeholder/#placeholder","text":"val placeholder: Drawable ?","title":"placeholder"},{"location":"api/coil-base/coil/-image-loader/","text":"coil-base / coil / ImageLoader ImageLoader interface ImageLoader Loads images using load and get . Properties Name Summary defaults abstract val defaults: DefaultRequestOptions The default options for any Request s created by this image loader. Functions Name Summary clearMemory abstract fun clearMemory(): Unit Completely clear this image loader's memory cache and bitmap pool. get abstract suspend fun get(request: GetRequest ): Drawable Load the request 's data and suspend until the operation is complete. Return the loaded Drawable . load abstract fun load(request: LoadRequest ): RequestDisposable Start an asynchronous operation to load the request 's data into its Target . shutdown abstract fun shutdown(): Unit Shutdown this image loader. Companion Object Functions Name Summary invoke operator fun invoke(context: Context , builder: ImageLoaderBuilder .() - Unit = {}): ImageLoader Create a new ImageLoader instance. Extension Functions Name Summary get suspend fun ImageLoader .get(url: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun ImageLoader .load(context: Context , url: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable newGetBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder newLoadBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"Home"},{"location":"api/coil-base/coil/-image-loader/#imageloader","text":"interface ImageLoader Loads images using load and get .","title":"ImageLoader"},{"location":"api/coil-base/coil/-image-loader/#properties","text":"Name Summary defaults abstract val defaults: DefaultRequestOptions The default options for any Request s created by this image loader.","title":"Properties"},{"location":"api/coil-base/coil/-image-loader/#functions","text":"Name Summary clearMemory abstract fun clearMemory(): Unit Completely clear this image loader's memory cache and bitmap pool. get abstract suspend fun get(request: GetRequest ): Drawable Load the request 's data and suspend until the operation is complete. Return the loaded Drawable . load abstract fun load(request: LoadRequest ): RequestDisposable Start an asynchronous operation to load the request 's data into its Target . shutdown abstract fun shutdown(): Unit Shutdown this image loader.","title":"Functions"},{"location":"api/coil-base/coil/-image-loader/#companion-object-functions","text":"Name Summary invoke operator fun invoke(context: Context , builder: ImageLoaderBuilder .() - Unit = {}): ImageLoader Create a new ImageLoader instance.","title":"Companion Object Functions"},{"location":"api/coil-base/coil/-image-loader/#extension-functions","text":"Name Summary get suspend fun ImageLoader .get(url: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun ImageLoader .load(context: Context , url: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable newGetBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder newLoadBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"Extension Functions"},{"location":"api/coil-base/coil/-image-loader/clear-memory/","text":"coil-base / coil / ImageLoader / clearMemory clearMemory abstract fun clearMemory(): Unit Completely clear this image loader's memory cache and bitmap pool.","title":"Clear memory"},{"location":"api/coil-base/coil/-image-loader/clear-memory/#clearmemory","text":"abstract fun clearMemory(): Unit Completely clear this image loader's memory cache and bitmap pool.","title":"clearMemory"},{"location":"api/coil-base/coil/-image-loader/defaults/","text":"coil-base / coil / ImageLoader / defaults defaults abstract val defaults: DefaultRequestOptions The default options for any Request s created by this image loader.","title":"Defaults"},{"location":"api/coil-base/coil/-image-loader/defaults/#defaults","text":"abstract val defaults: DefaultRequestOptions The default options for any Request s created by this image loader.","title":"defaults"},{"location":"api/coil-base/coil/-image-loader/get/","text":"coil-base / coil / ImageLoader / get get abstract suspend fun get(request: GetRequest ): Drawable Load the request 's data and suspend until the operation is complete. Return the loaded Drawable . Parameters request - The request to execute. Return The Drawable result.","title":"Get"},{"location":"api/coil-base/coil/-image-loader/get/#get","text":"abstract suspend fun get(request: GetRequest ): Drawable Load the request 's data and suspend until the operation is complete. Return the loaded Drawable .","title":"get"},{"location":"api/coil-base/coil/-image-loader/get/#parameters","text":"request - The request to execute. Return The Drawable result.","title":"Parameters"},{"location":"api/coil-base/coil/-image-loader/invoke/","text":"coil-base / coil / ImageLoader / invoke invoke inline operator fun invoke(context: Context , builder: ImageLoaderBuilder .() - Unit = {}): ImageLoader Create a new ImageLoader instance. Example: val loader = ImageLoader(context) { availableMemoryPercentage(0.5) crossfade(true) }","title":"Invoke"},{"location":"api/coil-base/coil/-image-loader/invoke/#invoke","text":"inline operator fun invoke(context: Context , builder: ImageLoaderBuilder .() - Unit = {}): ImageLoader Create a new ImageLoader instance. Example: val loader = ImageLoader(context) { availableMemoryPercentage(0.5) crossfade(true) }","title":"invoke"},{"location":"api/coil-base/coil/-image-loader/load/","text":"coil-base / coil / ImageLoader / load load abstract fun load(request: LoadRequest ): RequestDisposable Start an asynchronous operation to load the request 's data into its Target . If the request's target is null, this method preloads the image. Parameters request - The request to execute. Return A RequestDisposable which can be used to cancel or check the status of the request.","title":"Load"},{"location":"api/coil-base/coil/-image-loader/load/#load","text":"abstract fun load(request: LoadRequest ): RequestDisposable Start an asynchronous operation to load the request 's data into its Target . If the request's target is null, this method preloads the image.","title":"load"},{"location":"api/coil-base/coil/-image-loader/load/#parameters","text":"request - The request to execute. Return A RequestDisposable which can be used to cancel or check the status of the request.","title":"Parameters"},{"location":"api/coil-base/coil/-image-loader/shutdown/","text":"coil-base / coil / ImageLoader / shutdown shutdown abstract fun shutdown(): Unit Shutdown this image loader. All associated resources will be freed and any new requests will fail before starting. In-flight load requests will be cancelled. In-flight get requests will continue until complete.","title":"Shutdown"},{"location":"api/coil-base/coil/-image-loader/shutdown/#shutdown","text":"abstract fun shutdown(): Unit Shutdown this image loader. All associated resources will be freed and any new requests will fail before starting. In-flight load requests will be cancelled. In-flight get requests will continue until complete.","title":"shutdown"},{"location":"api/coil-base/coil.annotation/","text":"coil-base / coil.annotation Package coil.annotation Annotations Name Summary BuilderMarker annotation class BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker .","title":"Home"},{"location":"api/coil-base/coil.annotation/#package-coilannotation","text":"","title":"Package coil.annotation"},{"location":"api/coil-base/coil.annotation/#annotations","text":"Name Summary BuilderMarker annotation class BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker .","title":"Annotations"},{"location":"api/coil-base/coil.annotation/-builder-marker/","text":"coil-base / coil.annotation / BuilderMarker BuilderMarker @DslMarker annotation class BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker . Constructors Name Summary init BuilderMarker() Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker .","title":"Home"},{"location":"api/coil-base/coil.annotation/-builder-marker/#buildermarker","text":"@DslMarker annotation class BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker .","title":"BuilderMarker"},{"location":"api/coil-base/coil.annotation/-builder-marker/#constructors","text":"Name Summary init BuilderMarker() Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker .","title":"Constructors"},{"location":"api/coil-base/coil.annotation/-builder-marker/-init-/","text":"coil-base / coil.annotation / BuilderMarker / init init BuilderMarker() Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker .","title":" init "},{"location":"api/coil-base/coil.annotation/-builder-marker/-init-/#init","text":"BuilderMarker() Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.api/","text":"coil-base / coil.api Package coil.api Functions Name Summary get suspend fun ImageLoader .get(url: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun ImageLoader .load(context: Context , url: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable newGetBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder newLoadBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"Home"},{"location":"api/coil-base/coil.api/#package-coilapi","text":"","title":"Package coil.api"},{"location":"api/coil-base/coil.api/#functions","text":"Name Summary get suspend fun ImageLoader .get(url: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun ImageLoader .load(context: Context , url: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable newGetBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder newLoadBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"Functions"},{"location":"api/coil-base/coil.api/get-any/","text":"coil-base / coil.api / getAny getAny suspend inline fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"Get any"},{"location":"api/coil-base/coil.api/get-any/#getany","text":"suspend inline fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"getAny"},{"location":"api/coil-base/coil.api/get/","text":"coil-base / coil.api / get get suspend inline fun ImageLoader .get(url: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(@DrawableRes drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(url: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(@DrawableRes drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"Get"},{"location":"api/coil-base/coil.api/get/#get","text":"suspend inline fun ImageLoader .get(url: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(@DrawableRes drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(url: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(@DrawableRes drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"get"},{"location":"api/coil-base/coil.api/load-any/","text":"coil-base / coil.api / loadAny loadAny inline fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Load any"},{"location":"api/coil-base/coil.api/load-any/#loadany","text":"inline fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"loadAny"},{"location":"api/coil-base/coil.api/load/","text":"coil-base / coil.api / load load inline fun ImageLoader .load(context: Context , url: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , @DrawableRes drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , url: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , @DrawableRes drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Load"},{"location":"api/coil-base/coil.api/load/#load","text":"inline fun ImageLoader .load(context: Context , url: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , @DrawableRes drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , url: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , @DrawableRes drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"load"},{"location":"api/coil-base/coil.api/new-get-builder/","text":"coil-base / coil.api / newGetBuilder newGetBuilder inline fun ImageLoader .newGetBuilder(): GetRequestBuilder inline fun ImageLoader .newGetBuilder(): GetRequestBuilder","title":"New get builder"},{"location":"api/coil-base/coil.api/new-get-builder/#newgetbuilder","text":"inline fun ImageLoader .newGetBuilder(): GetRequestBuilder inline fun ImageLoader .newGetBuilder(): GetRequestBuilder","title":"newGetBuilder"},{"location":"api/coil-base/coil.api/new-load-builder/","text":"coil-base / coil.api / newLoadBuilder newLoadBuilder inline fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder inline fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"New load builder"},{"location":"api/coil-base/coil.api/new-load-builder/#newloadbuilder","text":"inline fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder inline fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"newLoadBuilder"},{"location":"api/coil-base/coil.bitmappool/","text":"coil-base / coil.bitmappool Package coil.bitmappool Types Name Summary BitmapPool interface BitmapPool An object pool that enables callers to reuse Bitmap objects.","title":"Home"},{"location":"api/coil-base/coil.bitmappool/#package-coilbitmappool","text":"","title":"Package coil.bitmappool"},{"location":"api/coil-base/coil.bitmappool/#types","text":"Name Summary BitmapPool interface BitmapPool An object pool that enables callers to reuse Bitmap objects.","title":"Types"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/","text":"coil-base / coil.bitmappool / BitmapPool BitmapPool interface BitmapPool An object pool that enables callers to reuse Bitmap objects. Functions Name Summary get abstract fun get(width: Int , height: Int , config: Config ): Bitmap Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. getDirty abstract fun getDirty(width: Int , height: Int , config: Config ): Bitmap Identical to get except that any returned Bitmap may not have been erased and may contain random data. getDirtyOrNull abstract fun getDirtyOrNull(width: Int , height: Int , config: Config ): Bitmap ? Identical to getDirty except that null will be returned if the pool does not contain a usable Bitmap. getOrNull abstract fun getOrNull(width: Int , height: Int , config: Config ): Bitmap ? Identical to get except that null will be returned if the pool does not contain a usable Bitmap. put abstract fun put(bitmap: Bitmap ): Unit Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the Bitmap and discards it.","title":"Home"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/#bitmappool","text":"interface BitmapPool An object pool that enables callers to reuse Bitmap objects.","title":"BitmapPool"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/#functions","text":"Name Summary get abstract fun get(width: Int , height: Int , config: Config ): Bitmap Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. getDirty abstract fun getDirty(width: Int , height: Int , config: Config ): Bitmap Identical to get except that any returned Bitmap may not have been erased and may contain random data. getDirtyOrNull abstract fun getDirtyOrNull(width: Int , height: Int , config: Config ): Bitmap ? Identical to getDirty except that null will be returned if the pool does not contain a usable Bitmap. getOrNull abstract fun getOrNull(width: Int , height: Int , config: Config ): Bitmap ? Identical to get except that null will be returned if the pool does not contain a usable Bitmap. put abstract fun put(bitmap: Bitmap ): Unit Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the Bitmap and discards it.","title":"Functions"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-dirty-or-null/","text":"coil-base / coil.bitmappool / BitmapPool / getDirtyOrNull getDirtyOrNull abstract fun getDirtyOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to getDirty except that null will be returned if the pool does not contain a usable Bitmap.","title":"Get dirty or null"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-dirty-or-null/#getdirtyornull","text":"abstract fun getDirtyOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to getDirty except that null will be returned if the pool does not contain a usable Bitmap.","title":"getDirtyOrNull"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-dirty/","text":"coil-base / coil.bitmappool / BitmapPool / getDirty getDirty abstract fun getDirty(@Px width: Int , @Px height: Int , config: Config ): Bitmap Identical to get except that any returned Bitmap may not have been erased and may contain random data. If no Bitmap with the requested attributes is present in the pool, a new one will be allocated. Although this method is slightly more efficient than BitmapPool.get it should be used with caution and only when the caller is sure that they are going to erase the Bitmap entirely before writing new data to it.","title":"Get dirty"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-dirty/#getdirty","text":"abstract fun getDirty(@Px width: Int , @Px height: Int , config: Config ): Bitmap Identical to get except that any returned Bitmap may not have been erased and may contain random data. If no Bitmap with the requested attributes is present in the pool, a new one will be allocated. Although this method is slightly more efficient than BitmapPool.get it should be used with caution and only when the caller is sure that they are going to erase the Bitmap entirely before writing new data to it.","title":"getDirty"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-or-null/","text":"coil-base / coil.bitmappool / BitmapPool / getOrNull getOrNull abstract fun getOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to get except that null will be returned if the pool does not contain a usable Bitmap.","title":"Get or null"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-or-null/#getornull","text":"abstract fun getOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to get except that null will be returned if the pool does not contain a usable Bitmap.","title":"getOrNull"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get/","text":"coil-base / coil.bitmappool / BitmapPool / get get abstract fun get(@Px width: Int , @Px height: Int , config: Config ): Bitmap Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. If no Bitmap with the requested attributes is present in the pool, a new one will be allocated. Because this method erases all pixels in the Bitmap , this method is slightly slower than getDirty . If the Bitmap is being obtained to be used in BitmapFactory or in any other case where every pixel in the Bitmap will always be overwritten or cleared, getDirty will be faster. When in doubt, use this method to ensure correctness.","title":"Get"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get/#get","text":"abstract fun get(@Px width: Int , @Px height: Int , config: Config ): Bitmap Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. If no Bitmap with the requested attributes is present in the pool, a new one will be allocated. Because this method erases all pixels in the Bitmap , this method is slightly slower than getDirty . If the Bitmap is being obtained to be used in BitmapFactory or in any other case where every pixel in the Bitmap will always be overwritten or cleared, getDirty will be faster. When in doubt, use this method to ensure correctness.","title":"get"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/put/","text":"coil-base / coil.bitmappool / BitmapPool / put put abstract fun put(bitmap: Bitmap ): Unit Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the Bitmap and discards it. Callers must not continue to use the Bitmap after calling this method.","title":"Put"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/put/#put","text":"abstract fun put(bitmap: Bitmap ): Unit Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the Bitmap and discards it. Callers must not continue to use the Bitmap after calling this method.","title":"put"},{"location":"api/coil-base/coil.collection/","text":"coil-base / coil.collection Package coil.collection Types Name Summary SparseIntArraySet class SparseIntArraySet A collection of unordered, unique Int s. Int s are stored as primitives in an Array , which reduces memory usage. Functions Name Summary addAll fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit forEach fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit isEmpty fun SparseIntArraySet .isEmpty(): Boolean isNotEmpty fun SparseIntArraySet .isNotEmpty(): Boolean minusAssign operator fun SparseIntArraySet .minusAssign(element: Int ): Unit plus operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet plusAssign operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"Home"},{"location":"api/coil-base/coil.collection/#package-coilcollection","text":"","title":"Package coil.collection"},{"location":"api/coil-base/coil.collection/#types","text":"Name Summary SparseIntArraySet class SparseIntArraySet A collection of unordered, unique Int s. Int s are stored as primitives in an Array , which reduces memory usage.","title":"Types"},{"location":"api/coil-base/coil.collection/#functions","text":"Name Summary addAll fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit forEach fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit isEmpty fun SparseIntArraySet .isEmpty(): Boolean isNotEmpty fun SparseIntArraySet .isNotEmpty(): Boolean minusAssign operator fun SparseIntArraySet .minusAssign(element: Int ): Unit plus operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet plusAssign operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"Functions"},{"location":"api/coil-base/coil.collection/add-all/","text":"coil-base / coil.collection / addAll addAll fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit","title":"Add all"},{"location":"api/coil-base/coil.collection/add-all/#addall","text":"fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit","title":"addAll"},{"location":"api/coil-base/coil.collection/for-each/","text":"coil-base / coil.collection / forEach forEach inline fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit","title":"For each"},{"location":"api/coil-base/coil.collection/for-each/#foreach","text":"inline fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit","title":"forEach"},{"location":"api/coil-base/coil.collection/is-empty/","text":"coil-base / coil.collection / isEmpty isEmpty inline fun SparseIntArraySet .isEmpty(): Boolean","title":"Is empty"},{"location":"api/coil-base/coil.collection/is-empty/#isempty","text":"inline fun SparseIntArraySet .isEmpty(): Boolean","title":"isEmpty"},{"location":"api/coil-base/coil.collection/is-not-empty/","text":"coil-base / coil.collection / isNotEmpty isNotEmpty inline fun SparseIntArraySet .isNotEmpty(): Boolean","title":"Is not empty"},{"location":"api/coil-base/coil.collection/is-not-empty/#isnotempty","text":"inline fun SparseIntArraySet .isNotEmpty(): Boolean","title":"isNotEmpty"},{"location":"api/coil-base/coil.collection/minus-assign/","text":"coil-base / coil.collection / minusAssign minusAssign inline operator fun SparseIntArraySet .minusAssign(element: Int ): Unit","title":"Minus assign"},{"location":"api/coil-base/coil.collection/minus-assign/#minusassign","text":"inline operator fun SparseIntArraySet .minusAssign(element: Int ): Unit","title":"minusAssign"},{"location":"api/coil-base/coil.collection/plus-assign/","text":"coil-base / coil.collection / plusAssign plusAssign inline operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"Plus assign"},{"location":"api/coil-base/coil.collection/plus-assign/#plusassign","text":"inline operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"plusAssign"},{"location":"api/coil-base/coil.collection/plus/","text":"coil-base / coil.collection / plus plus operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet","title":"Plus"},{"location":"api/coil-base/coil.collection/plus/#plus","text":"operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet","title":"plus"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/","text":"coil-base / coil.collection / SparseIntArraySet SparseIntArraySet class SparseIntArraySet A collection of unordered, unique Int s. Int s are stored as primitives in an Array , which reduces memory usage. See Also SparseIntArray Constructors Name Summary init SparseIntArraySet(initialCapacity: Int = 10) A collection of unordered, unique Int s. Int s are stored as primitives in an Array , which reduces memory usage. Functions Name Summary add fun add(element: Int ): Boolean Adds an element to the set. clear fun clear(): Unit Removes all elements from this SparseIntArraySet. contains fun contains(element: Int ): Boolean Return true if the SparseIntArraySet contains this element. elementAt fun elementAt(index: Int ): Int Given an index in the range [0, size) , returns the element from the index th key-value mapping that this SparseIntArraySet stores. indexOfElement fun indexOfElement(key: Int ): Int Returns the index for which elementAt would return the specified element, or a negative number if the specified element is not mapped. remove fun remove(element: Int ): Boolean Removes the element from the set. Return true if it was present. removeAt fun removeAt(index: Int ): Unit Removes the element at the given index. size fun size(): Int Returns the number of elements that this SparseIntArraySet currently stores. Extension Functions Name Summary addAll fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit forEach fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit isEmpty fun SparseIntArraySet .isEmpty(): Boolean isNotEmpty fun SparseIntArraySet .isNotEmpty(): Boolean minusAssign operator fun SparseIntArraySet .minusAssign(element: Int ): Unit plus operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet plusAssign operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"Home"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/#sparseintarrayset","text":"class SparseIntArraySet A collection of unordered, unique Int s. Int s are stored as primitives in an Array , which reduces memory usage. See Also SparseIntArray","title":"SparseIntArraySet"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/#constructors","text":"Name Summary init SparseIntArraySet(initialCapacity: Int = 10) A collection of unordered, unique Int s. Int s are stored as primitives in an Array , which reduces memory usage.","title":"Constructors"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/#functions","text":"Name Summary add fun add(element: Int ): Boolean Adds an element to the set. clear fun clear(): Unit Removes all elements from this SparseIntArraySet. contains fun contains(element: Int ): Boolean Return true if the SparseIntArraySet contains this element. elementAt fun elementAt(index: Int ): Int Given an index in the range [0, size) , returns the element from the index th key-value mapping that this SparseIntArraySet stores. indexOfElement fun indexOfElement(key: Int ): Int Returns the index for which elementAt would return the specified element, or a negative number if the specified element is not mapped. remove fun remove(element: Int ): Boolean Removes the element from the set. Return true if it was present. removeAt fun removeAt(index: Int ): Unit Removes the element at the given index. size fun size(): Int Returns the number of elements that this SparseIntArraySet currently stores.","title":"Functions"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/#extension-functions","text":"Name Summary addAll fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit forEach fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit isEmpty fun SparseIntArraySet .isEmpty(): Boolean isNotEmpty fun SparseIntArraySet .isNotEmpty(): Boolean minusAssign operator fun SparseIntArraySet .minusAssign(element: Int ): Unit plus operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet plusAssign operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"Extension Functions"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/-init-/","text":"coil-base / coil.collection / SparseIntArraySet / init init SparseIntArraySet(initialCapacity: Int = 10) A collection of unordered, unique Int s. Int s are stored as primitives in an Array , which reduces memory usage. See Also SparseIntArray","title":" init "},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/-init-/#init","text":"SparseIntArraySet(initialCapacity: Int = 10) A collection of unordered, unique Int s. Int s are stored as primitives in an Array , which reduces memory usage. See Also SparseIntArray","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/add/","text":"coil-base / coil.collection / SparseIntArraySet / add add fun add(element: Int ): Boolean Adds an element to the set.","title":"Add"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/add/#add","text":"fun add(element: Int ): Boolean Adds an element to the set.","title":"add"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/clear/","text":"coil-base / coil.collection / SparseIntArraySet / clear clear fun clear(): Unit Removes all elements from this SparseIntArraySet.","title":"Clear"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/clear/#clear","text":"fun clear(): Unit Removes all elements from this SparseIntArraySet.","title":"clear"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/contains/","text":"coil-base / coil.collection / SparseIntArraySet / contains contains fun contains(element: Int ): Boolean Return true if the SparseIntArraySet contains this element.","title":"Contains"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/contains/#contains","text":"fun contains(element: Int ): Boolean Return true if the SparseIntArraySet contains this element.","title":"contains"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/element-at/","text":"coil-base / coil.collection / SparseIntArraySet / elementAt elementAt fun elementAt(index: Int ): Int Given an index in the range [0, size) , returns the element from the index th key-value mapping that this SparseIntArraySet stores. The elements corresponding to indices in ascending order are guaranteed to be in ascending order, e.g., elementAt(0) will return the smallest element and elementAt(size()-1) will return the largest element.","title":"Element at"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/element-at/#elementat","text":"fun elementAt(index: Int ): Int Given an index in the range [0, size) , returns the element from the index th key-value mapping that this SparseIntArraySet stores. The elements corresponding to indices in ascending order are guaranteed to be in ascending order, e.g., elementAt(0) will return the smallest element and elementAt(size()-1) will return the largest element.","title":"elementAt"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/index-of-element/","text":"coil-base / coil.collection / SparseIntArraySet / indexOfElement indexOfElement fun indexOfElement(key: Int ): Int Returns the index for which elementAt would return the specified element, or a negative number if the specified element is not mapped.","title":"Index of element"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/index-of-element/#indexofelement","text":"fun indexOfElement(key: Int ): Int Returns the index for which elementAt would return the specified element, or a negative number if the specified element is not mapped.","title":"indexOfElement"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/remove-at/","text":"coil-base / coil.collection / SparseIntArraySet / removeAt removeAt fun removeAt(index: Int ): Unit Removes the element at the given index.","title":"Remove at"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/remove-at/#removeat","text":"fun removeAt(index: Int ): Unit Removes the element at the given index.","title":"removeAt"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/remove/","text":"coil-base / coil.collection / SparseIntArraySet / remove remove fun remove(element: Int ): Boolean Removes the element from the set. Return true if it was present.","title":"Remove"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/remove/#remove","text":"fun remove(element: Int ): Boolean Removes the element from the set. Return true if it was present.","title":"remove"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/size/","text":"coil-base / coil.collection / SparseIntArraySet / size size fun size(): Int Returns the number of elements that this SparseIntArraySet currently stores.","title":"Size"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/size/#size","text":"fun size(): Int Returns the number of elements that this SparseIntArraySet currently stores.","title":"size"},{"location":"api/coil-base/coil.decode/","text":"coil-base / coil.decode Package coil.decode Types Name Summary DataSource enum class DataSource Represents the source that a Drawable was loaded from. Decoder interface Decoder Converts a BufferedSource into a Drawable . DecodeResult data class DecodeResult The result of Decoder.decode . DecodeUtils object DecodeUtils A collection of useful utility methods for decoding images. Options data class Options A set of configuration options for loading and decoding an image.","title":"Home"},{"location":"api/coil-base/coil.decode/#package-coildecode","text":"","title":"Package coil.decode"},{"location":"api/coil-base/coil.decode/#types","text":"Name Summary DataSource enum class DataSource Represents the source that a Drawable was loaded from. Decoder interface Decoder Converts a BufferedSource into a Drawable . DecodeResult data class DecodeResult The result of Decoder.decode . DecodeUtils object DecodeUtils A collection of useful utility methods for decoding images. Options data class Options A set of configuration options for loading and decoding an image.","title":"Types"},{"location":"api/coil-base/coil.decode/-data-source/","text":"coil-base / coil.decode / DataSource DataSource enum class DataSource Represents the source that a Drawable was loaded from. See Also SourceResult.dataSource DrawableResult.dataSource Enum Values Name Summary NETWORK DISK MEMORY","title":"Home"},{"location":"api/coil-base/coil.decode/-data-source/#datasource","text":"enum class DataSource Represents the source that a Drawable was loaded from. See Also SourceResult.dataSource DrawableResult.dataSource","title":"DataSource"},{"location":"api/coil-base/coil.decode/-data-source/#enum-values","text":"Name Summary NETWORK DISK MEMORY","title":"Enum Values"},{"location":"api/coil-base/coil.decode/-data-source/-d-i-s-k/","text":"coil-base / coil.decode / DataSource / DISK DISK DISK","title":" d i s k"},{"location":"api/coil-base/coil.decode/-data-source/-d-i-s-k/#disk","text":"DISK","title":"DISK"},{"location":"api/coil-base/coil.decode/-data-source/-m-e-m-o-r-y/","text":"coil-base / coil.decode / DataSource / MEMORY MEMORY MEMORY","title":" m e m o r y"},{"location":"api/coil-base/coil.decode/-data-source/-m-e-m-o-r-y/#memory","text":"MEMORY","title":"MEMORY"},{"location":"api/coil-base/coil.decode/-data-source/-n-e-t-w-o-r-k/","text":"coil-base / coil.decode / DataSource / NETWORK NETWORK NETWORK","title":" n e t w o r k"},{"location":"api/coil-base/coil.decode/-data-source/-n-e-t-w-o-r-k/#network","text":"NETWORK","title":"NETWORK"},{"location":"api/coil-base/coil.decode/-decode-result/","text":"coil-base / coil.decode / DecodeResult DecodeResult data class DecodeResult The result of Decoder.decode . Parameters drawable - The loaded Drawable . isSampled - True if drawable is sampled (i.e. not loaded into memory at full size). See Also Decoder Constructors Name Summary init DecodeResult(drawable: Drawable , isSampled: Boolean ) The result of Decoder.decode . Properties Name Summary drawable val drawable: Drawable The loaded Drawable . isSampled val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Home"},{"location":"api/coil-base/coil.decode/-decode-result/#decoderesult","text":"data class DecodeResult The result of Decoder.decode .","title":"DecodeResult"},{"location":"api/coil-base/coil.decode/-decode-result/#parameters","text":"drawable - The loaded Drawable . isSampled - True if drawable is sampled (i.e. not loaded into memory at full size). See Also Decoder","title":"Parameters"},{"location":"api/coil-base/coil.decode/-decode-result/#constructors","text":"Name Summary init DecodeResult(drawable: Drawable , isSampled: Boolean ) The result of Decoder.decode .","title":"Constructors"},{"location":"api/coil-base/coil.decode/-decode-result/#properties","text":"Name Summary drawable val drawable: Drawable The loaded Drawable . isSampled val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Properties"},{"location":"api/coil-base/coil.decode/-decode-result/-init-/","text":"coil-base / coil.decode / DecodeResult / init init DecodeResult(drawable: Drawable , isSampled: Boolean ) The result of Decoder.decode . Parameters drawable - The loaded Drawable . isSampled - True if drawable is sampled (i.e. not loaded into memory at full size). See Also Decoder","title":" init "},{"location":"api/coil-base/coil.decode/-decode-result/-init-/#init","text":"DecodeResult(drawable: Drawable , isSampled: Boolean ) The result of Decoder.decode .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.decode/-decode-result/-init-/#parameters","text":"drawable - The loaded Drawable . isSampled - True if drawable is sampled (i.e. not loaded into memory at full size). See Also Decoder","title":"Parameters"},{"location":"api/coil-base/coil.decode/-decode-result/drawable/","text":"coil-base / coil.decode / DecodeResult / drawable drawable val drawable: Drawable The loaded Drawable .","title":"Drawable"},{"location":"api/coil-base/coil.decode/-decode-result/drawable/#drawable","text":"val drawable: Drawable The loaded Drawable .","title":"drawable"},{"location":"api/coil-base/coil.decode/-decode-result/is-sampled/","text":"coil-base / coil.decode / DecodeResult / isSampled isSampled val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Is sampled"},{"location":"api/coil-base/coil.decode/-decode-result/is-sampled/#issampled","text":"val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"isSampled"},{"location":"api/coil-base/coil.decode/-decode-utils/","text":"coil-base / coil.decode / DecodeUtils DecodeUtils object DecodeUtils A collection of useful utility methods for decoding images. Functions Name Summary calculateInSampleSize fun calculateInSampleSize(inWidth: Int , inHeight: Int , outWidth: Int , outHeight: Int , scale: Scale ): Int Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( inWidth and inHeight ), the output dimensions ( outWidth , outHeight ), and the scale . isAnimatedWebP fun isAnimatedWebP(source: BufferedSource ): Boolean Return true if the source contains an animated WebP image. The source is not consumed. isGif fun isGif(source: BufferedSource ): Boolean Return true if the source contains a GIF image. The source is not consumed. isWebP fun isWebP(source: BufferedSource ): Boolean Return true if the source contains a WebP image. The source is not consumed.","title":"Home"},{"location":"api/coil-base/coil.decode/-decode-utils/#decodeutils","text":"object DecodeUtils A collection of useful utility methods for decoding images.","title":"DecodeUtils"},{"location":"api/coil-base/coil.decode/-decode-utils/#functions","text":"Name Summary calculateInSampleSize fun calculateInSampleSize(inWidth: Int , inHeight: Int , outWidth: Int , outHeight: Int , scale: Scale ): Int Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( inWidth and inHeight ), the output dimensions ( outWidth , outHeight ), and the scale . isAnimatedWebP fun isAnimatedWebP(source: BufferedSource ): Boolean Return true if the source contains an animated WebP image. The source is not consumed. isGif fun isGif(source: BufferedSource ): Boolean Return true if the source contains a GIF image. The source is not consumed. isWebP fun isWebP(source: BufferedSource ): Boolean Return true if the source contains a WebP image. The source is not consumed.","title":"Functions"},{"location":"api/coil-base/coil.decode/-decode-utils/calculate-in-sample-size/","text":"coil-base / coil.decode / DecodeUtils / calculateInSampleSize calculateInSampleSize @JvmStatic fun calculateInSampleSize(@Px inWidth: Int , @Px inHeight: Int , @Px outWidth: Int , @Px outHeight: Int , scale: Scale ): Int Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( inWidth and inHeight ), the output dimensions ( outWidth , outHeight ), and the scale .","title":"Calculate in sample size"},{"location":"api/coil-base/coil.decode/-decode-utils/calculate-in-sample-size/#calculateinsamplesize","text":"@JvmStatic fun calculateInSampleSize(@Px inWidth: Int , @Px inHeight: Int , @Px outWidth: Int , @Px outHeight: Int , scale: Scale ): Int Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( inWidth and inHeight ), the output dimensions ( outWidth , outHeight ), and the scale .","title":"calculateInSampleSize"},{"location":"api/coil-base/coil.decode/-decode-utils/is-animated-web-p/","text":"coil-base / coil.decode / DecodeUtils / isAnimatedWebP isAnimatedWebP @JvmStatic fun isAnimatedWebP(source: BufferedSource ): Boolean Return true if the source contains an animated WebP image. The source is not consumed.","title":"Is animated web p"},{"location":"api/coil-base/coil.decode/-decode-utils/is-animated-web-p/#isanimatedwebp","text":"@JvmStatic fun isAnimatedWebP(source: BufferedSource ): Boolean Return true if the source contains an animated WebP image. The source is not consumed.","title":"isAnimatedWebP"},{"location":"api/coil-base/coil.decode/-decode-utils/is-gif/","text":"coil-base / coil.decode / DecodeUtils / isGif isGif @JvmStatic fun isGif(source: BufferedSource ): Boolean Return true if the source contains a GIF image. The source is not consumed.","title":"Is gif"},{"location":"api/coil-base/coil.decode/-decode-utils/is-gif/#isgif","text":"@JvmStatic fun isGif(source: BufferedSource ): Boolean Return true if the source contains a GIF image. The source is not consumed.","title":"isGif"},{"location":"api/coil-base/coil.decode/-decode-utils/is-web-p/","text":"coil-base / coil.decode / DecodeUtils / isWebP isWebP @JvmStatic fun isWebP(source: BufferedSource ): Boolean Return true if the source contains a WebP image. The source is not consumed.","title":"Is web p"},{"location":"api/coil-base/coil.decode/-decode-utils/is-web-p/#iswebp","text":"@JvmStatic fun isWebP(source: BufferedSource ): Boolean Return true if the source contains a WebP image. The source is not consumed.","title":"isWebP"},{"location":"api/coil-base/coil.decode/-decoder/","text":"coil-base / coil.decode / Decoder Decoder interface Decoder Converts a BufferedSource into a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.). Functions Name Summary decode abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult Decode source as a Drawable . handles abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean Return true if this decoder supports decoding source .","title":"Home"},{"location":"api/coil-base/coil.decode/-decoder/#decoder","text":"interface Decoder Converts a BufferedSource into a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.).","title":"Decoder"},{"location":"api/coil-base/coil.decode/-decoder/#functions","text":"Name Summary decode abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult Decode source as a Drawable . handles abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean Return true if this decoder supports decoding source .","title":"Functions"},{"location":"api/coil-base/coil.decode/-decoder/decode/","text":"coil-base / coil.decode / Decoder / decode decode abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult Decode source as a Drawable . NOTE: Implementations are responsible for closing source when finished with it. Parameters pool - A BitmapPool which can be used to request Bitmap instances. source - The BufferedSource to read from. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Decode"},{"location":"api/coil-base/coil.decode/-decoder/decode/#decode","text":"abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult Decode source as a Drawable . NOTE: Implementations are responsible for closing source when finished with it.","title":"decode"},{"location":"api/coil-base/coil.decode/-decoder/decode/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. source - The BufferedSource to read from. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-decoder/handles/","text":"coil-base / coil.decode / Decoder / handles handles abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean Return true if this decoder supports decoding source . Implementations must not consume the source, as this can cause subsequent calls to handles and decode to fail. Prefer using BufferedSource.peek , BufferedSource.rangeEquals , or other non-destructive methods to check for the presence of header bytes or other markers. Implementations can also rely on mimeType , however it is not guaranteed to be accurate (e.g. a file that ends with .png, but is encoded as a .jpg). Parameters source - The BufferedSource to read from. mimeType - An optional MIME type for the source .","title":"Handles"},{"location":"api/coil-base/coil.decode/-decoder/handles/#handles","text":"abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean Return true if this decoder supports decoding source . Implementations must not consume the source, as this can cause subsequent calls to handles and decode to fail. Prefer using BufferedSource.peek , BufferedSource.rangeEquals , or other non-destructive methods to check for the presence of header bytes or other markers. Implementations can also rely on mimeType , however it is not guaranteed to be accurate (e.g. a file that ends with .png, but is encoded as a .jpg).","title":"handles"},{"location":"api/coil-base/coil.decode/-decoder/handles/#parameters","text":"source - The BufferedSource to read from. mimeType - An optional MIME type for the source .","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/","text":"coil-base / coil.decode / Options Options data class Options A set of configuration options for loading and decoding an image. Fetcher s and Decoder s should respect these options as best as possible. Parameters config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. scale - Determines if the image should be loaded to fit or fill the target's dimensions. allowRgb565 - True if the Fetcher is allowed to use Bitmap.Config.RGB_565 as an optimization. networkCachePolicy - Used to determine if this request is allowed to read from the network. diskCachePolicy - Used to determine if this request is allowed to read/write from/to disk. Constructors Name Summary init Options(config: Config , colorSpace: ColorSpace ?, scale: Scale , allowRgb565: Boolean , networkCachePolicy: CachePolicy , diskCachePolicy: CachePolicy ) A set of configuration options for loading and decoding an image. Properties Name Summary allowRgb565 val allowRgb565: Boolean True if the Fetcher is allowed to use Bitmap.Config.RGB_565 as an optimization. colorSpace val colorSpace: ColorSpace ? The preferred color space for any Bitmap s. config val config: Config The requested config for any Bitmap s. diskCachePolicy val diskCachePolicy: CachePolicy Used to determine if this request is allowed to read/write from/to disk. networkCachePolicy val networkCachePolicy: CachePolicy Used to determine if this request is allowed to read from the network. scale val scale: Scale Determines if the image should be loaded to fit or fill the target's dimensions.","title":"Home"},{"location":"api/coil-base/coil.decode/-options/#options","text":"data class Options A set of configuration options for loading and decoding an image. Fetcher s and Decoder s should respect these options as best as possible.","title":"Options"},{"location":"api/coil-base/coil.decode/-options/#parameters","text":"config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. scale - Determines if the image should be loaded to fit or fill the target's dimensions. allowRgb565 - True if the Fetcher is allowed to use Bitmap.Config.RGB_565 as an optimization. networkCachePolicy - Used to determine if this request is allowed to read from the network. diskCachePolicy - Used to determine if this request is allowed to read/write from/to disk.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/#constructors","text":"Name Summary init Options(config: Config , colorSpace: ColorSpace ?, scale: Scale , allowRgb565: Boolean , networkCachePolicy: CachePolicy , diskCachePolicy: CachePolicy ) A set of configuration options for loading and decoding an image.","title":"Constructors"},{"location":"api/coil-base/coil.decode/-options/#properties","text":"Name Summary allowRgb565 val allowRgb565: Boolean True if the Fetcher is allowed to use Bitmap.Config.RGB_565 as an optimization. colorSpace val colorSpace: ColorSpace ? The preferred color space for any Bitmap s. config val config: Config The requested config for any Bitmap s. diskCachePolicy val diskCachePolicy: CachePolicy Used to determine if this request is allowed to read/write from/to disk. networkCachePolicy val networkCachePolicy: CachePolicy Used to determine if this request is allowed to read from the network. scale val scale: Scale Determines if the image should be loaded to fit or fill the target's dimensions.","title":"Properties"},{"location":"api/coil-base/coil.decode/-options/-init-/","text":"coil-base / coil.decode / Options / init init Options(config: Config , colorSpace: ColorSpace ?, scale: Scale , allowRgb565: Boolean , networkCachePolicy: CachePolicy , diskCachePolicy: CachePolicy ) A set of configuration options for loading and decoding an image. Fetcher s and Decoder s should respect these options as best as possible. Parameters config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. scale - Determines if the image should be loaded to fit or fill the target's dimensions. allowRgb565 - True if the Fetcher is allowed to use Bitmap.Config.RGB_565 as an optimization. networkCachePolicy - Used to determine if this request is allowed to read from the network. diskCachePolicy - Used to determine if this request is allowed to read/write from/to disk.","title":" init "},{"location":"api/coil-base/coil.decode/-options/-init-/#init","text":"Options(config: Config , colorSpace: ColorSpace ?, scale: Scale , allowRgb565: Boolean , networkCachePolicy: CachePolicy , diskCachePolicy: CachePolicy ) A set of configuration options for loading and decoding an image. Fetcher s and Decoder s should respect these options as best as possible.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.decode/-options/-init-/#parameters","text":"config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. scale - Determines if the image should be loaded to fit or fill the target's dimensions. allowRgb565 - True if the Fetcher is allowed to use Bitmap.Config.RGB_565 as an optimization. networkCachePolicy - Used to determine if this request is allowed to read from the network. diskCachePolicy - Used to determine if this request is allowed to read/write from/to disk.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/allow-rgb565/","text":"coil-base / coil.decode / Options / allowRgb565 allowRgb565 val allowRgb565: Boolean True if the Fetcher is allowed to use Bitmap.Config.RGB_565 as an optimization.","title":"Allow rgb565"},{"location":"api/coil-base/coil.decode/-options/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean True if the Fetcher is allowed to use Bitmap.Config.RGB_565 as an optimization.","title":"allowRgb565"},{"location":"api/coil-base/coil.decode/-options/color-space/","text":"coil-base / coil.decode / Options / colorSpace colorSpace val colorSpace: ColorSpace ? The preferred color space for any Bitmap s.","title":"Color space"},{"location":"api/coil-base/coil.decode/-options/color-space/#colorspace","text":"val colorSpace: ColorSpace ? The preferred color space for any Bitmap s.","title":"colorSpace"},{"location":"api/coil-base/coil.decode/-options/config/","text":"coil-base / coil.decode / Options / config config val config: Config The requested config for any Bitmap s.","title":"Config"},{"location":"api/coil-base/coil.decode/-options/config/#config","text":"val config: Config The requested config for any Bitmap s.","title":"config"},{"location":"api/coil-base/coil.decode/-options/disk-cache-policy/","text":"coil-base / coil.decode / Options / diskCachePolicy diskCachePolicy val diskCachePolicy: CachePolicy Used to determine if this request is allowed to read/write from/to disk.","title":"Disk cache policy"},{"location":"api/coil-base/coil.decode/-options/disk-cache-policy/#diskcachepolicy","text":"val diskCachePolicy: CachePolicy Used to determine if this request is allowed to read/write from/to disk.","title":"diskCachePolicy"},{"location":"api/coil-base/coil.decode/-options/network-cache-policy/","text":"coil-base / coil.decode / Options / networkCachePolicy networkCachePolicy val networkCachePolicy: CachePolicy Used to determine if this request is allowed to read from the network.","title":"Network cache policy"},{"location":"api/coil-base/coil.decode/-options/network-cache-policy/#networkcachepolicy","text":"val networkCachePolicy: CachePolicy Used to determine if this request is allowed to read from the network.","title":"networkCachePolicy"},{"location":"api/coil-base/coil.decode/-options/scale/","text":"coil-base / coil.decode / Options / scale scale val scale: Scale Determines if the image should be loaded to fit or fill the target's dimensions.","title":"Scale"},{"location":"api/coil-base/coil.decode/-options/scale/#scale","text":"val scale: Scale Determines if the image should be loaded to fit or fill the target's dimensions.","title":"scale"},{"location":"api/coil-base/coil.drawable/","text":"coil-base / coil.drawable Package coil.drawable Types Name Summary CrossfadeDrawable class CrossfadeDrawable : Drawable , Callback , Animatable A Drawable that crossfades from start to end .","title":"Home"},{"location":"api/coil-base/coil.drawable/#package-coildrawable","text":"","title":"Package coil.drawable"},{"location":"api/coil-base/coil.drawable/#types","text":"Name Summary CrossfadeDrawable class CrossfadeDrawable : Drawable , Callback , Animatable A Drawable that crossfades from start to end .","title":"Types"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable CrossfadeDrawable class CrossfadeDrawable : Drawable , Callback , Animatable A Drawable that crossfades from start to end . NOTE: The transition can only be executed once as the start drawable is dereferenced at the end of the transition. Constructors Name Summary init CrossfadeDrawable(start: Drawable ?, end: Drawable , duration: Int = DEFAULT_DURATION, onEnd: (() - Unit )? = null) A Drawable that crossfades from start to end . Properties Name Summary end val end: Drawable Functions Name Summary draw fun draw(canvas: Canvas ): Unit getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit start fun start(): Unit stop fun stop(): Unit unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit Companion Object Properties Name Summary DEFAULT_DURATION const val DEFAULT_DURATION: Int","title":"Home"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#crossfadedrawable","text":"class CrossfadeDrawable : Drawable , Callback , Animatable A Drawable that crossfades from start to end . NOTE: The transition can only be executed once as the start drawable is dereferenced at the end of the transition.","title":"CrossfadeDrawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#constructors","text":"Name Summary init CrossfadeDrawable(start: Drawable ?, end: Drawable , duration: Int = DEFAULT_DURATION, onEnd: (() - Unit )? = null) A Drawable that crossfades from start to end .","title":"Constructors"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#properties","text":"Name Summary end val end: Drawable","title":"Properties"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#functions","text":"Name Summary draw fun draw(canvas: Canvas ): Unit getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit start fun start(): Unit stop fun stop(): Unit unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Functions"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#companion-object-properties","text":"Name Summary DEFAULT_DURATION const val DEFAULT_DURATION: Int","title":"Companion Object Properties"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-d-e-f-a-u-l-t_-d-u-r-a-t-i-o-n/","text":"coil-base / coil.drawable / CrossfadeDrawable / DEFAULT_DURATION DEFAULT_DURATION const val DEFAULT_DURATION: Int","title":" d e f a u l t  d u r a t i o n"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-d-e-f-a-u-l-t_-d-u-r-a-t-i-o-n/#default_duration","text":"const val DEFAULT_DURATION: Int","title":"DEFAULT_DURATION"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-init-/","text":"coil-base / coil.drawable / CrossfadeDrawable / init init CrossfadeDrawable(start: Drawable ?, end: Drawable , duration: Int = DEFAULT_DURATION, onEnd: (() - Unit )? = null) A Drawable that crossfades from start to end . NOTE: The transition can only be executed once as the start drawable is dereferenced at the end of the transition.","title":" init "},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-init-/#init","text":"CrossfadeDrawable(start: Drawable ?, end: Drawable , duration: Int = DEFAULT_DURATION, onEnd: (() - Unit )? = null) A Drawable that crossfades from start to end . NOTE: The transition can only be executed once as the start drawable is dereferenced at the end of the transition.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/draw/","text":"coil-base / coil.drawable / CrossfadeDrawable / draw draw fun draw(canvas: Canvas ): Unit","title":"Draw"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/draw/#draw","text":"fun draw(canvas: Canvas ): Unit","title":"draw"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/end/","text":"coil-base / coil.drawable / CrossfadeDrawable / end end val end: Drawable","title":"End"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/end/#end","text":"val end: Drawable","title":"end"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-height/","text":"coil-base / coil.drawable / CrossfadeDrawable / getIntrinsicHeight getIntrinsicHeight fun getIntrinsicHeight(): Int","title":"Get intrinsic height"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-height/#getintrinsicheight","text":"fun getIntrinsicHeight(): Int","title":"getIntrinsicHeight"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-width/","text":"coil-base / coil.drawable / CrossfadeDrawable / getIntrinsicWidth getIntrinsicWidth fun getIntrinsicWidth(): Int","title":"Get intrinsic width"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-width/#getintrinsicwidth","text":"fun getIntrinsicWidth(): Int","title":"getIntrinsicWidth"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-opacity/","text":"coil-base / coil.drawable / CrossfadeDrawable / getOpacity getOpacity fun getOpacity(): Int","title":"Get opacity"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-opacity/#getopacity","text":"fun getOpacity(): Int","title":"getOpacity"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/invalidate-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable / invalidateDrawable invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit","title":"Invalidate drawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/invalidate-drawable/#invalidatedrawable","text":"fun invalidateDrawable(who: Drawable ): Unit","title":"invalidateDrawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/is-running/","text":"coil-base / coil.drawable / CrossfadeDrawable / isRunning isRunning fun isRunning(): Boolean","title":"Is running"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/is-running/#isrunning","text":"fun isRunning(): Boolean","title":"isRunning"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-bounds-change/","text":"coil-base / coil.drawable / CrossfadeDrawable / onBoundsChange onBoundsChange protected fun onBoundsChange(bounds: Rect ): Unit","title":"On bounds change"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-bounds-change/#onboundschange","text":"protected fun onBoundsChange(bounds: Rect ): Unit","title":"onBoundsChange"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/schedule-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable / scheduleDrawable scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit","title":"Schedule drawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/schedule-drawable/#scheduledrawable","text":"fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit","title":"scheduleDrawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-alpha/","text":"coil-base / coil.drawable / CrossfadeDrawable / setAlpha setAlpha fun setAlpha(alpha: Int ): Unit","title":"Set alpha"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-alpha/#setalpha","text":"fun setAlpha(alpha: Int ): Unit","title":"setAlpha"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-color-filter/","text":"coil-base / coil.drawable / CrossfadeDrawable / setColorFilter setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"Set color filter"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-color-filter/#setcolorfilter","text":"fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"setColorFilter"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/start/","text":"coil-base / coil.drawable / CrossfadeDrawable / start start fun start(): Unit","title":"Start"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/start/#start","text":"fun start(): Unit","title":"start"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/stop/","text":"coil-base / coil.drawable / CrossfadeDrawable / stop stop fun stop(): Unit","title":"Stop"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/stop/#stop","text":"fun stop(): Unit","title":"stop"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/unschedule-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable / unscheduleDrawable unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Unschedule drawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/unschedule-drawable/#unscheduledrawable","text":"fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"unscheduleDrawable"},{"location":"api/coil-base/coil.fetch/","text":"coil-base / coil.fetch Package coil.fetch Types Name Summary DrawableResult data class DrawableResult : FetchResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . Fetcher interface Fetcher T : Any A Fetcher translates data into either a BufferedSource or a Drawable . FetchResult sealed class FetchResult The result of Fetcher.fetch . SourceResult data class SourceResult : FetchResult A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":"Home"},{"location":"api/coil-base/coil.fetch/#package-coilfetch","text":"","title":"Package coil.fetch"},{"location":"api/coil-base/coil.fetch/#types","text":"Name Summary DrawableResult data class DrawableResult : FetchResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . Fetcher interface Fetcher T : Any A Fetcher translates data into either a BufferedSource or a Drawable . FetchResult sealed class FetchResult The result of Fetcher.fetch . SourceResult data class SourceResult : FetchResult A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":"Types"},{"location":"api/coil-base/coil.fetch/-fetch-result/","text":"coil-base / coil.fetch / FetchResult FetchResult sealed class FetchResult The result of Fetcher.fetch . Inheritors Name Summary DrawableResult data class DrawableResult : FetchResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . SourceResult data class SourceResult : FetchResult A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":" fetch result"},{"location":"api/coil-base/coil.fetch/-fetch-result/#fetchresult","text":"sealed class FetchResult The result of Fetcher.fetch .","title":"FetchResult"},{"location":"api/coil-base/coil.fetch/-fetch-result/#inheritors","text":"Name Summary DrawableResult data class DrawableResult : FetchResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . SourceResult data class SourceResult : FetchResult A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":"Inheritors"},{"location":"api/coil-base/coil.fetch/-drawable-result/","text":"coil-base / coil.fetch / DrawableResult DrawableResult data class DrawableResult : FetchResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . Parameters drawable - The loaded Drawable . dataSource - The source that drawable was fetched from. isSampled - True if drawable is sampled (i.e. not loaded into memory at full size). Constructors Name Summary init DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource ) A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . Properties Name Summary dataSource val dataSource: DataSource The source that drawable was fetched from. drawable val drawable: Drawable The loaded Drawable . isSampled val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Home"},{"location":"api/coil-base/coil.fetch/-drawable-result/#drawableresult","text":"data class DrawableResult : FetchResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource .","title":"DrawableResult"},{"location":"api/coil-base/coil.fetch/-drawable-result/#parameters","text":"drawable - The loaded Drawable . dataSource - The source that drawable was fetched from. isSampled - True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-drawable-result/#constructors","text":"Name Summary init DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource ) A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource .","title":"Constructors"},{"location":"api/coil-base/coil.fetch/-drawable-result/#properties","text":"Name Summary dataSource val dataSource: DataSource The source that drawable was fetched from. drawable val drawable: Drawable The loaded Drawable . isSampled val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Properties"},{"location":"api/coil-base/coil.fetch/-drawable-result/-init-/","text":"coil-base / coil.fetch / DrawableResult / init init DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource ) A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . Parameters drawable - The loaded Drawable . dataSource - The source that drawable was fetched from. isSampled - True if drawable is sampled (i.e. not loaded into memory at full size).","title":" init "},{"location":"api/coil-base/coil.fetch/-drawable-result/-init-/#init","text":"DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource ) A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.fetch/-drawable-result/-init-/#parameters","text":"drawable - The loaded Drawable . dataSource - The source that drawable was fetched from. isSampled - True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-drawable-result/data-source/","text":"coil-base / coil.fetch / DrawableResult / dataSource dataSource val dataSource: DataSource The source that drawable was fetched from.","title":"Data source"},{"location":"api/coil-base/coil.fetch/-drawable-result/data-source/#datasource","text":"val dataSource: DataSource The source that drawable was fetched from.","title":"dataSource"},{"location":"api/coil-base/coil.fetch/-drawable-result/drawable/","text":"coil-base / coil.fetch / DrawableResult / drawable drawable val drawable: Drawable The loaded Drawable .","title":"Drawable"},{"location":"api/coil-base/coil.fetch/-drawable-result/drawable/#drawable","text":"val drawable: Drawable The loaded Drawable .","title":"drawable"},{"location":"api/coil-base/coil.fetch/-drawable-result/is-sampled/","text":"coil-base / coil.fetch / DrawableResult / isSampled isSampled val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Is sampled"},{"location":"api/coil-base/coil.fetch/-drawable-result/is-sampled/#issampled","text":"val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"isSampled"},{"location":"api/coil-base/coil.fetch/-fetcher/","text":"coil-base / coil.fetch / Fetcher Fetcher interface Fetcher T : Any A Fetcher translates data into either a BufferedSource or a Drawable . To accomplish this, fetchers fit into one of two types: Uses the data as a key to fetch bytes from a remote source (e.g. network or disk) and exposes is as a BufferedSource . e.g. HttpUrlFetcher Reads the data directly and translates it into a Drawable . e.g. BitmapFetcher Functions Name Summary fetch abstract suspend fun fetch(pool: BitmapPool , data: T , size: Size , options: Options ): FetchResult Load the data into memory. Perform any necessary fetching operations. handles open fun handles(data: T ): Boolean Return true if this can load data . key open fun key(data: T ): String ? Compute the memory cache key for data .","title":"Home"},{"location":"api/coil-base/coil.fetch/-fetcher/#fetcher","text":"interface Fetcher T : Any A Fetcher translates data into either a BufferedSource or a Drawable . To accomplish this, fetchers fit into one of two types: Uses the data as a key to fetch bytes from a remote source (e.g. network or disk) and exposes is as a BufferedSource . e.g. HttpUrlFetcher Reads the data directly and translates it into a Drawable . e.g. BitmapFetcher","title":"Fetcher"},{"location":"api/coil-base/coil.fetch/-fetcher/#functions","text":"Name Summary fetch abstract suspend fun fetch(pool: BitmapPool , data: T , size: Size , options: Options ): FetchResult Load the data into memory. Perform any necessary fetching operations. handles open fun handles(data: T ): Boolean Return true if this can load data . key open fun key(data: T ): String ? Compute the memory cache key for data .","title":"Functions"},{"location":"api/coil-base/coil.fetch/-fetcher/fetch/","text":"coil-base / coil.fetch / Fetcher / fetch fetch abstract suspend fun fetch(pool: BitmapPool , data: T , size: Size , options: Options ): FetchResult Load the data into memory. Perform any necessary fetching operations. Parameters pool - A BitmapPool which can be used to request Bitmap instances. data - The data to load. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Fetch"},{"location":"api/coil-base/coil.fetch/-fetcher/fetch/#fetch","text":"abstract suspend fun fetch(pool: BitmapPool , data: T , size: Size , options: Options ): FetchResult Load the data into memory. Perform any necessary fetching operations.","title":"fetch"},{"location":"api/coil-base/coil.fetch/-fetcher/fetch/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. data - The data to load. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-fetcher/handles/","text":"coil-base / coil.fetch / Fetcher / handles handles open fun handles(data: T ): Boolean Return true if this can load data .","title":"Handles"},{"location":"api/coil-base/coil.fetch/-fetcher/handles/#handles","text":"open fun handles(data: T ): Boolean Return true if this can load data .","title":"handles"},{"location":"api/coil-base/coil.fetch/-fetcher/key/","text":"coil-base / coil.fetch / Fetcher / key key open fun key(data: T ): String ? Compute the memory cache key for data . Items with the same cache key will be treated as equivalent by the MemoryCache . Returning null will prevent the result of fetch from being added to the memory cache.","title":"Key"},{"location":"api/coil-base/coil.fetch/-fetcher/key/#key","text":"open fun key(data: T ): String ? Compute the memory cache key for data . Items with the same cache key will be treated as equivalent by the MemoryCache . Returning null will prevent the result of fetch from being added to the memory cache.","title":"key"},{"location":"api/coil-base/coil.fetch/-source-result/","text":"coil-base / coil.fetch / SourceResult SourceResult data class SourceResult : FetchResult A raw BufferedSource result, which will be consumed by the relevant Decoder . Parameters source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from. Constructors Name Summary init SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource ) A raw BufferedSource result, which will be consumed by the relevant Decoder . Properties Name Summary dataSource val dataSource: DataSource Where source was loaded from. mimeType val mimeType: String ? An optional MIME type for the source . source val source: BufferedSource An unconsumed BufferedSource that will be decoded by a Decoder .","title":"Home"},{"location":"api/coil-base/coil.fetch/-source-result/#sourceresult","text":"data class SourceResult : FetchResult A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":"SourceResult"},{"location":"api/coil-base/coil.fetch/-source-result/#parameters","text":"source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-source-result/#constructors","text":"Name Summary init SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource ) A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":"Constructors"},{"location":"api/coil-base/coil.fetch/-source-result/#properties","text":"Name Summary dataSource val dataSource: DataSource Where source was loaded from. mimeType val mimeType: String ? An optional MIME type for the source . source val source: BufferedSource An unconsumed BufferedSource that will be decoded by a Decoder .","title":"Properties"},{"location":"api/coil-base/coil.fetch/-source-result/-init-/","text":"coil-base / coil.fetch / SourceResult / init init SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource ) A raw BufferedSource result, which will be consumed by the relevant Decoder . Parameters source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from.","title":" init "},{"location":"api/coil-base/coil.fetch/-source-result/-init-/#init","text":"SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource ) A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.fetch/-source-result/-init-/#parameters","text":"source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-source-result/data-source/","text":"coil-base / coil.fetch / SourceResult / dataSource dataSource val dataSource: DataSource Where source was loaded from.","title":"Data source"},{"location":"api/coil-base/coil.fetch/-source-result/data-source/#datasource","text":"val dataSource: DataSource Where source was loaded from.","title":"dataSource"},{"location":"api/coil-base/coil.fetch/-source-result/mime-type/","text":"coil-base / coil.fetch / SourceResult / mimeType mimeType val mimeType: String ? An optional MIME type for the source .","title":"Mime type"},{"location":"api/coil-base/coil.fetch/-source-result/mime-type/#mimetype","text":"val mimeType: String ? An optional MIME type for the source .","title":"mimeType"},{"location":"api/coil-base/coil.fetch/-source-result/source/","text":"coil-base / coil.fetch / SourceResult / source source val source: BufferedSource An unconsumed BufferedSource that will be decoded by a Decoder .","title":"Source"},{"location":"api/coil-base/coil.fetch/-source-result/source/#source","text":"val source: BufferedSource An unconsumed BufferedSource that will be decoded by a Decoder .","title":"source"},{"location":"api/coil-base/coil.map/","text":"coil-base / coil.map Package coil.map Types Name Summary Mapper interface Mapper T : Any , V : Any An interface to convert data with type T into V . MeasuredMapper interface MeasuredMapper T : Any , V : Any An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously.","title":"Home"},{"location":"api/coil-base/coil.map/#package-coilmap","text":"","title":"Package coil.map"},{"location":"api/coil-base/coil.map/#types","text":"Name Summary Mapper interface Mapper T : Any , V : Any An interface to convert data with type T into V . MeasuredMapper interface MeasuredMapper T : Any , V : Any An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously.","title":"Types"},{"location":"api/coil-base/coil.map/-mapper/","text":"coil-base / coil.map / Mapper Mapper interface Mapper T : Any , V : Any An interface to convert data with type T into V . Use this to map custom data types to a type that can be handled by a Fetcher . Functions Name Summary handles open fun handles(data: T ): Boolean Return true if this can convert data . map abstract fun map(data: T ): V Convert data into V .","title":"Home"},{"location":"api/coil-base/coil.map/-mapper/#mapper","text":"interface Mapper T : Any , V : Any An interface to convert data with type T into V . Use this to map custom data types to a type that can be handled by a Fetcher .","title":"Mapper"},{"location":"api/coil-base/coil.map/-mapper/#functions","text":"Name Summary handles open fun handles(data: T ): Boolean Return true if this can convert data . map abstract fun map(data: T ): V Convert data into V .","title":"Functions"},{"location":"api/coil-base/coil.map/-mapper/handles/","text":"coil-base / coil.map / Mapper / handles handles open fun handles(data: T ): Boolean Return true if this can convert data .","title":"Handles"},{"location":"api/coil-base/coil.map/-mapper/handles/#handles","text":"open fun handles(data: T ): Boolean Return true if this can convert data .","title":"handles"},{"location":"api/coil-base/coil.map/-mapper/map/","text":"coil-base / coil.map / Mapper / map map abstract fun map(data: T ): V Convert data into V .","title":"Map"},{"location":"api/coil-base/coil.map/-mapper/map/#map","text":"abstract fun map(data: T ): V Convert data into V .","title":"map"},{"location":"api/coil-base/coil.map/-measured-mapper/","text":"coil-base / coil.map / MeasuredMapper MeasuredMapper interface MeasuredMapper T : Any , V : Any An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously. Prefer implementing Mapper if you do not need to need to know the size of the Target . See Also Mapper Functions Name Summary handles open fun handles(data: T ): Boolean Return true if this can convert data . map abstract fun map(data: T , size: Size ): V Convert data into V .","title":"Home"},{"location":"api/coil-base/coil.map/-measured-mapper/#measuredmapper","text":"interface MeasuredMapper T : Any , V : Any An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously. Prefer implementing Mapper if you do not need to need to know the size of the Target . See Also Mapper","title":"MeasuredMapper"},{"location":"api/coil-base/coil.map/-measured-mapper/#functions","text":"Name Summary handles open fun handles(data: T ): Boolean Return true if this can convert data . map abstract fun map(data: T , size: Size ): V Convert data into V .","title":"Functions"},{"location":"api/coil-base/coil.map/-measured-mapper/handles/","text":"coil-base / coil.map / MeasuredMapper / handles handles open fun handles(data: T ): Boolean Return true if this can convert data .","title":"Handles"},{"location":"api/coil-base/coil.map/-measured-mapper/handles/#handles","text":"open fun handles(data: T ): Boolean Return true if this can convert data .","title":"handles"},{"location":"api/coil-base/coil.map/-measured-mapper/map/","text":"coil-base / coil.map / MeasuredMapper / map map abstract fun map(data: T , size: Size ): V Convert data into V .","title":"Map"},{"location":"api/coil-base/coil.map/-measured-mapper/map/#map","text":"abstract fun map(data: T , size: Size ): V Convert data into V .","title":"map"},{"location":"api/coil-base/coil.network/","text":"coil-base / coil.network Package coil.network Exceptions Name Summary HttpException class HttpException : RuntimeException Exception for an unexpected, non-2xx HTTP response.","title":"Home"},{"location":"api/coil-base/coil.network/#package-coilnetwork","text":"","title":"Package coil.network"},{"location":"api/coil-base/coil.network/#exceptions","text":"Name Summary HttpException class HttpException : RuntimeException Exception for an unexpected, non-2xx HTTP response.","title":"Exceptions"},{"location":"api/coil-base/coil.network/-http-exception/","text":"coil-base / coil.network / HttpException HttpException class HttpException : RuntimeException Exception for an unexpected, non-2xx HTTP response. See Also HttpUrlFetcher Constructors Name Summary init HttpException(response: Response ) Exception for an unexpected, non-2xx HTTP response. Properties Name Summary response val response: Response","title":"Home"},{"location":"api/coil-base/coil.network/-http-exception/#httpexception","text":"class HttpException : RuntimeException Exception for an unexpected, non-2xx HTTP response. See Also HttpUrlFetcher","title":"HttpException"},{"location":"api/coil-base/coil.network/-http-exception/#constructors","text":"Name Summary init HttpException(response: Response ) Exception for an unexpected, non-2xx HTTP response.","title":"Constructors"},{"location":"api/coil-base/coil.network/-http-exception/#properties","text":"Name Summary response val response: Response","title":"Properties"},{"location":"api/coil-base/coil.network/-http-exception/-init-/","text":"coil-base / coil.network / HttpException / init init HttpException(response: Response ) Exception for an unexpected, non-2xx HTTP response. See Also HttpUrlFetcher","title":" init "},{"location":"api/coil-base/coil.network/-http-exception/-init-/#init","text":"HttpException(response: Response ) Exception for an unexpected, non-2xx HTTP response. See Also HttpUrlFetcher","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.network/-http-exception/response/","text":"coil-base / coil.network / HttpException / response response val response: Response","title":"Response"},{"location":"api/coil-base/coil.network/-http-exception/response/#response","text":"val response: Response","title":"response"},{"location":"api/coil-base/coil.request/","text":"coil-base / coil.request Package coil.request Types Name Summary CachePolicy enum class CachePolicy Represents the read/write policy for a cache source. GetRequest class GetRequest : Request A value object that represents a get image request. GetRequestBuilder class GetRequestBuilder : RequestBuilder GetRequestBuilder Builder for a GetRequest . LoadRequest class LoadRequest : Request A value object that represents a load image request. LoadRequestBuilder class LoadRequestBuilder : RequestBuilder LoadRequestBuilder Builder for a LoadRequest . Request sealed class Request A value object that represents an image request. RequestBuilder sealed class RequestBuilder T : RequestBuilder T Base class for LoadRequestBuilder and GetRequestBuilder . RequestDisposable interface RequestDisposable Represents the work of an image request.","title":"Home"},{"location":"api/coil-base/coil.request/#package-coilrequest","text":"","title":"Package coil.request"},{"location":"api/coil-base/coil.request/#types","text":"Name Summary CachePolicy enum class CachePolicy Represents the read/write policy for a cache source. GetRequest class GetRequest : Request A value object that represents a get image request. GetRequestBuilder class GetRequestBuilder : RequestBuilder GetRequestBuilder Builder for a GetRequest . LoadRequest class LoadRequest : Request A value object that represents a load image request. LoadRequestBuilder class LoadRequestBuilder : RequestBuilder LoadRequestBuilder Builder for a LoadRequest . Request sealed class Request A value object that represents an image request. RequestBuilder sealed class RequestBuilder T : RequestBuilder T Base class for LoadRequestBuilder and GetRequestBuilder . RequestDisposable interface RequestDisposable Represents the work of an image request.","title":"Types"},{"location":"api/coil-base/coil.request/-cache-policy/","text":"coil-base / coil.request / CachePolicy CachePolicy enum class CachePolicy Represents the read/write policy for a cache source. See Also Request.networkCachePolicy Request.diskCachePolicy Request.memoryCachePolicy Enum Values Name Summary ENABLED READ_ONLY WRITE_ONLY DISABLED Properties Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":"Home"},{"location":"api/coil-base/coil.request/-cache-policy/#cachepolicy","text":"enum class CachePolicy Represents the read/write policy for a cache source. See Also Request.networkCachePolicy Request.diskCachePolicy Request.memoryCachePolicy","title":"CachePolicy"},{"location":"api/coil-base/coil.request/-cache-policy/#enum-values","text":"Name Summary ENABLED READ_ONLY WRITE_ONLY DISABLED","title":"Enum Values"},{"location":"api/coil-base/coil.request/-cache-policy/#properties","text":"Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":"Properties"},{"location":"api/coil-base/coil.request/-cache-policy/-d-i-s-a-b-l-e-d/","text":"coil-base / coil.request / CachePolicy / DISABLED DISABLED DISABLED Inherited Properties Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":" d i s a b l e d"},{"location":"api/coil-base/coil.request/-cache-policy/-d-i-s-a-b-l-e-d/#disabled","text":"DISABLED","title":"DISABLED"},{"location":"api/coil-base/coil.request/-cache-policy/-d-i-s-a-b-l-e-d/#inherited-properties","text":"Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":"Inherited Properties"},{"location":"api/coil-base/coil.request/-cache-policy/-e-n-a-b-l-e-d/","text":"coil-base / coil.request / CachePolicy / ENABLED ENABLED ENABLED Inherited Properties Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":" e n a b l e d"},{"location":"api/coil-base/coil.request/-cache-policy/-e-n-a-b-l-e-d/#enabled","text":"ENABLED","title":"ENABLED"},{"location":"api/coil-base/coil.request/-cache-policy/-e-n-a-b-l-e-d/#inherited-properties","text":"Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":"Inherited Properties"},{"location":"api/coil-base/coil.request/-cache-policy/-r-e-a-d_-o-n-l-y/","text":"coil-base / coil.request / CachePolicy / READ_ONLY READ_ONLY READ_ONLY Inherited Properties Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":" r e a d  o n l y"},{"location":"api/coil-base/coil.request/-cache-policy/-r-e-a-d_-o-n-l-y/#read_only","text":"READ_ONLY","title":"READ_ONLY"},{"location":"api/coil-base/coil.request/-cache-policy/-r-e-a-d_-o-n-l-y/#inherited-properties","text":"Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":"Inherited Properties"},{"location":"api/coil-base/coil.request/-cache-policy/-w-r-i-t-e_-o-n-l-y/","text":"coil-base / coil.request / CachePolicy / WRITE_ONLY WRITE_ONLY WRITE_ONLY Inherited Properties Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":" w r i t e  o n l y"},{"location":"api/coil-base/coil.request/-cache-policy/-w-r-i-t-e_-o-n-l-y/#write_only","text":"WRITE_ONLY","title":"WRITE_ONLY"},{"location":"api/coil-base/coil.request/-cache-policy/-w-r-i-t-e_-o-n-l-y/#inherited-properties","text":"Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":"Inherited Properties"},{"location":"api/coil-base/coil.request/-cache-policy/read-enabled/","text":"coil-base / coil.request / CachePolicy / readEnabled readEnabled val readEnabled: Boolean","title":"Read enabled"},{"location":"api/coil-base/coil.request/-cache-policy/read-enabled/#readenabled","text":"val readEnabled: Boolean","title":"readEnabled"},{"location":"api/coil-base/coil.request/-cache-policy/write-enabled/","text":"coil-base / coil.request / CachePolicy / writeEnabled writeEnabled val writeEnabled: Boolean","title":"Write enabled"},{"location":"api/coil-base/coil.request/-cache-policy/write-enabled/#writeenabled","text":"val writeEnabled: Boolean","title":"writeEnabled"},{"location":"api/coil-base/coil.request/-get-request/","text":"coil-base / coil.request / GetRequest GetRequest class GetRequest : Request A value object that represents a get image request. Instances can be created ad hoc: val drawable = imageLoader.get( https://www.example.com/image.jpg ) { size(1080, 1920) } Or instances can be created separately from the call that executes them: val request = GetRequest(imageLoader.defaults) { data( https://www.example.com/image.jpg ) size(1080, 1920) } imageLoader.get(request) See Also GetRequestBuilder ImageLoader.get Properties Name Summary allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config colorSpace val colorSpace: ColorSpace ? crossfadeMillis val crossfadeMillis: Int data val data: Any diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? keyOverride val keyOverride: String ? lifecycle val lifecycle: Lifecycle ? listener val listener: Request.Listener ? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy placeholder val placeholder: Drawable ? scale val scale: Scale ? sizeResolver val sizeResolver: SizeResolver ? target val target: Target ? transformations val transformations: List Transformation Functions Name Summary newBuilder fun newBuilder(): GetRequestBuilder Create a new GetRequestBuilder instance using this as a base. Companion Object Functions Name Summary invoke operator fun invoke(defaults: DefaultRequestOptions , builder: GetRequestBuilder .() - Unit = {}): GetRequest operator fun invoke(request: GetRequest , builder: GetRequestBuilder .() - Unit = {}): GetRequest Create a new GetRequest instance.","title":"Home"},{"location":"api/coil-base/coil.request/-get-request/#getrequest","text":"class GetRequest : Request A value object that represents a get image request. Instances can be created ad hoc: val drawable = imageLoader.get( https://www.example.com/image.jpg ) { size(1080, 1920) } Or instances can be created separately from the call that executes them: val request = GetRequest(imageLoader.defaults) { data( https://www.example.com/image.jpg ) size(1080, 1920) } imageLoader.get(request) See Also GetRequestBuilder ImageLoader.get","title":"GetRequest"},{"location":"api/coil-base/coil.request/-get-request/#properties","text":"Name Summary allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config colorSpace val colorSpace: ColorSpace ? crossfadeMillis val crossfadeMillis: Int data val data: Any diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? keyOverride val keyOverride: String ? lifecycle val lifecycle: Lifecycle ? listener val listener: Request.Listener ? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy placeholder val placeholder: Drawable ? scale val scale: Scale ? sizeResolver val sizeResolver: SizeResolver ? target val target: Target ? transformations val transformations: List Transformation","title":"Properties"},{"location":"api/coil-base/coil.request/-get-request/#functions","text":"Name Summary newBuilder fun newBuilder(): GetRequestBuilder Create a new GetRequestBuilder instance using this as a base.","title":"Functions"},{"location":"api/coil-base/coil.request/-get-request/#companion-object-functions","text":"Name Summary invoke operator fun invoke(defaults: DefaultRequestOptions , builder: GetRequestBuilder .() - Unit = {}): GetRequest operator fun invoke(request: GetRequest , builder: GetRequestBuilder .() - Unit = {}): GetRequest Create a new GetRequest instance.","title":"Companion Object Functions"},{"location":"api/coil-base/coil.request/-get-request/allow-hardware/","text":"coil-base / coil.request / GetRequest / allowHardware allowHardware val allowHardware: Boolean Overrides Request.allowHardware","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-get-request/allow-hardware/#allowhardware","text":"val allowHardware: Boolean Overrides Request.allowHardware","title":"allowHardware"},{"location":"api/coil-base/coil.request/-get-request/allow-rgb565/","text":"coil-base / coil.request / GetRequest / allowRgb565 allowRgb565 val allowRgb565: Boolean Overrides Request.allowRgb565","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-get-request/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean Overrides Request.allowRgb565","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-get-request/bitmap-config/","text":"coil-base / coil.request / GetRequest / bitmapConfig bitmapConfig val bitmapConfig: Config Overrides Request.bitmapConfig","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-get-request/bitmap-config/#bitmapconfig","text":"val bitmapConfig: Config Overrides Request.bitmapConfig","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-get-request/color-space/","text":"coil-base / coil.request / GetRequest / colorSpace colorSpace val colorSpace: ColorSpace ? Overrides Request.colorSpace","title":"Color space"},{"location":"api/coil-base/coil.request/-get-request/color-space/#colorspace","text":"val colorSpace: ColorSpace ? Overrides Request.colorSpace","title":"colorSpace"},{"location":"api/coil-base/coil.request/-get-request/crossfade-millis/","text":"coil-base / coil.request / GetRequest / crossfadeMillis crossfadeMillis val crossfadeMillis: Int Overrides Request.crossfadeMillis","title":"Crossfade millis"},{"location":"api/coil-base/coil.request/-get-request/crossfade-millis/#crossfademillis","text":"val crossfadeMillis: Int Overrides Request.crossfadeMillis","title":"crossfadeMillis"},{"location":"api/coil-base/coil.request/-get-request/data/","text":"coil-base / coil.request / GetRequest / data data val data: Any Overrides Request.data","title":"Data"},{"location":"api/coil-base/coil.request/-get-request/data/#data","text":"val data: Any Overrides Request.data","title":"data"},{"location":"api/coil-base/coil.request/-get-request/disk-cache-policy/","text":"coil-base / coil.request / GetRequest / diskCachePolicy diskCachePolicy val diskCachePolicy: CachePolicy Overrides Request.diskCachePolicy","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-get-request/disk-cache-policy/#diskcachepolicy","text":"val diskCachePolicy: CachePolicy Overrides Request.diskCachePolicy","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-get-request/dispatcher/","text":"coil-base / coil.request / GetRequest / dispatcher dispatcher val dispatcher: CoroutineDispatcher Overrides Request.dispatcher","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-get-request/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher Overrides Request.dispatcher","title":"dispatcher"},{"location":"api/coil-base/coil.request/-get-request/error/","text":"coil-base / coil.request / GetRequest / error error val error: Drawable ? Overrides Request.error","title":"Error"},{"location":"api/coil-base/coil.request/-get-request/error/#error","text":"val error: Drawable ? Overrides Request.error","title":"error"},{"location":"api/coil-base/coil.request/-get-request/invoke/","text":"coil-base / coil.request / GetRequest / invoke invoke inline operator fun invoke(defaults: DefaultRequestOptions , builder: GetRequestBuilder .() - Unit = {}): GetRequest inline operator fun invoke(request: GetRequest , builder: GetRequestBuilder .() - Unit = {}): GetRequest Create a new GetRequest instance.","title":"Invoke"},{"location":"api/coil-base/coil.request/-get-request/invoke/#invoke","text":"inline operator fun invoke(defaults: DefaultRequestOptions , builder: GetRequestBuilder .() - Unit = {}): GetRequest inline operator fun invoke(request: GetRequest , builder: GetRequestBuilder .() - Unit = {}): GetRequest Create a new GetRequest instance.","title":"invoke"},{"location":"api/coil-base/coil.request/-get-request/key-override/","text":"coil-base / coil.request / GetRequest / keyOverride keyOverride val keyOverride: String ? Overrides Request.keyOverride","title":"Key override"},{"location":"api/coil-base/coil.request/-get-request/key-override/#keyoverride","text":"val keyOverride: String ? Overrides Request.keyOverride","title":"keyOverride"},{"location":"api/coil-base/coil.request/-get-request/lifecycle/","text":"coil-base / coil.request / GetRequest / lifecycle lifecycle val lifecycle: Lifecycle ? Overrides Request.lifecycle","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-get-request/lifecycle/#lifecycle","text":"val lifecycle: Lifecycle ? Overrides Request.lifecycle","title":"lifecycle"},{"location":"api/coil-base/coil.request/-get-request/listener/","text":"coil-base / coil.request / GetRequest / listener listener val listener: Request.Listener ? Overrides Request.listener","title":"Listener"},{"location":"api/coil-base/coil.request/-get-request/listener/#listener","text":"val listener: Request.Listener ? Overrides Request.listener","title":"listener"},{"location":"api/coil-base/coil.request/-get-request/memory-cache-policy/","text":"coil-base / coil.request / GetRequest / memoryCachePolicy memoryCachePolicy val memoryCachePolicy: CachePolicy Overrides Request.memoryCachePolicy","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-get-request/memory-cache-policy/#memorycachepolicy","text":"val memoryCachePolicy: CachePolicy Overrides Request.memoryCachePolicy","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-get-request/network-cache-policy/","text":"coil-base / coil.request / GetRequest / networkCachePolicy networkCachePolicy val networkCachePolicy: CachePolicy Overrides Request.networkCachePolicy","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-get-request/network-cache-policy/#networkcachepolicy","text":"val networkCachePolicy: CachePolicy Overrides Request.networkCachePolicy","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-get-request/new-builder/","text":"coil-base / coil.request / GetRequest / newBuilder newBuilder fun newBuilder(): GetRequestBuilder Create a new GetRequestBuilder instance using this as a base.","title":"New builder"},{"location":"api/coil-base/coil.request/-get-request/new-builder/#newbuilder","text":"fun newBuilder(): GetRequestBuilder Create a new GetRequestBuilder instance using this as a base.","title":"newBuilder"},{"location":"api/coil-base/coil.request/-get-request/placeholder/","text":"coil-base / coil.request / GetRequest / placeholder placeholder val placeholder: Drawable ? Overrides Request.placeholder","title":"Placeholder"},{"location":"api/coil-base/coil.request/-get-request/placeholder/#placeholder","text":"val placeholder: Drawable ? Overrides Request.placeholder","title":"placeholder"},{"location":"api/coil-base/coil.request/-get-request/scale/","text":"coil-base / coil.request / GetRequest / scale scale val scale: Scale ? Overrides Request.scale","title":"Scale"},{"location":"api/coil-base/coil.request/-get-request/scale/#scale","text":"val scale: Scale ? Overrides Request.scale","title":"scale"},{"location":"api/coil-base/coil.request/-get-request/size-resolver/","text":"coil-base / coil.request / GetRequest / sizeResolver sizeResolver val sizeResolver: SizeResolver ? Overrides Request.sizeResolver","title":"Size resolver"},{"location":"api/coil-base/coil.request/-get-request/size-resolver/#sizeresolver","text":"val sizeResolver: SizeResolver ? Overrides Request.sizeResolver","title":"sizeResolver"},{"location":"api/coil-base/coil.request/-get-request/target/","text":"coil-base / coil.request / GetRequest / target target val target: Target ? Overrides Request.target","title":"Target"},{"location":"api/coil-base/coil.request/-get-request/target/#target","text":"val target: Target ? Overrides Request.target","title":"target"},{"location":"api/coil-base/coil.request/-get-request/transformations/","text":"coil-base / coil.request / GetRequest / transformations transformations val transformations: List Transformation Overrides Request.transformations","title":"Transformations"},{"location":"api/coil-base/coil.request/-get-request/transformations/#transformations","text":"val transformations: List Transformation Overrides Request.transformations","title":"transformations"},{"location":"api/coil-base/coil.request/-get-request-builder/","text":"coil-base / coil.request / GetRequestBuilder GetRequestBuilder class GetRequestBuilder : RequestBuilder GetRequestBuilder Builder for a GetRequest . Constructors Name Summary init GetRequestBuilder(defaults: DefaultRequestOptions ) GetRequestBuilder(request: GetRequest ) Inherited Properties Name Summary allowHardware var allowHardware: Boolean allowRgb565 var allowRgb565: Boolean bitmapConfig var bitmapConfig: Config colorSpace var colorSpace: ColorSpace ? data var data: Any ? diskCachePolicy var diskCachePolicy: CachePolicy dispatcher var dispatcher: CoroutineDispatcher keyOverride var keyOverride: String ? listener var listener: Request.Listener ? memoryCachePolicy var memoryCachePolicy: CachePolicy networkCachePolicy var networkCachePolicy: CachePolicy scale var scale: Scale ? sizeResolver var sizeResolver: SizeResolver ? transformations var transformations: List Transformation Functions Name Summary build fun build(): GetRequest Create a new GetRequest instance. data fun data(data: Any ): GetRequestBuilder Set the data to load. Inherited Functions Name Summary allowHardware fun allowHardware(enable: Boolean ): T Enable/disable the use of Bitmap.Config.HARDWARE for this request. allowRgb565 fun allowRgb565(enable: Boolean ): T See: ImageLoaderBuilder.allowRgb565 bitmapConfig fun bitmapConfig(bitmapConfig: Config ): T Set the preferred Bitmap.Config . colorSpace fun colorSpace(colorSpace: ColorSpace ): T Set the preferred ColorSpace . diskCachePolicy fun diskCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the disk cache. dispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): T Set the CoroutineDispatcher . key fun key(key: String ?): T Set the cache key for this request. listener fun listener(onStart: (data: Any ) - Unit = {}, onCancel: (data: Any ) - Unit = {}, onError: (data: Any , throwable: Throwable ) - Unit = { _, _ - }, onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Convenience function to create and set the Request.Listener . fun listener(listener: Request.Listener ?): T Set the Request.Listener . memoryCachePolicy fun memoryCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the memory. networkCachePolicy fun networkCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the network. scale fun scale(scale: Scale ): T Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . size fun size(size: Int ): T fun size(width: Int , height: Int ): T fun size(size: Size ): T fun size(resolver: SizeResolver ): T Set the requested width/height. Coil will attempt to load the image into memory with these dimensions. transformations fun transformations(vararg transformations: Transformation ): T Set the list of Transformation s to be applied to this request.","title":"Home"},{"location":"api/coil-base/coil.request/-get-request-builder/#getrequestbuilder","text":"class GetRequestBuilder : RequestBuilder GetRequestBuilder Builder for a GetRequest .","title":"GetRequestBuilder"},{"location":"api/coil-base/coil.request/-get-request-builder/#constructors","text":"Name Summary init GetRequestBuilder(defaults: DefaultRequestOptions ) GetRequestBuilder(request: GetRequest )","title":"Constructors"},{"location":"api/coil-base/coil.request/-get-request-builder/#inherited-properties","text":"Name Summary allowHardware var allowHardware: Boolean allowRgb565 var allowRgb565: Boolean bitmapConfig var bitmapConfig: Config colorSpace var colorSpace: ColorSpace ? data var data: Any ? diskCachePolicy var diskCachePolicy: CachePolicy dispatcher var dispatcher: CoroutineDispatcher keyOverride var keyOverride: String ? listener var listener: Request.Listener ? memoryCachePolicy var memoryCachePolicy: CachePolicy networkCachePolicy var networkCachePolicy: CachePolicy scale var scale: Scale ? sizeResolver var sizeResolver: SizeResolver ? transformations var transformations: List Transformation","title":"Inherited Properties"},{"location":"api/coil-base/coil.request/-get-request-builder/#functions","text":"Name Summary build fun build(): GetRequest Create a new GetRequest instance. data fun data(data: Any ): GetRequestBuilder Set the data to load.","title":"Functions"},{"location":"api/coil-base/coil.request/-get-request-builder/#inherited-functions","text":"Name Summary allowHardware fun allowHardware(enable: Boolean ): T Enable/disable the use of Bitmap.Config.HARDWARE for this request. allowRgb565 fun allowRgb565(enable: Boolean ): T See: ImageLoaderBuilder.allowRgb565 bitmapConfig fun bitmapConfig(bitmapConfig: Config ): T Set the preferred Bitmap.Config . colorSpace fun colorSpace(colorSpace: ColorSpace ): T Set the preferred ColorSpace . diskCachePolicy fun diskCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the disk cache. dispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): T Set the CoroutineDispatcher . key fun key(key: String ?): T Set the cache key for this request. listener fun listener(onStart: (data: Any ) - Unit = {}, onCancel: (data: Any ) - Unit = {}, onError: (data: Any , throwable: Throwable ) - Unit = { _, _ - }, onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Convenience function to create and set the Request.Listener . fun listener(listener: Request.Listener ?): T Set the Request.Listener . memoryCachePolicy fun memoryCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the memory. networkCachePolicy fun networkCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the network. scale fun scale(scale: Scale ): T Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . size fun size(size: Int ): T fun size(width: Int , height: Int ): T fun size(size: Size ): T fun size(resolver: SizeResolver ): T Set the requested width/height. Coil will attempt to load the image into memory with these dimensions. transformations fun transformations(vararg transformations: Transformation ): T Set the list of Transformation s to be applied to this request.","title":"Inherited Functions"},{"location":"api/coil-base/coil.request/-get-request-builder/-init-/","text":"coil-base / coil.request / GetRequestBuilder / init init GetRequestBuilder(defaults: DefaultRequestOptions ) GetRequestBuilder(request: GetRequest )","title":" init "},{"location":"api/coil-base/coil.request/-get-request-builder/-init-/#init","text":"GetRequestBuilder(defaults: DefaultRequestOptions ) GetRequestBuilder(request: GetRequest )","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-get-request-builder/build/","text":"coil-base / coil.request / GetRequestBuilder / build build fun build(): GetRequest Create a new GetRequest instance.","title":"Build"},{"location":"api/coil-base/coil.request/-get-request-builder/build/#build","text":"fun build(): GetRequest Create a new GetRequest instance.","title":"build"},{"location":"api/coil-base/coil.request/-get-request-builder/data/","text":"coil-base / coil.request / GetRequestBuilder / data data fun data(data: Any ): GetRequestBuilder Set the data to load.","title":"Data"},{"location":"api/coil-base/coil.request/-get-request-builder/data/#data","text":"fun data(data: Any ): GetRequestBuilder Set the data to load.","title":"data"},{"location":"api/coil-base/coil.request/-load-request/","text":"coil-base / coil.request / LoadRequest LoadRequest class LoadRequest : Request A value object that represents a load image request. Instances can be created ad hoc: imageLoader.load(context, https://www.example.com/image.jpg ) { crossfade(true) target(imageView) } Or instances can be created separately from the call that executes them: val request = LoadRequest(context, imageLoader.defaults) { data( https://www.example.com/image.jpg ) crossfade(true) target(imageView) } imageLoader.load(request) See Also LoadRequestBuilder ImageLoader.load Properties Name Summary allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config colorSpace val colorSpace: ColorSpace ? context val context: Context crossfadeMillis val crossfadeMillis: Int data val data: Any ? diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? keyOverride val keyOverride: String ? lifecycle val lifecycle: Lifecycle ? listener val listener: Request.Listener ? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy placeholder val placeholder: Drawable ? scale val scale: Scale ? sizeResolver val sizeResolver: SizeResolver ? target val target: Target ? transformations val transformations: List Transformation Functions Name Summary newBuilder fun newBuilder(context: Context = this.context): LoadRequestBuilder Create a new LoadRequestBuilder instance using this as a base. Companion Object Functions Name Summary invoke operator fun invoke(context: Context , defaults: DefaultRequestOptions , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest operator fun invoke(context: Context , request: LoadRequest , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest Create a new LoadRequest instance.","title":"Home"},{"location":"api/coil-base/coil.request/-load-request/#loadrequest","text":"class LoadRequest : Request A value object that represents a load image request. Instances can be created ad hoc: imageLoader.load(context, https://www.example.com/image.jpg ) { crossfade(true) target(imageView) } Or instances can be created separately from the call that executes them: val request = LoadRequest(context, imageLoader.defaults) { data( https://www.example.com/image.jpg ) crossfade(true) target(imageView) } imageLoader.load(request) See Also LoadRequestBuilder ImageLoader.load","title":"LoadRequest"},{"location":"api/coil-base/coil.request/-load-request/#properties","text":"Name Summary allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config colorSpace val colorSpace: ColorSpace ? context val context: Context crossfadeMillis val crossfadeMillis: Int data val data: Any ? diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? keyOverride val keyOverride: String ? lifecycle val lifecycle: Lifecycle ? listener val listener: Request.Listener ? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy placeholder val placeholder: Drawable ? scale val scale: Scale ? sizeResolver val sizeResolver: SizeResolver ? target val target: Target ? transformations val transformations: List Transformation","title":"Properties"},{"location":"api/coil-base/coil.request/-load-request/#functions","text":"Name Summary newBuilder fun newBuilder(context: Context = this.context): LoadRequestBuilder Create a new LoadRequestBuilder instance using this as a base.","title":"Functions"},{"location":"api/coil-base/coil.request/-load-request/#companion-object-functions","text":"Name Summary invoke operator fun invoke(context: Context , defaults: DefaultRequestOptions , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest operator fun invoke(context: Context , request: LoadRequest , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest Create a new LoadRequest instance.","title":"Companion Object Functions"},{"location":"api/coil-base/coil.request/-load-request/allow-hardware/","text":"coil-base / coil.request / LoadRequest / allowHardware allowHardware val allowHardware: Boolean Overrides Request.allowHardware","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-load-request/allow-hardware/#allowhardware","text":"val allowHardware: Boolean Overrides Request.allowHardware","title":"allowHardware"},{"location":"api/coil-base/coil.request/-load-request/allow-rgb565/","text":"coil-base / coil.request / LoadRequest / allowRgb565 allowRgb565 val allowRgb565: Boolean Overrides Request.allowRgb565","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-load-request/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean Overrides Request.allowRgb565","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-load-request/bitmap-config/","text":"coil-base / coil.request / LoadRequest / bitmapConfig bitmapConfig val bitmapConfig: Config Overrides Request.bitmapConfig","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-load-request/bitmap-config/#bitmapconfig","text":"val bitmapConfig: Config Overrides Request.bitmapConfig","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-load-request/color-space/","text":"coil-base / coil.request / LoadRequest / colorSpace colorSpace val colorSpace: ColorSpace ? Overrides Request.colorSpace","title":"Color space"},{"location":"api/coil-base/coil.request/-load-request/color-space/#colorspace","text":"val colorSpace: ColorSpace ? Overrides Request.colorSpace","title":"colorSpace"},{"location":"api/coil-base/coil.request/-load-request/context/","text":"coil-base / coil.request / LoadRequest / context context val context: Context","title":"Context"},{"location":"api/coil-base/coil.request/-load-request/context/#context","text":"val context: Context","title":"context"},{"location":"api/coil-base/coil.request/-load-request/crossfade-millis/","text":"coil-base / coil.request / LoadRequest / crossfadeMillis crossfadeMillis val crossfadeMillis: Int Overrides Request.crossfadeMillis","title":"Crossfade millis"},{"location":"api/coil-base/coil.request/-load-request/crossfade-millis/#crossfademillis","text":"val crossfadeMillis: Int Overrides Request.crossfadeMillis","title":"crossfadeMillis"},{"location":"api/coil-base/coil.request/-load-request/data/","text":"coil-base / coil.request / LoadRequest / data data val data: Any ? Overrides Request.data","title":"Data"},{"location":"api/coil-base/coil.request/-load-request/data/#data","text":"val data: Any ? Overrides Request.data","title":"data"},{"location":"api/coil-base/coil.request/-load-request/disk-cache-policy/","text":"coil-base / coil.request / LoadRequest / diskCachePolicy diskCachePolicy val diskCachePolicy: CachePolicy Overrides Request.diskCachePolicy","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-load-request/disk-cache-policy/#diskcachepolicy","text":"val diskCachePolicy: CachePolicy Overrides Request.diskCachePolicy","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-load-request/dispatcher/","text":"coil-base / coil.request / LoadRequest / dispatcher dispatcher val dispatcher: CoroutineDispatcher Overrides Request.dispatcher","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-load-request/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher Overrides Request.dispatcher","title":"dispatcher"},{"location":"api/coil-base/coil.request/-load-request/error/","text":"coil-base / coil.request / LoadRequest / error error val error: Drawable ? Overrides Request.error","title":"Error"},{"location":"api/coil-base/coil.request/-load-request/error/#error","text":"val error: Drawable ? Overrides Request.error","title":"error"},{"location":"api/coil-base/coil.request/-load-request/invoke/","text":"coil-base / coil.request / LoadRequest / invoke invoke inline operator fun invoke(context: Context , defaults: DefaultRequestOptions , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest inline operator fun invoke(context: Context , request: LoadRequest , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest Create a new LoadRequest instance.","title":"Invoke"},{"location":"api/coil-base/coil.request/-load-request/invoke/#invoke","text":"inline operator fun invoke(context: Context , defaults: DefaultRequestOptions , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest inline operator fun invoke(context: Context , request: LoadRequest , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest Create a new LoadRequest instance.","title":"invoke"},{"location":"api/coil-base/coil.request/-load-request/key-override/","text":"coil-base / coil.request / LoadRequest / keyOverride keyOverride val keyOverride: String ? Overrides Request.keyOverride","title":"Key override"},{"location":"api/coil-base/coil.request/-load-request/key-override/#keyoverride","text":"val keyOverride: String ? Overrides Request.keyOverride","title":"keyOverride"},{"location":"api/coil-base/coil.request/-load-request/lifecycle/","text":"coil-base / coil.request / LoadRequest / lifecycle lifecycle val lifecycle: Lifecycle ? Overrides Request.lifecycle","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-load-request/lifecycle/#lifecycle","text":"val lifecycle: Lifecycle ? Overrides Request.lifecycle","title":"lifecycle"},{"location":"api/coil-base/coil.request/-load-request/listener/","text":"coil-base / coil.request / LoadRequest / listener listener val listener: Request.Listener ? Overrides Request.listener","title":"Listener"},{"location":"api/coil-base/coil.request/-load-request/listener/#listener","text":"val listener: Request.Listener ? Overrides Request.listener","title":"listener"},{"location":"api/coil-base/coil.request/-load-request/memory-cache-policy/","text":"coil-base / coil.request / LoadRequest / memoryCachePolicy memoryCachePolicy val memoryCachePolicy: CachePolicy Overrides Request.memoryCachePolicy","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-load-request/memory-cache-policy/#memorycachepolicy","text":"val memoryCachePolicy: CachePolicy Overrides Request.memoryCachePolicy","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-load-request/network-cache-policy/","text":"coil-base / coil.request / LoadRequest / networkCachePolicy networkCachePolicy val networkCachePolicy: CachePolicy Overrides Request.networkCachePolicy","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-load-request/network-cache-policy/#networkcachepolicy","text":"val networkCachePolicy: CachePolicy Overrides Request.networkCachePolicy","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-load-request/new-builder/","text":"coil-base / coil.request / LoadRequest / newBuilder newBuilder @JvmOverloads fun newBuilder(context: Context = this.context): LoadRequestBuilder Create a new LoadRequestBuilder instance using this as a base.","title":"New builder"},{"location":"api/coil-base/coil.request/-load-request/new-builder/#newbuilder","text":"@JvmOverloads fun newBuilder(context: Context = this.context): LoadRequestBuilder Create a new LoadRequestBuilder instance using this as a base.","title":"newBuilder"},{"location":"api/coil-base/coil.request/-load-request/placeholder/","text":"coil-base / coil.request / LoadRequest / placeholder placeholder val placeholder: Drawable ? Overrides Request.placeholder","title":"Placeholder"},{"location":"api/coil-base/coil.request/-load-request/placeholder/#placeholder","text":"val placeholder: Drawable ? Overrides Request.placeholder","title":"placeholder"},{"location":"api/coil-base/coil.request/-load-request/scale/","text":"coil-base / coil.request / LoadRequest / scale scale val scale: Scale ? Overrides Request.scale","title":"Scale"},{"location":"api/coil-base/coil.request/-load-request/scale/#scale","text":"val scale: Scale ? Overrides Request.scale","title":"scale"},{"location":"api/coil-base/coil.request/-load-request/size-resolver/","text":"coil-base / coil.request / LoadRequest / sizeResolver sizeResolver val sizeResolver: SizeResolver ? Overrides Request.sizeResolver","title":"Size resolver"},{"location":"api/coil-base/coil.request/-load-request/size-resolver/#sizeresolver","text":"val sizeResolver: SizeResolver ? Overrides Request.sizeResolver","title":"sizeResolver"},{"location":"api/coil-base/coil.request/-load-request/target/","text":"coil-base / coil.request / LoadRequest / target target val target: Target ? Overrides Request.target","title":"Target"},{"location":"api/coil-base/coil.request/-load-request/target/#target","text":"val target: Target ? Overrides Request.target","title":"target"},{"location":"api/coil-base/coil.request/-load-request/transformations/","text":"coil-base / coil.request / LoadRequest / transformations transformations val transformations: List Transformation Overrides Request.transformations","title":"Transformations"},{"location":"api/coil-base/coil.request/-load-request/transformations/#transformations","text":"val transformations: List Transformation Overrides Request.transformations","title":"transformations"},{"location":"api/coil-base/coil.request/-load-request-builder/","text":"coil-base / coil.request / LoadRequestBuilder LoadRequestBuilder class LoadRequestBuilder : RequestBuilder LoadRequestBuilder Builder for a LoadRequest . Constructors Name Summary init LoadRequestBuilder(context: Context , defaults: DefaultRequestOptions ) LoadRequestBuilder(context: Context , request: LoadRequest ) Inherited Properties Name Summary allowHardware var allowHardware: Boolean allowRgb565 var allowRgb565: Boolean bitmapConfig var bitmapConfig: Config colorSpace var colorSpace: ColorSpace ? data var data: Any ? diskCachePolicy var diskCachePolicy: CachePolicy dispatcher var dispatcher: CoroutineDispatcher keyOverride var keyOverride: String ? listener var listener: Request.Listener ? memoryCachePolicy var memoryCachePolicy: CachePolicy networkCachePolicy var networkCachePolicy: CachePolicy scale var scale: Scale ? sizeResolver var sizeResolver: SizeResolver ? transformations var transformations: List Transformation Functions Name Summary build fun build(): LoadRequest Create a new LoadRequest instance. crossfade fun crossfade(enable: Boolean ): LoadRequestBuilder fun crossfade(durationMillis: Int ): LoadRequestBuilder See: ImageLoaderBuilder.crossfade data fun data(data: Any ?): LoadRequestBuilder Set the data to load. error fun error(drawableResId: Int ): LoadRequestBuilder fun error(drawable: Drawable ?): LoadRequestBuilder Set an error drawable to use if the request fails. lifecycle fun lifecycle(owner: LifecycleOwner ?): LoadRequestBuilder fun lifecycle(lifecycle: Lifecycle ?): LoadRequestBuilder Set the Lifecycle for this request. placeholder fun placeholder(drawableResId: Int ): LoadRequestBuilder fun placeholder(drawable: Drawable ?): LoadRequestBuilder Set a placeholder drawable to use when the request starts. target fun target(imageView: ImageView ): LoadRequestBuilder Convenience function to set imageView as the Target . fun target(onStart: (placeholder: Drawable ?) - Unit = {}, onError: (error: Drawable ?) - Unit = {}, onSuccess: (result: Drawable ) - Unit = {}): LoadRequestBuilder Convenience function to create and set the Target . fun target(target: Target ?): LoadRequestBuilder Set the Target . If the target is null, this request will preload the image into memory. Inherited Functions Name Summary allowHardware fun allowHardware(enable: Boolean ): T Enable/disable the use of Bitmap.Config.HARDWARE for this request. allowRgb565 fun allowRgb565(enable: Boolean ): T See: ImageLoaderBuilder.allowRgb565 bitmapConfig fun bitmapConfig(bitmapConfig: Config ): T Set the preferred Bitmap.Config . colorSpace fun colorSpace(colorSpace: ColorSpace ): T Set the preferred ColorSpace . diskCachePolicy fun diskCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the disk cache. dispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): T Set the CoroutineDispatcher . key fun key(key: String ?): T Set the cache key for this request. listener fun listener(onStart: (data: Any ) - Unit = {}, onCancel: (data: Any ) - Unit = {}, onError: (data: Any , throwable: Throwable ) - Unit = { _, _ - }, onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Convenience function to create and set the Request.Listener . fun listener(listener: Request.Listener ?): T Set the Request.Listener . memoryCachePolicy fun memoryCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the memory. networkCachePolicy fun networkCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the network. scale fun scale(scale: Scale ): T Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . size fun size(size: Int ): T fun size(width: Int , height: Int ): T fun size(size: Size ): T fun size(resolver: SizeResolver ): T Set the requested width/height. Coil will attempt to load the image into memory with these dimensions. transformations fun transformations(vararg transformations: Transformation ): T Set the list of Transformation s to be applied to this request.","title":"Home"},{"location":"api/coil-base/coil.request/-load-request-builder/#loadrequestbuilder","text":"class LoadRequestBuilder : RequestBuilder LoadRequestBuilder Builder for a LoadRequest .","title":"LoadRequestBuilder"},{"location":"api/coil-base/coil.request/-load-request-builder/#constructors","text":"Name Summary init LoadRequestBuilder(context: Context , defaults: DefaultRequestOptions ) LoadRequestBuilder(context: Context , request: LoadRequest )","title":"Constructors"},{"location":"api/coil-base/coil.request/-load-request-builder/#inherited-properties","text":"Name Summary allowHardware var allowHardware: Boolean allowRgb565 var allowRgb565: Boolean bitmapConfig var bitmapConfig: Config colorSpace var colorSpace: ColorSpace ? data var data: Any ? diskCachePolicy var diskCachePolicy: CachePolicy dispatcher var dispatcher: CoroutineDispatcher keyOverride var keyOverride: String ? listener var listener: Request.Listener ? memoryCachePolicy var memoryCachePolicy: CachePolicy networkCachePolicy var networkCachePolicy: CachePolicy scale var scale: Scale ? sizeResolver var sizeResolver: SizeResolver ? transformations var transformations: List Transformation","title":"Inherited Properties"},{"location":"api/coil-base/coil.request/-load-request-builder/#functions","text":"Name Summary build fun build(): LoadRequest Create a new LoadRequest instance. crossfade fun crossfade(enable: Boolean ): LoadRequestBuilder fun crossfade(durationMillis: Int ): LoadRequestBuilder See: ImageLoaderBuilder.crossfade data fun data(data: Any ?): LoadRequestBuilder Set the data to load. error fun error(drawableResId: Int ): LoadRequestBuilder fun error(drawable: Drawable ?): LoadRequestBuilder Set an error drawable to use if the request fails. lifecycle fun lifecycle(owner: LifecycleOwner ?): LoadRequestBuilder fun lifecycle(lifecycle: Lifecycle ?): LoadRequestBuilder Set the Lifecycle for this request. placeholder fun placeholder(drawableResId: Int ): LoadRequestBuilder fun placeholder(drawable: Drawable ?): LoadRequestBuilder Set a placeholder drawable to use when the request starts. target fun target(imageView: ImageView ): LoadRequestBuilder Convenience function to set imageView as the Target . fun target(onStart: (placeholder: Drawable ?) - Unit = {}, onError: (error: Drawable ?) - Unit = {}, onSuccess: (result: Drawable ) - Unit = {}): LoadRequestBuilder Convenience function to create and set the Target . fun target(target: Target ?): LoadRequestBuilder Set the Target . If the target is null, this request will preload the image into memory.","title":"Functions"},{"location":"api/coil-base/coil.request/-load-request-builder/#inherited-functions","text":"Name Summary allowHardware fun allowHardware(enable: Boolean ): T Enable/disable the use of Bitmap.Config.HARDWARE for this request. allowRgb565 fun allowRgb565(enable: Boolean ): T See: ImageLoaderBuilder.allowRgb565 bitmapConfig fun bitmapConfig(bitmapConfig: Config ): T Set the preferred Bitmap.Config . colorSpace fun colorSpace(colorSpace: ColorSpace ): T Set the preferred ColorSpace . diskCachePolicy fun diskCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the disk cache. dispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): T Set the CoroutineDispatcher . key fun key(key: String ?): T Set the cache key for this request. listener fun listener(onStart: (data: Any ) - Unit = {}, onCancel: (data: Any ) - Unit = {}, onError: (data: Any , throwable: Throwable ) - Unit = { _, _ - }, onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Convenience function to create and set the Request.Listener . fun listener(listener: Request.Listener ?): T Set the Request.Listener . memoryCachePolicy fun memoryCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the memory. networkCachePolicy fun networkCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the network. scale fun scale(scale: Scale ): T Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . size fun size(size: Int ): T fun size(width: Int , height: Int ): T fun size(size: Size ): T fun size(resolver: SizeResolver ): T Set the requested width/height. Coil will attempt to load the image into memory with these dimensions. transformations fun transformations(vararg transformations: Transformation ): T Set the list of Transformation s to be applied to this request.","title":"Inherited Functions"},{"location":"api/coil-base/coil.request/-load-request-builder/-init-/","text":"coil-base / coil.request / LoadRequestBuilder / init init LoadRequestBuilder(context: Context , defaults: DefaultRequestOptions ) LoadRequestBuilder(context: Context , request: LoadRequest )","title":" init "},{"location":"api/coil-base/coil.request/-load-request-builder/-init-/#init","text":"LoadRequestBuilder(context: Context , defaults: DefaultRequestOptions ) LoadRequestBuilder(context: Context , request: LoadRequest )","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-load-request-builder/build/","text":"coil-base / coil.request / LoadRequestBuilder / build build fun build(): LoadRequest Create a new LoadRequest instance.","title":"Build"},{"location":"api/coil-base/coil.request/-load-request-builder/build/#build","text":"fun build(): LoadRequest Create a new LoadRequest instance.","title":"build"},{"location":"api/coil-base/coil.request/-load-request-builder/crossfade/","text":"coil-base / coil.request / LoadRequestBuilder / crossfade crossfade fun crossfade(enable: Boolean ): LoadRequestBuilder fun crossfade(durationMillis: Int ): LoadRequestBuilder See: ImageLoaderBuilder.crossfade","title":"Crossfade"},{"location":"api/coil-base/coil.request/-load-request-builder/crossfade/#crossfade","text":"fun crossfade(enable: Boolean ): LoadRequestBuilder fun crossfade(durationMillis: Int ): LoadRequestBuilder See: ImageLoaderBuilder.crossfade","title":"crossfade"},{"location":"api/coil-base/coil.request/-load-request-builder/data/","text":"coil-base / coil.request / LoadRequestBuilder / data data fun data(data: Any ?): LoadRequestBuilder Set the data to load.","title":"Data"},{"location":"api/coil-base/coil.request/-load-request-builder/data/#data","text":"fun data(data: Any ?): LoadRequestBuilder Set the data to load.","title":"data"},{"location":"api/coil-base/coil.request/-load-request-builder/error/","text":"coil-base / coil.request / LoadRequestBuilder / error error fun error(@DrawableRes drawableResId: Int ): LoadRequestBuilder fun error(drawable: Drawable ?): LoadRequestBuilder Set an error drawable to use if the request fails.","title":"Error"},{"location":"api/coil-base/coil.request/-load-request-builder/error/#error","text":"fun error(@DrawableRes drawableResId: Int ): LoadRequestBuilder fun error(drawable: Drawable ?): LoadRequestBuilder Set an error drawable to use if the request fails.","title":"error"},{"location":"api/coil-base/coil.request/-load-request-builder/lifecycle/","text":"coil-base / coil.request / LoadRequestBuilder / lifecycle lifecycle fun lifecycle(owner: LifecycleOwner ?): LoadRequestBuilder Set the Lifecycle for this request. fun lifecycle(lifecycle: Lifecycle ?): LoadRequestBuilder Set the Lifecycle for this request. Requests are queued while the lifecycle is not at least Lifecycle.State.STARTED . Requests are cancelled when the lifecycle reaches Lifecycle.State.DESTROYED . If this isn't set, Coil will attempt to find the lifecycle for this request using the logic in RequestService.lifecycleInfo .","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-load-request-builder/lifecycle/#lifecycle","text":"fun lifecycle(owner: LifecycleOwner ?): LoadRequestBuilder Set the Lifecycle for this request. fun lifecycle(lifecycle: Lifecycle ?): LoadRequestBuilder Set the Lifecycle for this request. Requests are queued while the lifecycle is not at least Lifecycle.State.STARTED . Requests are cancelled when the lifecycle reaches Lifecycle.State.DESTROYED . If this isn't set, Coil will attempt to find the lifecycle for this request using the logic in RequestService.lifecycleInfo .","title":"lifecycle"},{"location":"api/coil-base/coil.request/-load-request-builder/placeholder/","text":"coil-base / coil.request / LoadRequestBuilder / placeholder placeholder fun placeholder(@DrawableRes drawableResId: Int ): LoadRequestBuilder fun placeholder(drawable: Drawable ?): LoadRequestBuilder Set a placeholder drawable to use when the request starts.","title":"Placeholder"},{"location":"api/coil-base/coil.request/-load-request-builder/placeholder/#placeholder","text":"fun placeholder(@DrawableRes drawableResId: Int ): LoadRequestBuilder fun placeholder(drawable: Drawable ?): LoadRequestBuilder Set a placeholder drawable to use when the request starts.","title":"placeholder"},{"location":"api/coil-base/coil.request/-load-request-builder/target/","text":"coil-base / coil.request / LoadRequestBuilder / target target fun target(imageView: ImageView ): LoadRequestBuilder Convenience function to set imageView as the Target . inline fun target(crossinline onStart: (placeholder: Drawable ?) - Unit = {}, crossinline onError: (error: Drawable ?) - Unit = {}, crossinline onSuccess: (result: Drawable ) - Unit = {}): LoadRequestBuilder Convenience function to create and set the Target . fun target(target: Target ?): LoadRequestBuilder Set the Target . If the target is null, this request will preload the image into memory.","title":"Target"},{"location":"api/coil-base/coil.request/-load-request-builder/target/#target","text":"fun target(imageView: ImageView ): LoadRequestBuilder Convenience function to set imageView as the Target . inline fun target(crossinline onStart: (placeholder: Drawable ?) - Unit = {}, crossinline onError: (error: Drawable ?) - Unit = {}, crossinline onSuccess: (result: Drawable ) - Unit = {}): LoadRequestBuilder Convenience function to create and set the Target . fun target(target: Target ?): LoadRequestBuilder Set the Target . If the target is null, this request will preload the image into memory.","title":"target"},{"location":"api/coil-base/coil.request/-request/","text":"coil-base / coil.request / Request Request sealed class Request A value object that represents an image request. See Also LoadRequest GetRequest Types Name Summary Listener interface Listener A set of callbacks for a Request . All callbacks are guaranteed to be called on the main thread. Properties Name Summary allowHardware abstract val allowHardware: Boolean allowRgb565 abstract val allowRgb565: Boolean bitmapConfig abstract val bitmapConfig: Config colorSpace abstract val colorSpace: ColorSpace ? crossfadeMillis abstract val crossfadeMillis: Int data abstract val data: Any ? diskCachePolicy abstract val diskCachePolicy: CachePolicy dispatcher abstract val dispatcher: CoroutineDispatcher error abstract val error: Drawable ? keyOverride abstract val keyOverride: String ? lifecycle abstract val lifecycle: Lifecycle ? listener abstract val listener: Request.Listener ? memoryCachePolicy abstract val memoryCachePolicy: CachePolicy networkCachePolicy abstract val networkCachePolicy: CachePolicy placeholder abstract val placeholder: Drawable ? scale abstract val scale: Scale ? sizeResolver abstract val sizeResolver: SizeResolver ? target abstract val target: Target ? transformations abstract val transformations: List Transformation Inheritors Name Summary GetRequest class GetRequest : Request A value object that represents a get image request. LoadRequest class LoadRequest : Request A value object that represents a load image request.","title":"Home"},{"location":"api/coil-base/coil.request/-request/#request","text":"sealed class Request A value object that represents an image request. See Also LoadRequest GetRequest","title":"Request"},{"location":"api/coil-base/coil.request/-request/#types","text":"Name Summary Listener interface Listener A set of callbacks for a Request . All callbacks are guaranteed to be called on the main thread.","title":"Types"},{"location":"api/coil-base/coil.request/-request/#properties","text":"Name Summary allowHardware abstract val allowHardware: Boolean allowRgb565 abstract val allowRgb565: Boolean bitmapConfig abstract val bitmapConfig: Config colorSpace abstract val colorSpace: ColorSpace ? crossfadeMillis abstract val crossfadeMillis: Int data abstract val data: Any ? diskCachePolicy abstract val diskCachePolicy: CachePolicy dispatcher abstract val dispatcher: CoroutineDispatcher error abstract val error: Drawable ? keyOverride abstract val keyOverride: String ? lifecycle abstract val lifecycle: Lifecycle ? listener abstract val listener: Request.Listener ? memoryCachePolicy abstract val memoryCachePolicy: CachePolicy networkCachePolicy abstract val networkCachePolicy: CachePolicy placeholder abstract val placeholder: Drawable ? scale abstract val scale: Scale ? sizeResolver abstract val sizeResolver: SizeResolver ? target abstract val target: Target ? transformations abstract val transformations: List Transformation","title":"Properties"},{"location":"api/coil-base/coil.request/-request/#inheritors","text":"Name Summary GetRequest class GetRequest : Request A value object that represents a get image request. LoadRequest class LoadRequest : Request A value object that represents a load image request.","title":"Inheritors"},{"location":"api/coil-base/coil.request/-request/allow-hardware/","text":"coil-base / coil.request / Request / allowHardware allowHardware abstract val allowHardware: Boolean","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-request/allow-hardware/#allowhardware","text":"abstract val allowHardware: Boolean","title":"allowHardware"},{"location":"api/coil-base/coil.request/-request/allow-rgb565/","text":"coil-base / coil.request / Request / allowRgb565 allowRgb565 abstract val allowRgb565: Boolean","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-request/allow-rgb565/#allowrgb565","text":"abstract val allowRgb565: Boolean","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-request/bitmap-config/","text":"coil-base / coil.request / Request / bitmapConfig bitmapConfig abstract val bitmapConfig: Config","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-request/bitmap-config/#bitmapconfig","text":"abstract val bitmapConfig: Config","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-request/color-space/","text":"coil-base / coil.request / Request / colorSpace colorSpace abstract val colorSpace: ColorSpace ?","title":"Color space"},{"location":"api/coil-base/coil.request/-request/color-space/#colorspace","text":"abstract val colorSpace: ColorSpace ?","title":"colorSpace"},{"location":"api/coil-base/coil.request/-request/crossfade-millis/","text":"coil-base / coil.request / Request / crossfadeMillis crossfadeMillis abstract val crossfadeMillis: Int","title":"Crossfade millis"},{"location":"api/coil-base/coil.request/-request/crossfade-millis/#crossfademillis","text":"abstract val crossfadeMillis: Int","title":"crossfadeMillis"},{"location":"api/coil-base/coil.request/-request/data/","text":"coil-base / coil.request / Request / data data abstract val data: Any ?","title":"Data"},{"location":"api/coil-base/coil.request/-request/data/#data","text":"abstract val data: Any ?","title":"data"},{"location":"api/coil-base/coil.request/-request/disk-cache-policy/","text":"coil-base / coil.request / Request / diskCachePolicy diskCachePolicy abstract val diskCachePolicy: CachePolicy","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-request/disk-cache-policy/#diskcachepolicy","text":"abstract val diskCachePolicy: CachePolicy","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-request/dispatcher/","text":"coil-base / coil.request / Request / dispatcher dispatcher abstract val dispatcher: CoroutineDispatcher","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-request/dispatcher/#dispatcher","text":"abstract val dispatcher: CoroutineDispatcher","title":"dispatcher"},{"location":"api/coil-base/coil.request/-request/error/","text":"coil-base / coil.request / Request / error error abstract val error: Drawable ?","title":"Error"},{"location":"api/coil-base/coil.request/-request/error/#error","text":"abstract val error: Drawable ?","title":"error"},{"location":"api/coil-base/coil.request/-request/key-override/","text":"coil-base / coil.request / Request / keyOverride keyOverride abstract val keyOverride: String ?","title":"Key override"},{"location":"api/coil-base/coil.request/-request/key-override/#keyoverride","text":"abstract val keyOverride: String ?","title":"keyOverride"},{"location":"api/coil-base/coil.request/-request/lifecycle/","text":"coil-base / coil.request / Request / lifecycle lifecycle abstract val lifecycle: Lifecycle ?","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-request/lifecycle/#lifecycle","text":"abstract val lifecycle: Lifecycle ?","title":"lifecycle"},{"location":"api/coil-base/coil.request/-request/listener/","text":"coil-base / coil.request / Request / listener listener abstract val listener: Request.Listener ?","title":"Listener"},{"location":"api/coil-base/coil.request/-request/listener/#listener","text":"abstract val listener: Request.Listener ?","title":"listener"},{"location":"api/coil-base/coil.request/-request/memory-cache-policy/","text":"coil-base / coil.request / Request / memoryCachePolicy memoryCachePolicy abstract val memoryCachePolicy: CachePolicy","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-request/memory-cache-policy/#memorycachepolicy","text":"abstract val memoryCachePolicy: CachePolicy","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-request/network-cache-policy/","text":"coil-base / coil.request / Request / networkCachePolicy networkCachePolicy abstract val networkCachePolicy: CachePolicy","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-request/network-cache-policy/#networkcachepolicy","text":"abstract val networkCachePolicy: CachePolicy","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-request/placeholder/","text":"coil-base / coil.request / Request / placeholder placeholder abstract val placeholder: Drawable ?","title":"Placeholder"},{"location":"api/coil-base/coil.request/-request/placeholder/#placeholder","text":"abstract val placeholder: Drawable ?","title":"placeholder"},{"location":"api/coil-base/coil.request/-request/scale/","text":"coil-base / coil.request / Request / scale scale abstract val scale: Scale ?","title":"Scale"},{"location":"api/coil-base/coil.request/-request/scale/#scale","text":"abstract val scale: Scale ?","title":"scale"},{"location":"api/coil-base/coil.request/-request/size-resolver/","text":"coil-base / coil.request / Request / sizeResolver sizeResolver abstract val sizeResolver: SizeResolver ?","title":"Size resolver"},{"location":"api/coil-base/coil.request/-request/size-resolver/#sizeresolver","text":"abstract val sizeResolver: SizeResolver ?","title":"sizeResolver"},{"location":"api/coil-base/coil.request/-request/target/","text":"coil-base / coil.request / Request / target target abstract val target: Target ?","title":"Target"},{"location":"api/coil-base/coil.request/-request/target/#target","text":"abstract val target: Target ?","title":"target"},{"location":"api/coil-base/coil.request/-request/transformations/","text":"coil-base / coil.request / Request / transformations transformations abstract val transformations: List Transformation","title":"Transformations"},{"location":"api/coil-base/coil.request/-request/transformations/#transformations","text":"abstract val transformations: List Transformation","title":"transformations"},{"location":"api/coil-base/coil.request/-request/-listener/","text":"coil-base / coil.request / Request / Listener Listener interface Listener A set of callbacks for a Request . All callbacks are guaranteed to be called on the main thread. Functions Name Summary onCancel open fun onCancel(data: Any ): Unit Called when the request is cancelled. onError open fun onError(data: Any , throwable: Throwable ): Unit Called when the request fails to load the image. onStart open fun onStart(data: Any ): Unit Called when the request is dispatched and starts loading the image. onSuccess open fun onSuccess(data: Any , source: DataSource ): Unit Called when the request successfully loads the image.","title":"Home"},{"location":"api/coil-base/coil.request/-request/-listener/#listener","text":"interface Listener A set of callbacks for a Request . All callbacks are guaranteed to be called on the main thread.","title":"Listener"},{"location":"api/coil-base/coil.request/-request/-listener/#functions","text":"Name Summary onCancel open fun onCancel(data: Any ): Unit Called when the request is cancelled. onError open fun onError(data: Any , throwable: Throwable ): Unit Called when the request fails to load the image. onStart open fun onStart(data: Any ): Unit Called when the request is dispatched and starts loading the image. onSuccess open fun onSuccess(data: Any , source: DataSource ): Unit Called when the request successfully loads the image.","title":"Functions"},{"location":"api/coil-base/coil.request/-request/-listener/on-cancel/","text":"coil-base / coil.request / Request / Listener / onCancel onCancel open fun onCancel(data: Any ): Unit Called when the request is cancelled.","title":"On cancel"},{"location":"api/coil-base/coil.request/-request/-listener/on-cancel/#oncancel","text":"open fun onCancel(data: Any ): Unit Called when the request is cancelled.","title":"onCancel"},{"location":"api/coil-base/coil.request/-request/-listener/on-error/","text":"coil-base / coil.request / Request / Listener / onError onError open fun onError(data: Any , throwable: Throwable ): Unit Called when the request fails to load the image.","title":"On error"},{"location":"api/coil-base/coil.request/-request/-listener/on-error/#onerror","text":"open fun onError(data: Any , throwable: Throwable ): Unit Called when the request fails to load the image.","title":"onError"},{"location":"api/coil-base/coil.request/-request/-listener/on-start/","text":"coil-base / coil.request / Request / Listener / onStart onStart open fun onStart(data: Any ): Unit Called when the request is dispatched and starts loading the image.","title":"On start"},{"location":"api/coil-base/coil.request/-request/-listener/on-start/#onstart","text":"open fun onStart(data: Any ): Unit Called when the request is dispatched and starts loading the image.","title":"onStart"},{"location":"api/coil-base/coil.request/-request/-listener/on-success/","text":"coil-base / coil.request / Request / Listener / onSuccess onSuccess open fun onSuccess(data: Any , source: DataSource ): Unit Called when the request successfully loads the image.","title":"On success"},{"location":"api/coil-base/coil.request/-request/-listener/on-success/#onsuccess","text":"open fun onSuccess(data: Any , source: DataSource ): Unit Called when the request successfully loads the image.","title":"onSuccess"},{"location":"api/coil-base/coil.request/-request-builder/","text":"coil-base / coil.request / RequestBuilder RequestBuilder sealed class RequestBuilder T : RequestBuilder T Base class for LoadRequestBuilder and GetRequestBuilder . Properties Name Summary allowHardware var allowHardware: Boolean allowRgb565 var allowRgb565: Boolean bitmapConfig var bitmapConfig: Config colorSpace var colorSpace: ColorSpace ? data var data: Any ? diskCachePolicy var diskCachePolicy: CachePolicy dispatcher var dispatcher: CoroutineDispatcher keyOverride var keyOverride: String ? listener var listener: Request.Listener ? memoryCachePolicy var memoryCachePolicy: CachePolicy networkCachePolicy var networkCachePolicy: CachePolicy scale var scale: Scale ? sizeResolver var sizeResolver: SizeResolver ? transformations var transformations: List Transformation Functions Name Summary allowHardware fun allowHardware(enable: Boolean ): T Enable/disable the use of Bitmap.Config.HARDWARE for this request. allowRgb565 fun allowRgb565(enable: Boolean ): T See: ImageLoaderBuilder.allowRgb565 bitmapConfig fun bitmapConfig(bitmapConfig: Config ): T Set the preferred Bitmap.Config . colorSpace fun colorSpace(colorSpace: ColorSpace ): T Set the preferred ColorSpace . diskCachePolicy fun diskCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the disk cache. dispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): T Set the CoroutineDispatcher . key fun key(key: String ?): T Set the cache key for this request. listener fun listener(onStart: (data: Any ) - Unit = {}, onCancel: (data: Any ) - Unit = {}, onError: (data: Any , throwable: Throwable ) - Unit = { _, _ - }, onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Convenience function to create and set the Request.Listener . fun listener(listener: Request.Listener ?): T Set the Request.Listener . memoryCachePolicy fun memoryCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the memory. networkCachePolicy fun networkCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the network. scale fun scale(scale: Scale ): T Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . size fun size(size: Int ): T fun size(width: Int , height: Int ): T fun size(size: Size ): T fun size(resolver: SizeResolver ): T Set the requested width/height. Coil will attempt to load the image into memory with these dimensions. transformations fun transformations(vararg transformations: Transformation ): T Set the list of Transformation s to be applied to this request. Inheritors Name Summary GetRequestBuilder class GetRequestBuilder : RequestBuilder GetRequestBuilder Builder for a GetRequest . LoadRequestBuilder class LoadRequestBuilder : RequestBuilder LoadRequestBuilder Builder for a LoadRequest .","title":"Home"},{"location":"api/coil-base/coil.request/-request-builder/#requestbuilder","text":"sealed class RequestBuilder T : RequestBuilder T Base class for LoadRequestBuilder and GetRequestBuilder .","title":"RequestBuilder"},{"location":"api/coil-base/coil.request/-request-builder/#properties","text":"Name Summary allowHardware var allowHardware: Boolean allowRgb565 var allowRgb565: Boolean bitmapConfig var bitmapConfig: Config colorSpace var colorSpace: ColorSpace ? data var data: Any ? diskCachePolicy var diskCachePolicy: CachePolicy dispatcher var dispatcher: CoroutineDispatcher keyOverride var keyOverride: String ? listener var listener: Request.Listener ? memoryCachePolicy var memoryCachePolicy: CachePolicy networkCachePolicy var networkCachePolicy: CachePolicy scale var scale: Scale ? sizeResolver var sizeResolver: SizeResolver ? transformations var transformations: List Transformation","title":"Properties"},{"location":"api/coil-base/coil.request/-request-builder/#functions","text":"Name Summary allowHardware fun allowHardware(enable: Boolean ): T Enable/disable the use of Bitmap.Config.HARDWARE for this request. allowRgb565 fun allowRgb565(enable: Boolean ): T See: ImageLoaderBuilder.allowRgb565 bitmapConfig fun bitmapConfig(bitmapConfig: Config ): T Set the preferred Bitmap.Config . colorSpace fun colorSpace(colorSpace: ColorSpace ): T Set the preferred ColorSpace . diskCachePolicy fun diskCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the disk cache. dispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): T Set the CoroutineDispatcher . key fun key(key: String ?): T Set the cache key for this request. listener fun listener(onStart: (data: Any ) - Unit = {}, onCancel: (data: Any ) - Unit = {}, onError: (data: Any , throwable: Throwable ) - Unit = { _, _ - }, onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Convenience function to create and set the Request.Listener . fun listener(listener: Request.Listener ?): T Set the Request.Listener . memoryCachePolicy fun memoryCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the memory. networkCachePolicy fun networkCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the network. scale fun scale(scale: Scale ): T Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . size fun size(size: Int ): T fun size(width: Int , height: Int ): T fun size(size: Size ): T fun size(resolver: SizeResolver ): T Set the requested width/height. Coil will attempt to load the image into memory with these dimensions. transformations fun transformations(vararg transformations: Transformation ): T Set the list of Transformation s to be applied to this request.","title":"Functions"},{"location":"api/coil-base/coil.request/-request-builder/#inheritors","text":"Name Summary GetRequestBuilder class GetRequestBuilder : RequestBuilder GetRequestBuilder Builder for a GetRequest . LoadRequestBuilder class LoadRequestBuilder : RequestBuilder LoadRequestBuilder Builder for a LoadRequest .","title":"Inheritors"},{"location":"api/coil-base/coil.request/-request-builder/allow-hardware/","text":"coil-base / coil.request / RequestBuilder / allowHardware allowHardware protected var allowHardware: Boolean fun allowHardware(enable: Boolean ): T Enable/disable the use of Bitmap.Config.HARDWARE for this request. If false, any use of Bitmap.Config.HARDWARE will be treated as Bitmap.Config.ARGB_8888 . This is useful for shared element transitions, which do not support hardware Bitmaps.","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-request-builder/allow-hardware/#allowhardware","text":"protected var allowHardware: Boolean fun allowHardware(enable: Boolean ): T Enable/disable the use of Bitmap.Config.HARDWARE for this request. If false, any use of Bitmap.Config.HARDWARE will be treated as Bitmap.Config.ARGB_8888 . This is useful for shared element transitions, which do not support hardware Bitmaps.","title":"allowHardware"},{"location":"api/coil-base/coil.request/-request-builder/allow-rgb565/","text":"coil-base / coil.request / RequestBuilder / allowRgb565 allowRgb565 protected var allowRgb565: Boolean fun allowRgb565(enable: Boolean ): T See: ImageLoaderBuilder.allowRgb565","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-request-builder/allow-rgb565/#allowrgb565","text":"protected var allowRgb565: Boolean fun allowRgb565(enable: Boolean ): T See: ImageLoaderBuilder.allowRgb565","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-request-builder/bitmap-config/","text":"coil-base / coil.request / RequestBuilder / bitmapConfig bitmapConfig protected var bitmapConfig: Config fun bitmapConfig(bitmapConfig: Config ): T Set the preferred Bitmap.Config . This is not guaranteed and a different config may be used in some situations.","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-request-builder/bitmap-config/#bitmapconfig","text":"protected var bitmapConfig: Config fun bitmapConfig(bitmapConfig: Config ): T Set the preferred Bitmap.Config . This is not guaranteed and a different config may be used in some situations.","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-request-builder/color-space/","text":"coil-base / coil.request / RequestBuilder / colorSpace colorSpace protected var colorSpace: ColorSpace ?``fun colorSpace(colorSpace: ColorSpace ): T Set the preferred ColorSpace .","title":"Color space"},{"location":"api/coil-base/coil.request/-request-builder/color-space/#colorspace","text":"protected var colorSpace: ColorSpace ?``fun colorSpace(colorSpace: ColorSpace ): T Set the preferred ColorSpace .","title":"colorSpace"},{"location":"api/coil-base/coil.request/-request-builder/data/","text":"coil-base / coil.request / RequestBuilder / data data protected var data: Any ?","title":"Data"},{"location":"api/coil-base/coil.request/-request-builder/data/#data","text":"protected var data: Any ?","title":"data"},{"location":"api/coil-base/coil.request/-request-builder/disk-cache-policy/","text":"coil-base / coil.request / RequestBuilder / diskCachePolicy diskCachePolicy protected var diskCachePolicy: CachePolicy fun diskCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the disk cache.","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-request-builder/disk-cache-policy/#diskcachepolicy","text":"protected var diskCachePolicy: CachePolicy fun diskCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the disk cache.","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-request-builder/dispatcher/","text":"coil-base / coil.request / RequestBuilder / dispatcher dispatcher protected var dispatcher: CoroutineDispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): T Set the CoroutineDispatcher .","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-request-builder/dispatcher/#dispatcher","text":"protected var dispatcher: CoroutineDispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): T Set the CoroutineDispatcher .","title":"dispatcher"},{"location":"api/coil-base/coil.request/-request-builder/key-override/","text":"coil-base / coil.request / RequestBuilder / keyOverride keyOverride protected var keyOverride: String ?","title":"Key override"},{"location":"api/coil-base/coil.request/-request-builder/key-override/#keyoverride","text":"protected var keyOverride: String ?","title":"keyOverride"},{"location":"api/coil-base/coil.request/-request-builder/key/","text":"coil-base / coil.request / RequestBuilder / key key fun key(key: String ?): T Set the cache key for this request. By default, the cache key is computed by the Fetcher and any Transformation s.","title":"Key"},{"location":"api/coil-base/coil.request/-request-builder/key/#key","text":"fun key(key: String ?): T Set the cache key for this request. By default, the cache key is computed by the Fetcher and any Transformation s.","title":"key"},{"location":"api/coil-base/coil.request/-request-builder/listener/","text":"coil-base / coil.request / RequestBuilder / listener listener protected var listener: Request.Listener ?``inline fun listener(crossinline onStart: (data: Any ) - Unit = {}, crossinline onCancel: (data: Any ) - Unit = {}, crossinline onError: (data: Any , throwable: Throwable ) - Unit = { _, _ - }, crossinline onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Convenience function to create and set the Request.Listener . fun listener(listener: Request.Listener ?): T Set the Request.Listener .","title":"Listener"},{"location":"api/coil-base/coil.request/-request-builder/listener/#listener","text":"protected var listener: Request.Listener ?``inline fun listener(crossinline onStart: (data: Any ) - Unit = {}, crossinline onCancel: (data: Any ) - Unit = {}, crossinline onError: (data: Any , throwable: Throwable ) - Unit = { _, _ - }, crossinline onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Convenience function to create and set the Request.Listener . fun listener(listener: Request.Listener ?): T Set the Request.Listener .","title":"listener"},{"location":"api/coil-base/coil.request/-request-builder/memory-cache-policy/","text":"coil-base / coil.request / RequestBuilder / memoryCachePolicy memoryCachePolicy protected var memoryCachePolicy: CachePolicy fun memoryCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the memory.","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-request-builder/memory-cache-policy/#memorycachepolicy","text":"protected var memoryCachePolicy: CachePolicy fun memoryCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the memory.","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-request-builder/network-cache-policy/","text":"coil-base / coil.request / RequestBuilder / networkCachePolicy networkCachePolicy protected var networkCachePolicy: CachePolicy fun networkCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the network. NOTE: Disabling writes has no effect.","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-request-builder/network-cache-policy/#networkcachepolicy","text":"protected var networkCachePolicy: CachePolicy fun networkCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the network. NOTE: Disabling writes has no effect.","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-request-builder/scale/","text":"coil-base / coil.request / RequestBuilder / scale scale protected var scale: Scale ?``fun scale(scale: Scale ): T Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . If this isn't set, Coil will attempt to determine the scale of the request using the logic in RequestService.scale . NOTE: If scale is not set, it is automatically computed for ImageView targets.","title":"Scale"},{"location":"api/coil-base/coil.request/-request-builder/scale/#scale","text":"protected var scale: Scale ?``fun scale(scale: Scale ): T Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . If this isn't set, Coil will attempt to determine the scale of the request using the logic in RequestService.scale . NOTE: If scale is not set, it is automatically computed for ImageView targets.","title":"scale"},{"location":"api/coil-base/coil.request/-request-builder/size-resolver/","text":"coil-base / coil.request / RequestBuilder / sizeResolver sizeResolver protected var sizeResolver: SizeResolver ?","title":"Size resolver"},{"location":"api/coil-base/coil.request/-request-builder/size-resolver/#sizeresolver","text":"protected var sizeResolver: SizeResolver ?","title":"sizeResolver"},{"location":"api/coil-base/coil.request/-request-builder/size/","text":"coil-base / coil.request / RequestBuilder / size size fun size(@Px size: Int ): T fun size(@Px width: Int , @Px height: Int ): T fun size(size: Size ): T Set the requested width/height. Coil will attempt to load the image into memory with these dimensions. fun size(resolver: SizeResolver ): T Set the requested width/height. Coil will attempt to load the image into memory with these dimensions. If this isn't set, Coil will attempt to determine the size of the request using the logic in RequestService.sizeResolver .","title":"Size"},{"location":"api/coil-base/coil.request/-request-builder/size/#size","text":"fun size(@Px size: Int ): T fun size(@Px width: Int , @Px height: Int ): T fun size(size: Size ): T Set the requested width/height. Coil will attempt to load the image into memory with these dimensions. fun size(resolver: SizeResolver ): T Set the requested width/height. Coil will attempt to load the image into memory with these dimensions. If this isn't set, Coil will attempt to determine the size of the request using the logic in RequestService.sizeResolver .","title":"size"},{"location":"api/coil-base/coil.request/-request-builder/transformations/","text":"coil-base / coil.request / RequestBuilder / transformations transformations protected var transformations: List Transformation ``fun transformations(vararg transformations: Transformation ): T Set the list of Transformation s to be applied to this request.","title":"Transformations"},{"location":"api/coil-base/coil.request/-request-builder/transformations/#transformations","text":"protected var transformations: List Transformation ``fun transformations(vararg transformations: Transformation ): T Set the list of Transformation s to be applied to this request.","title":"transformations"},{"location":"api/coil-base/coil.request/-request-disposable/","text":"coil-base / coil.request / RequestDisposable RequestDisposable interface RequestDisposable Represents the work of an image request. Functions Name Summary dispose abstract fun dispose(): Unit Cancel any in progress work and free any resources associated with this request. This method is idempotent. isDisposed abstract fun isDisposed(): Boolean Return true if request is not active, completed, or cancelling.","title":"Home"},{"location":"api/coil-base/coil.request/-request-disposable/#requestdisposable","text":"interface RequestDisposable Represents the work of an image request.","title":"RequestDisposable"},{"location":"api/coil-base/coil.request/-request-disposable/#functions","text":"Name Summary dispose abstract fun dispose(): Unit Cancel any in progress work and free any resources associated with this request. This method is idempotent. isDisposed abstract fun isDisposed(): Boolean Return true if request is not active, completed, or cancelling.","title":"Functions"},{"location":"api/coil-base/coil.request/-request-disposable/dispose/","text":"coil-base / coil.request / RequestDisposable / dispose dispose abstract fun dispose(): Unit Cancel any in progress work and free any resources associated with this request. This method is idempotent.","title":"Dispose"},{"location":"api/coil-base/coil.request/-request-disposable/dispose/#dispose","text":"abstract fun dispose(): Unit Cancel any in progress work and free any resources associated with this request. This method is idempotent.","title":"dispose"},{"location":"api/coil-base/coil.request/-request-disposable/is-disposed/","text":"coil-base / coil.request / RequestDisposable / isDisposed isDisposed abstract fun isDisposed(): Boolean Return true if request is not active, completed, or cancelling.","title":"Is disposed"},{"location":"api/coil-base/coil.request/-request-disposable/is-disposed/#isdisposed","text":"abstract fun isDisposed(): Boolean Return true if request is not active, completed, or cancelling.","title":"isDisposed"},{"location":"api/coil-base/coil.size/","text":"coil-base / coil.size Package coil.size Types Name Summary DisplaySizeResolver class DisplaySizeResolver : SizeResolver A SizeResolver that constrains a Target to the size of the display. OriginalSize object OriginalSize : Size Represents the width and height of the source image. PixelSize data class PixelSize : Size A non-zero width and height in pixels. Scale enum class Scale Represents a scaling policy. Size sealed class Size Represents the target size of an image request. SizeResolver interface SizeResolver An interface for measuring the target size for an image request. ViewSizeResolver interface ViewSizeResolver T : View : SizeResolver A SizeResolver that measures the size of a View .","title":"Home"},{"location":"api/coil-base/coil.size/#package-coilsize","text":"","title":"Package coil.size"},{"location":"api/coil-base/coil.size/#types","text":"Name Summary DisplaySizeResolver class DisplaySizeResolver : SizeResolver A SizeResolver that constrains a Target to the size of the display. OriginalSize object OriginalSize : Size Represents the width and height of the source image. PixelSize data class PixelSize : Size A non-zero width and height in pixels. Scale enum class Scale Represents a scaling policy. Size sealed class Size Represents the target size of an image request. SizeResolver interface SizeResolver An interface for measuring the target size for an image request. ViewSizeResolver interface ViewSizeResolver T : View : SizeResolver A SizeResolver that measures the size of a View .","title":"Types"},{"location":"api/coil-base/coil.size/-original-size/","text":"coil-base / coil.size / OriginalSize OriginalSize object OriginalSize : Size Represents the width and height of the source image.","title":" original size"},{"location":"api/coil-base/coil.size/-original-size/#originalsize","text":"object OriginalSize : Size Represents the width and height of the source image.","title":"OriginalSize"},{"location":"api/coil-base/coil.size/-size/","text":"coil-base / coil.size / Size Size sealed class Size Represents the target size of an image request. See Also RequestBuilder.size SizeResolver.size Inheritors Name Summary OriginalSize object OriginalSize : Size Represents the width and height of the source image. PixelSize data class PixelSize : Size A non-zero width and height in pixels.","title":" size"},{"location":"api/coil-base/coil.size/-size/#size","text":"sealed class Size Represents the target size of an image request. See Also RequestBuilder.size SizeResolver.size","title":"Size"},{"location":"api/coil-base/coil.size/-size/#inheritors","text":"Name Summary OriginalSize object OriginalSize : Size Represents the width and height of the source image. PixelSize data class PixelSize : Size A non-zero width and height in pixels.","title":"Inheritors"},{"location":"api/coil-base/coil.size/-display-size-resolver/","text":"coil-base / coil.size / DisplaySizeResolver DisplaySizeResolver class DisplaySizeResolver : SizeResolver A SizeResolver that constrains a Target to the size of the display. This is used as the fallback SizeResolver for Request s. Constructors Name Summary init DisplaySizeResolver(context: Context ) A SizeResolver that constrains a Target to the size of the display. Functions Name Summary size suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Home"},{"location":"api/coil-base/coil.size/-display-size-resolver/#displaysizeresolver","text":"class DisplaySizeResolver : SizeResolver A SizeResolver that constrains a Target to the size of the display. This is used as the fallback SizeResolver for Request s.","title":"DisplaySizeResolver"},{"location":"api/coil-base/coil.size/-display-size-resolver/#constructors","text":"Name Summary init DisplaySizeResolver(context: Context ) A SizeResolver that constrains a Target to the size of the display.","title":"Constructors"},{"location":"api/coil-base/coil.size/-display-size-resolver/#functions","text":"Name Summary size suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Functions"},{"location":"api/coil-base/coil.size/-display-size-resolver/-init-/","text":"coil-base / coil.size / DisplaySizeResolver / init init DisplaySizeResolver(context: Context ) A SizeResolver that constrains a Target to the size of the display. This is used as the fallback SizeResolver for Request s.","title":" init "},{"location":"api/coil-base/coil.size/-display-size-resolver/-init-/#init","text":"DisplaySizeResolver(context: Context ) A SizeResolver that constrains a Target to the size of the display. This is used as the fallback SizeResolver for Request s.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.size/-display-size-resolver/size/","text":"coil-base / coil.size / DisplaySizeResolver / size size suspend fun size(): Size Overrides SizeResolver.size Return the Size that the image should be loaded at.","title":"Size"},{"location":"api/coil-base/coil.size/-display-size-resolver/size/#size","text":"suspend fun size(): Size Overrides SizeResolver.size Return the Size that the image should be loaded at.","title":"size"},{"location":"api/coil-base/coil.size/-pixel-size/","text":"coil-base / coil.size / PixelSize PixelSize data class PixelSize : Size A non-zero width and height in pixels. Constructors Name Summary init PixelSize(width: Int , height: Int ) A non-zero width and height in pixels. Properties Name Summary height val height: Int width val width: Int","title":"Home"},{"location":"api/coil-base/coil.size/-pixel-size/#pixelsize","text":"data class PixelSize : Size A non-zero width and height in pixels.","title":"PixelSize"},{"location":"api/coil-base/coil.size/-pixel-size/#constructors","text":"Name Summary init PixelSize(width: Int , height: Int ) A non-zero width and height in pixels.","title":"Constructors"},{"location":"api/coil-base/coil.size/-pixel-size/#properties","text":"Name Summary height val height: Int width val width: Int","title":"Properties"},{"location":"api/coil-base/coil.size/-pixel-size/-init-/","text":"coil-base / coil.size / PixelSize / init init PixelSize(@Px width: Int , @Px height: Int ) A non-zero width and height in pixels.","title":" init "},{"location":"api/coil-base/coil.size/-pixel-size/-init-/#init","text":"PixelSize(@Px width: Int , @Px height: Int ) A non-zero width and height in pixels.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.size/-pixel-size/height/","text":"coil-base / coil.size / PixelSize / height height val height: Int","title":"Height"},{"location":"api/coil-base/coil.size/-pixel-size/height/#height","text":"val height: Int","title":"height"},{"location":"api/coil-base/coil.size/-pixel-size/width/","text":"coil-base / coil.size / PixelSize / width width val width: Int","title":"Width"},{"location":"api/coil-base/coil.size/-pixel-size/width/#width","text":"val width: Int","title":"width"},{"location":"api/coil-base/coil.size/-scale/","text":"coil-base / coil.size / Scale Scale enum class Scale Represents a scaling policy. Conceptually, you can think of this as ImageView.ScaleType without any knowledge of an image's gravity in the view. See Also RequestBuilder.scale Enum Values Name Summary FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view. FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view.","title":"Home"},{"location":"api/coil-base/coil.size/-scale/#scale","text":"enum class Scale Represents a scaling policy. Conceptually, you can think of this as ImageView.ScaleType without any knowledge of an image's gravity in the view. See Also RequestBuilder.scale","title":"Scale"},{"location":"api/coil-base/coil.size/-scale/#enum-values","text":"Name Summary FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view. FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view.","title":"Enum Values"},{"location":"api/coil-base/coil.size/-scale/-f-i-l-l/","text":"coil-base / coil.size / Scale / FILL FILL FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view.","title":" f i l l"},{"location":"api/coil-base/coil.size/-scale/-f-i-l-l/#fill","text":"FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view.","title":"FILL"},{"location":"api/coil-base/coil.size/-scale/-f-i-t/","text":"coil-base / coil.size / Scale / FIT FIT FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view.","title":" f i t"},{"location":"api/coil-base/coil.size/-scale/-f-i-t/#fit","text":"FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view.","title":"FIT"},{"location":"api/coil-base/coil.size/-size-resolver/","text":"coil-base / coil.size / SizeResolver SizeResolver interface SizeResolver An interface for measuring the target size for an image request. See Also RequestBuilder.size Functions Name Summary size abstract suspend fun size(): Size Return the Size that the image should be loaded at. Companion Object Functions Name Summary invoke operator fun invoke(size: Size ): SizeResolver Construct a SizeResolver instance with a fixed size . Inheritors Name Summary DisplaySizeResolver class DisplaySizeResolver : SizeResolver A SizeResolver that constrains a Target to the size of the display. ViewSizeResolver interface ViewSizeResolver T : View : SizeResolver A SizeResolver that measures the size of a View .","title":"Home"},{"location":"api/coil-base/coil.size/-size-resolver/#sizeresolver","text":"interface SizeResolver An interface for measuring the target size for an image request. See Also RequestBuilder.size","title":"SizeResolver"},{"location":"api/coil-base/coil.size/-size-resolver/#functions","text":"Name Summary size abstract suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Functions"},{"location":"api/coil-base/coil.size/-size-resolver/#companion-object-functions","text":"Name Summary invoke operator fun invoke(size: Size ): SizeResolver Construct a SizeResolver instance with a fixed size .","title":"Companion Object Functions"},{"location":"api/coil-base/coil.size/-size-resolver/#inheritors","text":"Name Summary DisplaySizeResolver class DisplaySizeResolver : SizeResolver A SizeResolver that constrains a Target to the size of the display. ViewSizeResolver interface ViewSizeResolver T : View : SizeResolver A SizeResolver that measures the size of a View .","title":"Inheritors"},{"location":"api/coil-base/coil.size/-size-resolver/invoke/","text":"coil-base / coil.size / SizeResolver / invoke invoke operator fun invoke(size: Size ): SizeResolver Construct a SizeResolver instance with a fixed size .","title":"Invoke"},{"location":"api/coil-base/coil.size/-size-resolver/invoke/#invoke","text":"operator fun invoke(size: Size ): SizeResolver Construct a SizeResolver instance with a fixed size .","title":"invoke"},{"location":"api/coil-base/coil.size/-size-resolver/size/","text":"coil-base / coil.size / SizeResolver / size size abstract suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Size"},{"location":"api/coil-base/coil.size/-size-resolver/size/#size","text":"abstract suspend fun size(): Size Return the Size that the image should be loaded at.","title":"size"},{"location":"api/coil-base/coil.size/-view-size-resolver/","text":"coil-base / coil.size / ViewSizeResolver ViewSizeResolver interface ViewSizeResolver T : View : SizeResolver A SizeResolver that measures the size of a View . Properties Name Summary view abstract val view: T Functions Name Summary size open suspend fun size(): Size Return the Size that the image should be loaded at. Companion Object Functions Name Summary invoke operator fun T : View invoke(view: T ): ViewSizeResolver T Construct a ViewSizeResolver instance using the default View measurement implementation.","title":"Home"},{"location":"api/coil-base/coil.size/-view-size-resolver/#viewsizeresolver","text":"interface ViewSizeResolver T : View : SizeResolver A SizeResolver that measures the size of a View .","title":"ViewSizeResolver"},{"location":"api/coil-base/coil.size/-view-size-resolver/#properties","text":"Name Summary view abstract val view: T","title":"Properties"},{"location":"api/coil-base/coil.size/-view-size-resolver/#functions","text":"Name Summary size open suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Functions"},{"location":"api/coil-base/coil.size/-view-size-resolver/#companion-object-functions","text":"Name Summary invoke operator fun T : View invoke(view: T ): ViewSizeResolver T Construct a ViewSizeResolver instance using the default View measurement implementation.","title":"Companion Object Functions"},{"location":"api/coil-base/coil.size/-view-size-resolver/invoke/","text":"coil-base / coil.size / ViewSizeResolver / invoke invoke operator fun T : View invoke(view: T ): ViewSizeResolver T Construct a ViewSizeResolver instance using the default View measurement implementation.","title":"Invoke"},{"location":"api/coil-base/coil.size/-view-size-resolver/invoke/#invoke","text":"operator fun T : View invoke(view: T ): ViewSizeResolver T Construct a ViewSizeResolver instance using the default View measurement implementation.","title":"invoke"},{"location":"api/coil-base/coil.size/-view-size-resolver/size/","text":"coil-base / coil.size / ViewSizeResolver / size size open suspend fun size(): Size Overrides SizeResolver.size Return the Size that the image should be loaded at.","title":"Size"},{"location":"api/coil-base/coil.size/-view-size-resolver/size/#size","text":"open suspend fun size(): Size Overrides SizeResolver.size Return the Size that the image should be loaded at.","title":"size"},{"location":"api/coil-base/coil.size/-view-size-resolver/view/","text":"coil-base / coil.size / ViewSizeResolver / view view abstract val view: T","title":"View"},{"location":"api/coil-base/coil.size/-view-size-resolver/view/#view","text":"abstract val view: T","title":"view"},{"location":"api/coil-base/coil.target/","text":"coil-base / coil.target Package coil.target Types Name Summary ImageViewTarget class ImageViewTarget : PoolableViewTarget ImageView , DefaultLifecycleObserver A Target , which handles setting images on an ImageView . PoolableViewTarget interface PoolableViewTarget T : View : ViewTarget T A ViewTarget that supports Bitmap pooling. Target interface Target A listener that accepts the result of an image load. ViewTarget interface ViewTarget T : View : Target A Target with an associated View .","title":"Home"},{"location":"api/coil-base/coil.target/#package-coiltarget","text":"","title":"Package coil.target"},{"location":"api/coil-base/coil.target/#types","text":"Name Summary ImageViewTarget class ImageViewTarget : PoolableViewTarget ImageView , DefaultLifecycleObserver A Target , which handles setting images on an ImageView . PoolableViewTarget interface PoolableViewTarget T : View : ViewTarget T A ViewTarget that supports Bitmap pooling. Target interface Target A listener that accepts the result of an image load. ViewTarget interface ViewTarget T : View : Target A Target with an associated View .","title":"Types"},{"location":"api/coil-base/coil.target/-image-view-target/","text":"coil-base / coil.target / ImageViewTarget ImageViewTarget class ImageViewTarget : PoolableViewTarget ImageView , DefaultLifecycleObserver A Target , which handles setting images on an ImageView . Constructors Name Summary init ImageViewTarget(view: ImageView ) A Target , which handles setting images on an ImageView . Properties Name Summary view val view: ImageView The View used by this Target . Functions Name Summary onClear fun onClear(): Unit Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. onError fun onError(error: Drawable ?): Unit Called if the image request fails. onStart fun onStart(placeholder: Drawable ?): Unit Called when the image request starts. fun onStart(owner: LifecycleOwner ): Unit onStop fun onStop(owner: LifecycleOwner ): Unit onSuccess fun onSuccess(result: Drawable ): Unit Called if the image request is successful.","title":"Home"},{"location":"api/coil-base/coil.target/-image-view-target/#imageviewtarget","text":"class ImageViewTarget : PoolableViewTarget ImageView , DefaultLifecycleObserver A Target , which handles setting images on an ImageView .","title":"ImageViewTarget"},{"location":"api/coil-base/coil.target/-image-view-target/#constructors","text":"Name Summary init ImageViewTarget(view: ImageView ) A Target , which handles setting images on an ImageView .","title":"Constructors"},{"location":"api/coil-base/coil.target/-image-view-target/#properties","text":"Name Summary view val view: ImageView The View used by this Target .","title":"Properties"},{"location":"api/coil-base/coil.target/-image-view-target/#functions","text":"Name Summary onClear fun onClear(): Unit Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. onError fun onError(error: Drawable ?): Unit Called if the image request fails. onStart fun onStart(placeholder: Drawable ?): Unit Called when the image request starts. fun onStart(owner: LifecycleOwner ): Unit onStop fun onStop(owner: LifecycleOwner ): Unit onSuccess fun onSuccess(result: Drawable ): Unit Called if the image request is successful.","title":"Functions"},{"location":"api/coil-base/coil.target/-image-view-target/-init-/","text":"coil-base / coil.target / ImageViewTarget / init init ImageViewTarget(view: ImageView ) A Target , which handles setting images on an ImageView .","title":" init "},{"location":"api/coil-base/coil.target/-image-view-target/-init-/#init","text":"ImageViewTarget(view: ImageView ) A Target , which handles setting images on an ImageView .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.target/-image-view-target/on-clear/","text":"coil-base / coil.target / ImageViewTarget / onClear onClear fun onClear(): Unit Overrides PoolableViewTarget.onClear Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"On clear"},{"location":"api/coil-base/coil.target/-image-view-target/on-clear/#onclear","text":"fun onClear(): Unit Overrides PoolableViewTarget.onClear Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"onClear"},{"location":"api/coil-base/coil.target/-image-view-target/on-error/","text":"coil-base / coil.target / ImageViewTarget / onError onError fun onError(error: Drawable ?): Unit Overrides Target.onError Called if the image request fails.","title":"On error"},{"location":"api/coil-base/coil.target/-image-view-target/on-error/#onerror","text":"fun onError(error: Drawable ?): Unit Overrides Target.onError Called if the image request fails.","title":"onError"},{"location":"api/coil-base/coil.target/-image-view-target/on-start/","text":"coil-base / coil.target / ImageViewTarget / onStart onStart fun onStart(placeholder: Drawable ?): Unit Overrides Target.onStart Called when the image request starts. fun onStart(owner: LifecycleOwner ): Unit","title":"On start"},{"location":"api/coil-base/coil.target/-image-view-target/on-start/#onstart","text":"fun onStart(placeholder: Drawable ?): Unit Overrides Target.onStart Called when the image request starts. fun onStart(owner: LifecycleOwner ): Unit","title":"onStart"},{"location":"api/coil-base/coil.target/-image-view-target/on-stop/","text":"coil-base / coil.target / ImageViewTarget / onStop onStop fun onStop(owner: LifecycleOwner ): Unit","title":"On stop"},{"location":"api/coil-base/coil.target/-image-view-target/on-stop/#onstop","text":"fun onStop(owner: LifecycleOwner ): Unit","title":"onStop"},{"location":"api/coil-base/coil.target/-image-view-target/on-success/","text":"coil-base / coil.target / ImageViewTarget / onSuccess onSuccess fun onSuccess(result: Drawable ): Unit Overrides Target.onSuccess Called if the image request is successful.","title":"On success"},{"location":"api/coil-base/coil.target/-image-view-target/on-success/#onsuccess","text":"fun onSuccess(result: Drawable ): Unit Overrides Target.onSuccess Called if the image request is successful.","title":"onSuccess"},{"location":"api/coil-base/coil.target/-image-view-target/view/","text":"coil-base / coil.target / ImageViewTarget / view view val view: ImageView Overrides ViewTarget.view The View used by this Target .","title":"View"},{"location":"api/coil-base/coil.target/-image-view-target/view/#view","text":"val view: ImageView Overrides ViewTarget.view The View used by this Target .","title":"view"},{"location":"api/coil-base/coil.target/-poolable-view-target/","text":"coil-base / coil.target / PoolableViewTarget PoolableViewTarget interface PoolableViewTarget T : View : ViewTarget T A ViewTarget that supports Bitmap pooling. Implementing PoolableViewTarget opts this target into bitmap pooling. This allows Coil to re-use Bitmap s given to this target, which improves performance. To opt out of bitmap pooling, implement ViewTarget instead. Implementing PoolableViewTarget requires that you must stop using the previous Drawable as soon as the next PoolableViewTarget lifecycle method is called; one of: Target.onStart , Target.onSuccess , Target.onError , PoolableViewTarget.onClear . For example, a PoolableViewTarget must stop using the placeholder drawable from Target.onStart as soon as Target.onSuccess is called. Continuing to use the previous Drawable after the next lifecycle method is called can cause rendering issues and/or throw exceptions. See Also ViewTarget ImageViewTarget Inherited Properties Name Summary view abstract val view: T The View used by this Target . Functions Name Summary onClear abstract fun onClear(): Unit Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. Inheritors Name Summary ImageViewTarget class ImageViewTarget : PoolableViewTarget ImageView , DefaultLifecycleObserver A Target , which handles setting images on an ImageView .","title":"Home"},{"location":"api/coil-base/coil.target/-poolable-view-target/#poolableviewtarget","text":"interface PoolableViewTarget T : View : ViewTarget T A ViewTarget that supports Bitmap pooling. Implementing PoolableViewTarget opts this target into bitmap pooling. This allows Coil to re-use Bitmap s given to this target, which improves performance. To opt out of bitmap pooling, implement ViewTarget instead. Implementing PoolableViewTarget requires that you must stop using the previous Drawable as soon as the next PoolableViewTarget lifecycle method is called; one of: Target.onStart , Target.onSuccess , Target.onError , PoolableViewTarget.onClear . For example, a PoolableViewTarget must stop using the placeholder drawable from Target.onStart as soon as Target.onSuccess is called. Continuing to use the previous Drawable after the next lifecycle method is called can cause rendering issues and/or throw exceptions. See Also ViewTarget ImageViewTarget","title":"PoolableViewTarget"},{"location":"api/coil-base/coil.target/-poolable-view-target/#inherited-properties","text":"Name Summary view abstract val view: T The View used by this Target .","title":"Inherited Properties"},{"location":"api/coil-base/coil.target/-poolable-view-target/#functions","text":"Name Summary onClear abstract fun onClear(): Unit Called when the current Drawable is no longer usable. Targets must stop using the current Drawable.","title":"Functions"},{"location":"api/coil-base/coil.target/-poolable-view-target/#inheritors","text":"Name Summary ImageViewTarget class ImageViewTarget : PoolableViewTarget ImageView , DefaultLifecycleObserver A Target , which handles setting images on an ImageView .","title":"Inheritors"},{"location":"api/coil-base/coil.target/-poolable-view-target/on-clear/","text":"coil-base / coil.target / PoolableViewTarget / onClear onClear @MainThread abstract fun onClear(): Unit Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"On clear"},{"location":"api/coil-base/coil.target/-poolable-view-target/on-clear/#onclear","text":"@MainThread abstract fun onClear(): Unit Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"onClear"},{"location":"api/coil-base/coil.target/-target/","text":"coil-base / coil.target / Target Target interface Target A listener that accepts the result of an image load. Each lifecycle method is called at most once. onSuccess and onError are mutually exclusive. Functions Name Summary onError open fun onError(error: Drawable ?): Unit Called if the image request fails. onStart open fun onStart(placeholder: Drawable ?): Unit Called when the image request starts. onSuccess open fun onSuccess(result: Drawable ): Unit Called if the image request is successful. Inheritors Name Summary ViewTarget interface ViewTarget T : View : Target A Target with an associated View .","title":"Home"},{"location":"api/coil-base/coil.target/-target/#target","text":"interface Target A listener that accepts the result of an image load. Each lifecycle method is called at most once. onSuccess and onError are mutually exclusive.","title":"Target"},{"location":"api/coil-base/coil.target/-target/#functions","text":"Name Summary onError open fun onError(error: Drawable ?): Unit Called if the image request fails. onStart open fun onStart(placeholder: Drawable ?): Unit Called when the image request starts. onSuccess open fun onSuccess(result: Drawable ): Unit Called if the image request is successful.","title":"Functions"},{"location":"api/coil-base/coil.target/-target/#inheritors","text":"Name Summary ViewTarget interface ViewTarget T : View : Target A Target with an associated View .","title":"Inheritors"},{"location":"api/coil-base/coil.target/-target/on-error/","text":"coil-base / coil.target / Target / onError onError @MainThread open fun onError(error: Drawable ?): Unit Called if the image request fails.","title":"On error"},{"location":"api/coil-base/coil.target/-target/on-error/#onerror","text":"@MainThread open fun onError(error: Drawable ?): Unit Called if the image request fails.","title":"onError"},{"location":"api/coil-base/coil.target/-target/on-start/","text":"coil-base / coil.target / Target / onStart onStart @MainThread open fun onStart(placeholder: Drawable ?): Unit Called when the image request starts.","title":"On start"},{"location":"api/coil-base/coil.target/-target/on-start/#onstart","text":"@MainThread open fun onStart(placeholder: Drawable ?): Unit Called when the image request starts.","title":"onStart"},{"location":"api/coil-base/coil.target/-target/on-success/","text":"coil-base / coil.target / Target / onSuccess onSuccess @MainThread open fun onSuccess(result: Drawable ): Unit Called if the image request is successful.","title":"On success"},{"location":"api/coil-base/coil.target/-target/on-success/#onsuccess","text":"@MainThread open fun onSuccess(result: Drawable ): Unit Called if the image request is successful.","title":"onSuccess"},{"location":"api/coil-base/coil.target/-view-target/","text":"coil-base / coil.target / ViewTarget ViewTarget interface ViewTarget T : View : Target A Target with an associated View . If the loaded Drawable will only be used with one View , prefer this to Target . Unlike Target s, ViewTarget s can have their lifecycle methods called multiple times. Optionally, ViewTarget s can be declared as LifecycleObserver s. They are automatically registered when the request starts and unregistered when the request is disposed. Properties Name Summary view abstract val view: T The View used by this Target . Inherited Functions Name Summary onError open fun onError(error: Drawable ?): Unit Called if the image request fails. onStart open fun onStart(placeholder: Drawable ?): Unit Called when the image request starts. onSuccess open fun onSuccess(result: Drawable ): Unit Called if the image request is successful. Inheritors Name Summary PoolableViewTarget interface PoolableViewTarget T : View : ViewTarget T A ViewTarget that supports Bitmap pooling.","title":"Home"},{"location":"api/coil-base/coil.target/-view-target/#viewtarget","text":"interface ViewTarget T : View : Target A Target with an associated View . If the loaded Drawable will only be used with one View , prefer this to Target . Unlike Target s, ViewTarget s can have their lifecycle methods called multiple times. Optionally, ViewTarget s can be declared as LifecycleObserver s. They are automatically registered when the request starts and unregistered when the request is disposed.","title":"ViewTarget"},{"location":"api/coil-base/coil.target/-view-target/#properties","text":"Name Summary view abstract val view: T The View used by this Target .","title":"Properties"},{"location":"api/coil-base/coil.target/-view-target/#inherited-functions","text":"Name Summary onError open fun onError(error: Drawable ?): Unit Called if the image request fails. onStart open fun onStart(placeholder: Drawable ?): Unit Called when the image request starts. onSuccess open fun onSuccess(result: Drawable ): Unit Called if the image request is successful.","title":"Inherited Functions"},{"location":"api/coil-base/coil.target/-view-target/#inheritors","text":"Name Summary PoolableViewTarget interface PoolableViewTarget T : View : ViewTarget T A ViewTarget that supports Bitmap pooling.","title":"Inheritors"},{"location":"api/coil-base/coil.target/-view-target/view/","text":"coil-base / coil.target / ViewTarget / view view abstract val view: T The View used by this Target .","title":"View"},{"location":"api/coil-base/coil.target/-view-target/view/#view","text":"abstract val view: T The View used by this Target .","title":"view"},{"location":"api/coil-base/coil.transform/","text":"coil-base / coil.transform Package coil.transform Types Name Summary BlurTransformation class BlurTransformation : Transformation A Transformation that applies a Gaussian blur to an image. CircleCropTransformation class CircleCropTransformation : Transformation A Transformation that crops an image using a centered circle as the mask. GrayscaleTransformation class GrayscaleTransformation : Transformation A Transformation that converts an image to shades of gray. RoundedCornersTransformation class RoundedCornersTransformation : Transformation A Transformation that rounds the corners of an image. Transformation interface Transformation An interface for making transformations to an image's pixel data.","title":"Home"},{"location":"api/coil-base/coil.transform/#package-coiltransform","text":"","title":"Package coil.transform"},{"location":"api/coil-base/coil.transform/#types","text":"Name Summary BlurTransformation class BlurTransformation : Transformation A Transformation that applies a Gaussian blur to an image. CircleCropTransformation class CircleCropTransformation : Transformation A Transformation that crops an image using a centered circle as the mask. GrayscaleTransformation class GrayscaleTransformation : Transformation A Transformation that converts an image to shades of gray. RoundedCornersTransformation class RoundedCornersTransformation : Transformation A Transformation that rounds the corners of an image. Transformation interface Transformation An interface for making transformations to an image's pixel data.","title":"Types"},{"location":"api/coil-base/coil.transform/-blur-transformation/","text":"coil-base / coil.transform / BlurTransformation BlurTransformation class BlurTransformation : Transformation A Transformation that applies a Gaussian blur to an image. Constructors Name Summary init BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING) A Transformation that applies a Gaussian blur to an image. Functions Name Summary key fun key(): String Return a unique key for this transformation. transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap .","title":"Home"},{"location":"api/coil-base/coil.transform/-blur-transformation/#blurtransformation","text":"class BlurTransformation : Transformation A Transformation that applies a Gaussian blur to an image.","title":"BlurTransformation"},{"location":"api/coil-base/coil.transform/-blur-transformation/#constructors","text":"Name Summary init BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING) A Transformation that applies a Gaussian blur to an image.","title":"Constructors"},{"location":"api/coil-base/coil.transform/-blur-transformation/#functions","text":"Name Summary key fun key(): String Return a unique key for this transformation. transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap .","title":"Functions"},{"location":"api/coil-base/coil.transform/-blur-transformation/-init-/","text":"coil-base / coil.transform / BlurTransformation / init init BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING) A Transformation that applies a Gaussian blur to an image.","title":" init "},{"location":"api/coil-base/coil.transform/-blur-transformation/-init-/#init","text":"BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING) A Transformation that applies a Gaussian blur to an image.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-blur-transformation/key/","text":"coil-base / coil.transform / BlurTransformation / key key fun key(): String Overrides Transformation.key Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-blur-transformation/key/#key","text":"fun key(): String Overrides Transformation.key Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-blur-transformation/transform/","text":"coil-base / coil.transform / BlurTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Overrides Transformation.transform Apply the transformation to Bitmap . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every Bitmap except the output Bitmap to the pool so that they can be reused. See Also BitmapPool.get BitmapPool.put","title":"Transform"},{"location":"api/coil-base/coil.transform/-blur-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Overrides Transformation.transform Apply the transformation to Bitmap . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every Bitmap except the output Bitmap to the pool so that they can be reused. See Also BitmapPool.get BitmapPool.put","title":"transform"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/","text":"coil-base / coil.transform / CircleCropTransformation CircleCropTransformation class CircleCropTransformation : Transformation A Transformation that crops an image using a centered circle as the mask. Constructors Name Summary init CircleCropTransformation() A Transformation that crops an image using a centered circle as the mask. Functions Name Summary key fun key(): String Return a unique key for this transformation. transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap .","title":"Home"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/#circlecroptransformation","text":"class CircleCropTransformation : Transformation A Transformation that crops an image using a centered circle as the mask.","title":"CircleCropTransformation"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/#constructors","text":"Name Summary init CircleCropTransformation() A Transformation that crops an image using a centered circle as the mask.","title":"Constructors"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/#functions","text":"Name Summary key fun key(): String Return a unique key for this transformation. transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap .","title":"Functions"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/-init-/","text":"coil-base / coil.transform / CircleCropTransformation / init init CircleCropTransformation() A Transformation that crops an image using a centered circle as the mask.","title":" init "},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/-init-/#init","text":"CircleCropTransformation() A Transformation that crops an image using a centered circle as the mask.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/key/","text":"coil-base / coil.transform / CircleCropTransformation / key key fun key(): String Overrides Transformation.key Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/key/#key","text":"fun key(): String Overrides Transformation.key Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/transform/","text":"coil-base / coil.transform / CircleCropTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Overrides Transformation.transform Apply the transformation to Bitmap . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every Bitmap except the output Bitmap to the pool so that they can be reused. See Also BitmapPool.get BitmapPool.put","title":"Transform"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Overrides Transformation.transform Apply the transformation to Bitmap . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every Bitmap except the output Bitmap to the pool so that they can be reused. See Also BitmapPool.get BitmapPool.put","title":"transform"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/","text":"coil-base / coil.transform / GrayscaleTransformation GrayscaleTransformation class GrayscaleTransformation : Transformation A Transformation that converts an image to shades of gray. Constructors Name Summary init GrayscaleTransformation() A Transformation that converts an image to shades of gray. Functions Name Summary key fun key(): String Return a unique key for this transformation. transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap .","title":"Home"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/#grayscaletransformation","text":"class GrayscaleTransformation : Transformation A Transformation that converts an image to shades of gray.","title":"GrayscaleTransformation"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/#constructors","text":"Name Summary init GrayscaleTransformation() A Transformation that converts an image to shades of gray.","title":"Constructors"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/#functions","text":"Name Summary key fun key(): String Return a unique key for this transformation. transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap .","title":"Functions"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/-init-/","text":"coil-base / coil.transform / GrayscaleTransformation / init init GrayscaleTransformation() A Transformation that converts an image to shades of gray.","title":" init "},{"location":"api/coil-base/coil.transform/-grayscale-transformation/-init-/#init","text":"GrayscaleTransformation() A Transformation that converts an image to shades of gray.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/key/","text":"coil-base / coil.transform / GrayscaleTransformation / key key fun key(): String Overrides Transformation.key Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/key/#key","text":"fun key(): String Overrides Transformation.key Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/transform/","text":"coil-base / coil.transform / GrayscaleTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Overrides Transformation.transform Apply the transformation to Bitmap . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every Bitmap except the output Bitmap to the pool so that they can be reused. See Also BitmapPool.get BitmapPool.put","title":"Transform"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Overrides Transformation.transform Apply the transformation to Bitmap . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every Bitmap except the output Bitmap to the pool so that they can be reused. See Also BitmapPool.get BitmapPool.put","title":"transform"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/","text":"coil-base / coil.transform / RoundedCornersTransformation RoundedCornersTransformation class RoundedCornersTransformation : Transformation A Transformation that rounds the corners of an image. Constructors Name Summary init RoundedCornersTransformation(radius: Float ) A Transformation that rounds the corners of an image. Functions Name Summary key fun key(): String Return a unique key for this transformation. transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap .","title":"Home"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#roundedcornerstransformation","text":"class RoundedCornersTransformation : Transformation A Transformation that rounds the corners of an image.","title":"RoundedCornersTransformation"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#constructors","text":"Name Summary init RoundedCornersTransformation(radius: Float ) A Transformation that rounds the corners of an image.","title":"Constructors"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#functions","text":"Name Summary key fun key(): String Return a unique key for this transformation. transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap .","title":"Functions"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/-init-/","text":"coil-base / coil.transform / RoundedCornersTransformation / init init RoundedCornersTransformation(radius: Float ) A Transformation that rounds the corners of an image.","title":" init "},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/-init-/#init","text":"RoundedCornersTransformation(radius: Float ) A Transformation that rounds the corners of an image.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/key/","text":"coil-base / coil.transform / RoundedCornersTransformation / key key fun key(): String Overrides Transformation.key Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/key/#key","text":"fun key(): String Overrides Transformation.key Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/transform/","text":"coil-base / coil.transform / RoundedCornersTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Overrides Transformation.transform Apply the transformation to Bitmap . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every Bitmap except the output Bitmap to the pool so that they can be reused. See Also BitmapPool.get BitmapPool.put","title":"Transform"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Overrides Transformation.transform Apply the transformation to Bitmap . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every Bitmap except the output Bitmap to the pool so that they can be reused. See Also BitmapPool.get BitmapPool.put","title":"transform"},{"location":"api/coil-base/coil.transform/-transformation/","text":"coil-base / coil.transform / Transformation Transformation interface Transformation An interface for making transformations to an image's pixel data. NOTE: Transformations are only applied if DrawableResult.drawable or DecodeResult.drawable is a BitmapDrawable . See Also RequestBuilder.transformations Functions Name Summary key abstract fun key(): String Return a unique key for this transformation. transform abstract suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap . Inheritors Name Summary BlurTransformation class BlurTransformation : Transformation A Transformation that applies a Gaussian blur to an image. CircleCropTransformation class CircleCropTransformation : Transformation A Transformation that crops an image using a centered circle as the mask. GrayscaleTransformation class GrayscaleTransformation : Transformation A Transformation that converts an image to shades of gray. RoundedCornersTransformation class RoundedCornersTransformation : Transformation A Transformation that rounds the corners of an image.","title":"Home"},{"location":"api/coil-base/coil.transform/-transformation/#transformation","text":"interface Transformation An interface for making transformations to an image's pixel data. NOTE: Transformations are only applied if DrawableResult.drawable or DecodeResult.drawable is a BitmapDrawable . See Also RequestBuilder.transformations","title":"Transformation"},{"location":"api/coil-base/coil.transform/-transformation/#functions","text":"Name Summary key abstract fun key(): String Return a unique key for this transformation. transform abstract suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap .","title":"Functions"},{"location":"api/coil-base/coil.transform/-transformation/#inheritors","text":"Name Summary BlurTransformation class BlurTransformation : Transformation A Transformation that applies a Gaussian blur to an image. CircleCropTransformation class CircleCropTransformation : Transformation A Transformation that crops an image using a centered circle as the mask. GrayscaleTransformation class GrayscaleTransformation : Transformation A Transformation that converts an image to shades of gray. RoundedCornersTransformation class RoundedCornersTransformation : Transformation A Transformation that rounds the corners of an image.","title":"Inheritors"},{"location":"api/coil-base/coil.transform/-transformation/key/","text":"coil-base / coil.transform / Transformation / key key abstract fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-transformation/key/#key","text":"abstract fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-transformation/transform/","text":"coil-base / coil.transform / Transformation / transform transform abstract suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every Bitmap except the output Bitmap to the pool so that they can be reused. See Also BitmapPool.get BitmapPool.put","title":"Transform"},{"location":"api/coil-base/coil.transform/-transformation/transform/#transform","text":"abstract suspend fun transform(pool: BitmapPool , input: Bitmap ): Bitmap Apply the transformation to Bitmap . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every Bitmap except the output Bitmap to the pool so that they can be reused. See Also BitmapPool.get BitmapPool.put","title":"transform"},{"location":"api/coil-base/coil.util/","text":"coil-base / coil.util Package coil.util Types Name Summary CoilLogger object CoilLogger A singleton that enables/disables logging to Log .","title":"Home"},{"location":"api/coil-base/coil.util/#package-coilutil","text":"","title":"Package coil.util"},{"location":"api/coil-base/coil.util/#types","text":"Name Summary CoilLogger object CoilLogger A singleton that enables/disables logging to Log .","title":"Types"},{"location":"api/coil-base/coil.util/-coil-logger/","text":"coil-base / coil.util / CoilLogger CoilLogger object CoilLogger A singleton that enables/disables logging to Log . Functions Name Summary setEnabled fun setEnabled(enabled: Boolean ): Unit Enable/disable logging. setLevel fun setLevel(level: Int ): Unit Set the minimum importance for Coil to log.","title":"Home"},{"location":"api/coil-base/coil.util/-coil-logger/#coillogger","text":"object CoilLogger A singleton that enables/disables logging to Log .","title":"CoilLogger"},{"location":"api/coil-base/coil.util/-coil-logger/#functions","text":"Name Summary setEnabled fun setEnabled(enabled: Boolean ): Unit Enable/disable logging. setLevel fun setLevel(level: Int ): Unit Set the minimum importance for Coil to log.","title":"Functions"},{"location":"api/coil-base/coil.util/-coil-logger/set-enabled/","text":"coil-base / coil.util / CoilLogger / setEnabled setEnabled @JvmStatic fun setEnabled(enabled: Boolean ): Unit Enable/disable logging. NOTE: Enabling this reduces performance. Additionally, this will log URLs which can contain PII . You should not enable this in release builds.","title":"Set enabled"},{"location":"api/coil-base/coil.util/-coil-logger/set-enabled/#setenabled","text":"@JvmStatic fun setEnabled(enabled: Boolean ): Unit Enable/disable logging. NOTE: Enabling this reduces performance. Additionally, this will log URLs which can contain PII . You should not enable this in release builds.","title":"setEnabled"},{"location":"api/coil-base/coil.util/-coil-logger/set-level/","text":"coil-base / coil.util / CoilLogger / setLevel setLevel @JvmStatic fun setLevel(level: Int ): Unit Set the minimum importance for Coil to log. See Also Log","title":"Set level"},{"location":"api/coil-base/coil.util/-coil-logger/set-level/#setlevel","text":"@JvmStatic fun setLevel(level: Int ): Unit Set the minimum importance for Coil to log. See Also Log","title":"setLevel"},{"location":"api/coil-default/","text":"coil-default Packages Name Summary coil coil.api Index All Types","title":"coil"},{"location":"api/coil-default/#packages","text":"Name Summary coil coil.api","title":"Packages"},{"location":"api/coil-default/#index","text":"All Types","title":"Index"},{"location":"api/coil-default/alltypes/","text":"All Types Name Summary coil.Coil A singleton that holds the default ImageLoader instance. android.widget.ImageView (extensions in package coil.api)","title":"Home"},{"location":"api/coil-default/alltypes/#all-types","text":"Name Summary coil.Coil A singleton that holds the default ImageLoader instance. android.widget.ImageView (extensions in package coil.api)","title":"All Types"},{"location":"api/coil-default/coil/","text":"coil-default / coil Package coil Types Name Summary Coil object Coil A singleton that holds the default ImageLoader instance.","title":"Home"},{"location":"api/coil-default/coil/#package-coil","text":"","title":"Package coil"},{"location":"api/coil-default/coil/#types","text":"Name Summary Coil object Coil A singleton that holds the default ImageLoader instance.","title":"Types"},{"location":"api/coil-default/coil/-coil/","text":"coil-default / coil / Coil Coil object Coil A singleton that holds the default ImageLoader instance. Functions Name Summary loader fun loader(): ImageLoader Get the default ImageLoader instance. Creates a new instance if none has been set. setDefaultImageLoader fun setDefaultImageLoader(loader: ImageLoader ): Unit Set the default ImageLoader instance. Shutdown the current instance. fun setDefaultImageLoader(factory: () - ImageLoader ): Unit Set the factory for the default ImageLoader instance. Shutdown the current instance. Extension Functions Name Summary get suspend fun Coil .get(url: String , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(url: HttpUrl , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(uri: Uri , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(file: File , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(drawableRes: Int , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(drawable: Drawable , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder.() - Unit = {}): Drawable getAny suspend fun Coil .getAny(data: Any , builder: GetRequestBuilder.() - Unit = {}): Drawable load fun Coil .load(context: Context , url: String ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable loadAny fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"Home"},{"location":"api/coil-default/coil/-coil/#coil","text":"object Coil A singleton that holds the default ImageLoader instance.","title":"Coil"},{"location":"api/coil-default/coil/-coil/#functions","text":"Name Summary loader fun loader(): ImageLoader Get the default ImageLoader instance. Creates a new instance if none has been set. setDefaultImageLoader fun setDefaultImageLoader(loader: ImageLoader ): Unit Set the default ImageLoader instance. Shutdown the current instance. fun setDefaultImageLoader(factory: () - ImageLoader ): Unit Set the factory for the default ImageLoader instance. Shutdown the current instance.","title":"Functions"},{"location":"api/coil-default/coil/-coil/#extension-functions","text":"Name Summary get suspend fun Coil .get(url: String , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(url: HttpUrl , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(uri: Uri , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(file: File , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(drawableRes: Int , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(drawable: Drawable , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder.() - Unit = {}): Drawable getAny suspend fun Coil .getAny(data: Any , builder: GetRequestBuilder.() - Unit = {}): Drawable load fun Coil .load(context: Context , url: String ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable loadAny fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"Extension Functions"},{"location":"api/coil-default/coil/-coil/loader/","text":"coil-default / coil / Coil / loader loader @JvmStatic fun loader(): ImageLoader Get the default ImageLoader instance. Creates a new instance if none has been set.","title":"Loader"},{"location":"api/coil-default/coil/-coil/loader/#loader","text":"@JvmStatic fun loader(): ImageLoader Get the default ImageLoader instance. Creates a new instance if none has been set.","title":"loader"},{"location":"api/coil-default/coil/-coil/set-default-image-loader/","text":"coil-default / coil / Coil / setDefaultImageLoader setDefaultImageLoader @JvmStatic fun setDefaultImageLoader(loader: ImageLoader ): Unit Set the default ImageLoader instance. Shutdown the current instance. @JvmStatic fun setDefaultImageLoader(factory: () - ImageLoader ): Unit Set the factory for the default ImageLoader instance. Shutdown the current instance. The factory is guaranteed to only be called once. This enables lazy instantiation of the default ImageLoader .","title":"Set default image loader"},{"location":"api/coil-default/coil/-coil/set-default-image-loader/#setdefaultimageloader","text":"@JvmStatic fun setDefaultImageLoader(loader: ImageLoader ): Unit Set the default ImageLoader instance. Shutdown the current instance. @JvmStatic fun setDefaultImageLoader(factory: () - ImageLoader ): Unit Set the factory for the default ImageLoader instance. Shutdown the current instance. The factory is guaranteed to only be called once. This enables lazy instantiation of the default ImageLoader .","title":"setDefaultImageLoader"},{"location":"api/coil-default/coil.api/","text":"coil-default / coil.api Package coil.api Extensions for External Classes Name Summary android.widget.ImageView Functions Name Summary get suspend fun Coil .get(url: String , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(url: HttpUrl , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(uri: Uri , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(file: File , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(drawableRes: Int , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(drawable: Drawable , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder.() - Unit = {}): Drawable getAny suspend fun Coil .getAny(data: Any , builder: GetRequestBuilder.() - Unit = {}): Drawable load fun Coil .load(context: Context , url: String ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable loadAny fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"Home"},{"location":"api/coil-default/coil.api/#package-coilapi","text":"","title":"Package coil.api"},{"location":"api/coil-default/coil.api/#extensions-for-external-classes","text":"Name Summary android.widget.ImageView","title":"Extensions for External Classes"},{"location":"api/coil-default/coil.api/#functions","text":"Name Summary get suspend fun Coil .get(url: String , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(url: HttpUrl , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(uri: Uri , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(file: File , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(drawableRes: Int , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(drawable: Drawable , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder.() - Unit = {}): Drawable getAny suspend fun Coil .getAny(data: Any , builder: GetRequestBuilder.() - Unit = {}): Drawable load fun Coil .load(context: Context , url: String ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable loadAny fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"Functions"},{"location":"api/coil-default/coil.api/get-any/","text":"coil-default / coil.api / getAny getAny suspend inline fun Coil .getAny(data: Any , builder: GetRequestBuilder.() - Unit = {}): Drawable","title":"Get any"},{"location":"api/coil-default/coil.api/get-any/#getany","text":"suspend inline fun Coil .getAny(data: Any , builder: GetRequestBuilder.() - Unit = {}): Drawable","title":"getAny"},{"location":"api/coil-default/coil.api/get/","text":"coil-default / coil.api / get get suspend inline fun Coil .get(url: String , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(url: HttpUrl , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(uri: Uri , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(file: File , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(@DrawableRes drawableRes: Int , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(drawable: Drawable , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder.() - Unit = {}): Drawable","title":"Get"},{"location":"api/coil-default/coil.api/get/#get","text":"suspend inline fun Coil .get(url: String , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(url: HttpUrl , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(uri: Uri , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(file: File , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(@DrawableRes drawableRes: Int , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(drawable: Drawable , builder: GetRequestBuilder.() - Unit = {}): Drawable suspend inline fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder.() - Unit = {}): Drawable","title":"get"},{"location":"api/coil-default/coil.api/load-any/","text":"coil-default / coil.api / loadAny loadAny inline fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"Load any"},{"location":"api/coil-default/coil.api/load-any/#loadany","text":"inline fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"loadAny"},{"location":"api/coil-default/coil.api/load/","text":"coil-default / coil.api / load load inline fun Coil .load(context: Context , url: String ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , @DrawableRes drawableRes: Int , builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"Load"},{"location":"api/coil-default/coil.api/load/#load","text":"inline fun Coil .load(context: Context , url: String ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , @DrawableRes drawableRes: Int , builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"load"},{"location":"api/coil-default/coil.api/android.widget.-image-view/","text":"coil-default / coil.api / android.widget.ImageView Extensions for android.widget.ImageView Name Summary load fun ImageView .load(url: String ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(file: File ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(drawableRes: Int , imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable loadAny fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"Home"},{"location":"api/coil-default/coil.api/android.widget.-image-view/#extensions-for-androidwidgetimageview","text":"Name Summary load fun ImageView .load(url: String ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(file: File ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(drawableRes: Int , imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable loadAny fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"Extensions for android.widget.ImageView"},{"location":"api/coil-default/coil.api/android.widget.-image-view/load-any/","text":"coil-default / coil.api / android.widget.ImageView / loadAny loadAny inline fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"Load any"},{"location":"api/coil-default/coil.api/android.widget.-image-view/load-any/#loadany","text":"inline fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"loadAny"},{"location":"api/coil-default/coil.api/android.widget.-image-view/load/","text":"coil-default / coil.api / android.widget.ImageView / load load inline fun ImageView .load(url: String ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(file: File ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(@DrawableRes drawableRes: Int , imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"Load"},{"location":"api/coil-default/coil.api/android.widget.-image-view/load/#load","text":"inline fun ImageView .load(url: String ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(file: File ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(@DrawableRes drawableRes: Int , imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable inline fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder.() - Unit = {}): RequestDisposable","title":"load"},{"location":"api/coil-gif/","text":"coil-gif Packages Name Summary coil.decode coil.drawable Index All Types","title":"coil-gif"},{"location":"api/coil-gif/#packages","text":"Name Summary coil.decode coil.drawable","title":"Packages"},{"location":"api/coil-gif/#index","text":"All Types","title":"Index"},{"location":"api/coil-gif/alltypes/","text":"All Types Name Summary coil.decode.GifDecoder A Decoder that uses Movie to load GIFs. coil.decode.ImageDecoderDecoder A Decoder that uses ImageDecoder . This is only used to load GIF and animated WEBP images on Android P and above. coil.drawable.MovieDrawable A Drawable that supports rendering Movie s (i.e. GIFs).","title":"Home"},{"location":"api/coil-gif/alltypes/#all-types","text":"Name Summary coil.decode.GifDecoder A Decoder that uses Movie to load GIFs. coil.decode.ImageDecoderDecoder A Decoder that uses ImageDecoder . This is only used to load GIF and animated WEBP images on Android P and above. coil.drawable.MovieDrawable A Drawable that supports rendering Movie s (i.e. GIFs).","title":"All Types"},{"location":"api/coil-gif/coil.decode/","text":"coil-gif / coil.decode Package coil.decode Types Name Summary GifDecoder class GifDecoder : Decoder A Decoder that uses Movie to load GIFs. ImageDecoderDecoder class ImageDecoderDecoder : Decoder A Decoder that uses ImageDecoder . This is only used to load GIF and animated WEBP images on Android P and above.","title":"Home"},{"location":"api/coil-gif/coil.decode/#package-coildecode","text":"","title":"Package coil.decode"},{"location":"api/coil-gif/coil.decode/#types","text":"Name Summary GifDecoder class GifDecoder : Decoder A Decoder that uses Movie to load GIFs. ImageDecoderDecoder class ImageDecoderDecoder : Decoder A Decoder that uses ImageDecoder . This is only used to load GIF and animated WEBP images on Android P and above.","title":"Types"},{"location":"api/coil-gif/coil.decode/-gif-decoder/","text":"coil-gif / coil.decode / GifDecoder GifDecoder class GifDecoder : Decoder A Decoder that uses Movie to load GIFs. NOTE: Prefer using ImageDecoderDecoder on Android P and above. Constructors Name Summary init GifDecoder() A Decoder that uses Movie to load GIFs. Functions Name Summary decode suspend fun decode(pool: BitmapPool, source: BufferedSource , size: Size, options: Options): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Home"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#gifdecoder","text":"class GifDecoder : Decoder A Decoder that uses Movie to load GIFs. NOTE: Prefer using ImageDecoderDecoder on Android P and above.","title":"GifDecoder"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#constructors","text":"Name Summary init GifDecoder() A Decoder that uses Movie to load GIFs.","title":"Constructors"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#functions","text":"Name Summary decode suspend fun decode(pool: BitmapPool, source: BufferedSource , size: Size, options: Options): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-init-/","text":"coil-gif / coil.decode / GifDecoder / init init GifDecoder() A Decoder that uses Movie to load GIFs. NOTE: Prefer using ImageDecoderDecoder on Android P and above.","title":" init "},{"location":"api/coil-gif/coil.decode/-gif-decoder/-init-/#init","text":"GifDecoder() A Decoder that uses Movie to load GIFs. NOTE: Prefer using ImageDecoderDecoder on Android P and above.","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.decode/-gif-decoder/decode/","text":"coil-gif / coil.decode / GifDecoder / decode decode suspend fun decode(pool: BitmapPool, source: BufferedSource , size: Size, options: Options): DecodeResult","title":"Decode"},{"location":"api/coil-gif/coil.decode/-gif-decoder/decode/#decode","text":"suspend fun decode(pool: BitmapPool, source: BufferedSource , size: Size, options: Options): DecodeResult","title":"decode"},{"location":"api/coil-gif/coil.decode/-gif-decoder/handles/","text":"coil-gif / coil.decode / GifDecoder / handles handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Handles"},{"location":"api/coil-gif/coil.decode/-gif-decoder/handles/#handles","text":"fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"handles"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/","text":"coil-gif / coil.decode / ImageDecoderDecoder ImageDecoderDecoder class ImageDecoderDecoder : Decoder A Decoder that uses ImageDecoder . This is only used to load GIF and animated WEBP images on Android P and above. Constructors Name Summary init ImageDecoderDecoder() A Decoder that uses ImageDecoder . This is only used to load GIF and animated WEBP images on Android P and above. Functions Name Summary decode suspend fun decode(pool: BitmapPool, source: BufferedSource , size: Size, options: Options): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Home"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#imagedecoderdecoder","text":"class ImageDecoderDecoder : Decoder A Decoder that uses ImageDecoder . This is only used to load GIF and animated WEBP images on Android P and above.","title":"ImageDecoderDecoder"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#constructors","text":"Name Summary init ImageDecoderDecoder() A Decoder that uses ImageDecoder . This is only used to load GIF and animated WEBP images on Android P and above.","title":"Constructors"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#functions","text":"Name Summary decode suspend fun decode(pool: BitmapPool, source: BufferedSource , size: Size, options: Options): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-init-/","text":"coil-gif / coil.decode / ImageDecoderDecoder / init init ImageDecoderDecoder() A Decoder that uses ImageDecoder . This is only used to load GIF and animated WEBP images on Android P and above.","title":" init "},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-init-/#init","text":"ImageDecoderDecoder() A Decoder that uses ImageDecoder . This is only used to load GIF and animated WEBP images on Android P and above.","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/decode/","text":"coil-gif / coil.decode / ImageDecoderDecoder / decode decode suspend fun decode(pool: BitmapPool, source: BufferedSource , size: Size, options: Options): DecodeResult","title":"Decode"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/decode/#decode","text":"suspend fun decode(pool: BitmapPool, source: BufferedSource , size: Size, options: Options): DecodeResult","title":"decode"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/handles/","text":"coil-gif / coil.decode / ImageDecoderDecoder / handles handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Handles"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/handles/#handles","text":"fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"handles"},{"location":"api/coil-gif/coil.drawable/","text":"coil-gif / coil.drawable Package coil.drawable Types Name Summary MovieDrawable class MovieDrawable : Drawable , Animatable A Drawable that supports rendering Movie s (i.e. GIFs).","title":"Home"},{"location":"api/coil-gif/coil.drawable/#package-coildrawable","text":"","title":"Package coil.drawable"},{"location":"api/coil-gif/coil.drawable/#types","text":"Name Summary MovieDrawable class MovieDrawable : Drawable , Animatable A Drawable that supports rendering Movie s (i.e. GIFs).","title":"Types"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/","text":"coil-gif / coil.drawable / MovieDrawable MovieDrawable class MovieDrawable : Drawable , Animatable A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on Android P and above. Constructors Name Summary init MovieDrawable(movie: Movie , config: Config , scale: Scale, pool: BitmapPool) A Drawable that supports rendering Movie s (i.e. GIFs). Functions Name Summary draw fun draw(canvas: Canvas ): Unit getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit start fun start(): Unit stop fun stop(): Unit","title":"Home"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#moviedrawable","text":"class MovieDrawable : Drawable , Animatable A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on Android P and above.","title":"MovieDrawable"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#constructors","text":"Name Summary init MovieDrawable(movie: Movie , config: Config , scale: Scale, pool: BitmapPool) A Drawable that supports rendering Movie s (i.e. GIFs).","title":"Constructors"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#functions","text":"Name Summary draw fun draw(canvas: Canvas ): Unit getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit start fun start(): Unit stop fun stop(): Unit","title":"Functions"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/-init-/","text":"coil-gif / coil.drawable / MovieDrawable / init init MovieDrawable(movie: Movie , config: Config , scale: Scale, pool: BitmapPool) A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on Android P and above.","title":" init "},{"location":"api/coil-gif/coil.drawable/-movie-drawable/-init-/#init","text":"MovieDrawable(movie: Movie , config: Config , scale: Scale, pool: BitmapPool) A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on Android P and above.","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/draw/","text":"coil-gif / coil.drawable / MovieDrawable / draw draw fun draw(canvas: Canvas ): Unit","title":"Draw"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/draw/#draw","text":"fun draw(canvas: Canvas ): Unit","title":"draw"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-height/","text":"coil-gif / coil.drawable / MovieDrawable / getIntrinsicHeight getIntrinsicHeight fun getIntrinsicHeight(): Int","title":"Get intrinsic height"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-height/#getintrinsicheight","text":"fun getIntrinsicHeight(): Int","title":"getIntrinsicHeight"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-width/","text":"coil-gif / coil.drawable / MovieDrawable / getIntrinsicWidth getIntrinsicWidth fun getIntrinsicWidth(): Int","title":"Get intrinsic width"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-width/#getintrinsicwidth","text":"fun getIntrinsicWidth(): Int","title":"getIntrinsicWidth"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-opacity/","text":"coil-gif / coil.drawable / MovieDrawable / getOpacity getOpacity fun getOpacity(): Int","title":"Get opacity"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-opacity/#getopacity","text":"fun getOpacity(): Int","title":"getOpacity"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/is-running/","text":"coil-gif / coil.drawable / MovieDrawable / isRunning isRunning fun isRunning(): Boolean","title":"Is running"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/is-running/#isrunning","text":"fun isRunning(): Boolean","title":"isRunning"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/on-bounds-change/","text":"coil-gif / coil.drawable / MovieDrawable / onBoundsChange onBoundsChange protected fun onBoundsChange(bounds: Rect ): Unit","title":"On bounds change"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/on-bounds-change/#onboundschange","text":"protected fun onBoundsChange(bounds: Rect ): Unit","title":"onBoundsChange"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-alpha/","text":"coil-gif / coil.drawable / MovieDrawable / setAlpha setAlpha fun setAlpha(alpha: Int ): Unit","title":"Set alpha"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-alpha/#setalpha","text":"fun setAlpha(alpha: Int ): Unit","title":"setAlpha"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-color-filter/","text":"coil-gif / coil.drawable / MovieDrawable / setColorFilter setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"Set color filter"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-color-filter/#setcolorfilter","text":"fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"setColorFilter"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/start/","text":"coil-gif / coil.drawable / MovieDrawable / start start fun start(): Unit","title":"Start"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/start/#start","text":"fun start(): Unit","title":"start"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/stop/","text":"coil-gif / coil.drawable / MovieDrawable / stop stop fun stop(): Unit","title":"Stop"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/stop/#stop","text":"fun stop(): Unit","title":"stop"}]}