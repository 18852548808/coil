{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An image loading library for Android backed by Kotlin Coroutines. Coil is: Fast : Coil performs a number of optimizations including memory and disk caching, downsampling the image in memory, re-using Bitmaps, automatically pausing/cancelling requests, and more. Lightweight : Coil adds ~1500 methods to your APK (for apps that already use OkHttp and Coroutines), which is comparable to Picasso and significantly less than Glide and Fresco. Easy to use : Coil's API leverages Kotlin's language features for simplicity and minimal boilerplate. Modern : Coil is Kotlin-first and uses modern libraries including Coroutines, OkHttp, Okio, and AndroidX Lifecycles. Coil is an acronym for: Co routine I mage L oader. Made with \u2764\ufe0f at Instacart . Translations: \ud55c\uad6d\uc5b4 Download Coil is available on mavenCentral() . implementation ( io.coil-kt:coil:0.9.4 ) Quick Start To load an image into an ImageView , use the load extension function: // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... Requests can be configured with an optional trailing lambda: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } To get an image imperatively, use the get suspend function: val drawable = Coil . get ( https://www.example.com/image.jpg ) Coil requires Java 8 bytecode. Here's how to enable it . Requirements AndroidX Min SDK 14+ Compile SDK: 29+ Java 8+ R8 / Proguard Coil is fully compatible with R8 out of the box and doesn't require adding any extra rules. If you use Proguard, you may need to add rules for Coroutines , OkHttp and Okio . License Copyright 2020 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#download","text":"Coil is available on mavenCentral() . implementation ( io.coil-kt:coil:0.9.4 )","title":"Download"},{"location":"#quick-start","text":"To load an image into an ImageView , use the load extension function: // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... Requests can be configured with an optional trailing lambda: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } To get an image imperatively, use the get suspend function: val drawable = Coil . get ( https://www.example.com/image.jpg ) Coil requires Java 8 bytecode. Here's how to enable it .","title":"Quick Start"},{"location":"#requirements","text":"AndroidX Min SDK 14+ Compile SDK: 29+ Java 8+","title":"Requirements"},{"location":"#r8-proguard","text":"Coil is fully compatible with R8 out of the box and doesn't require adding any extra rules. If you use Proguard, you may need to add rules for Coroutines , OkHttp and Okio .","title":"R8 / Proguard"},{"location":"#license","text":"Copyright 2020 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"README-ko/","text":"Coil\uc740 Android \ubc31\uc564\ub4dc\ub97c \uc704\ud574 Kotlin Coroutines\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \uc774\ubbf8\uc9c0 \ub85c\ub529 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. Coil \uc740: \ube60\ub974\ub2e4 : Coil\uc740 \uba54\ubaa8\ub9ac\uc640 \ub514\uc2a4\ud06c \uce90\uc2f1, \uba54\ubaa8\ub9ac\uc758 \uc774\ubbf8\uc9c0 \ub2e4\uc6b4 \uc0d8\ud50c\ub9c1, Bitmap \uc7ac\uc0ac\uc6a9, \uc790\ub3d9 \uc694\uccad\uc0ac\ud56d \uc77c\uc2dc\uc815\uc9c0/\ucde8\uc18c \ub4f1\uc758 \uc218\ub9ce\uc740 \ucd5c\uc801\ud654\ub97c \uc218\ud589\ud569\ub2c8\ub2e4. \uac00\ubccd\ub2e4 : Coil\uc740 \ucd5c\ub301 1500\uac1c\uc758 method\ub4e4\uc744 APK\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4 OkHttp\uc640 Coroutines\uc744 \uc774\ubbf8 \uc0ac\uc6a9 \uc911\uc778 \uc571), \uc774\ub294 Picasso \ube44\uc2b7\ud55c \uc218\uc900\uc774\uba70 Glide\uc640 Fresco. \ubcf4\ub2e4\ub294 \uc801\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4 : Coil\uc758 API\ub294 \uc2ec\ud50c\ud568\uacfc \ucd5c\uc18c\ud55c\uc758 boilerplate\ub97c \uc704\ud574 Kotlin\uc758 \uc5b8\uc5b4 \uae30\ub2a5\uc744 \ud65c\uc6a9\ud569\ub2c8\ub2e4. \ud604\ub300\uc801\uc774\ub2e4 : Coil\uc740 Kotlin \uc6b0\uc120\uc774\uba70 Coroutines, OkHttp, Okio, AndroidX Lifecycles\ub4f1\uc758 \ucd5c\uc2e0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. Coil\uc740: Co routine I mage L oader\uc758 \uc57d\uc790\uc785\ub2c8\ub2e4. \u2764\ufe0f Instacart \uc5d0\uc11c \u2764\ufe0f\uc73c\ub85c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc6b4\ub85c\ub4dc Coil\uc740 mavenCentral() \ub85c \uc774\uc6a9 \uac00\ub2a5\ud569\ub2c8\ub2e4. implementation ( io.coil-kt:coil:0.9.4 ) \ube60\ub978 \uc2dc\uc791 ImageView \uc5d0 \uc774\ubbf8\uc9c0\ub97c \ubd88\ub7ec\uc624\uae30 \uc704\ud574, load Extension functions\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... Requests\ub294 \ucd94\uac00\uc801\uc778 trailing lambda\uc2dd \uc73c\ub85c \uad6c\uc131\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } \uc774\ubbf8\uc9c0\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uac00\uc838\uc624\uae30 \uc704\ud574\uc11c, get suspend function\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4: val drawable = Coil . get ( https://www.example.com/image.jpg ) Coil's \uc804\uccb4 \ubb38\uc11c \ub97c \uc5ec\uae30\uc11c \ud655\uc778\ud558\uc138\uc694. \uc694\uad6c\uc0ac\ud56d AndroidX Min SDK 14+ Compile SDK: 29+ Java 8+ R8 / Proguard Coil\uc740 \ubcc4\ub3c4\uc758 \uc124\uc815 \uc5c6\uc774 R8\uacfc \uc644\ubcbd\ud558\uac8c \ud638\ud658 \uac00\ub2a5\ud558\uba70 \ucd94\uac00 \uaddc\uce59\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Proguard\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, Coroutines , OkHttp , Okio \uc5d0 \uaddc\uce59\uc744 \ucd94\uac00\ud560 \ud544\uc694\uac00 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub77c\uc774\uc120\uc2a4 Copyright 2020 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"README ko"},{"location":"README-ko/#_1","text":"Coil\uc740 mavenCentral() \ub85c \uc774\uc6a9 \uac00\ub2a5\ud569\ub2c8\ub2e4. implementation ( io.coil-kt:coil:0.9.4 )","title":"\ub2e4\uc6b4\ub85c\ub4dc"},{"location":"README-ko/#_2","text":"ImageView \uc5d0 \uc774\ubbf8\uc9c0\ub97c \ubd88\ub7ec\uc624\uae30 \uc704\ud574, load Extension functions\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... Requests\ub294 \ucd94\uac00\uc801\uc778 trailing lambda\uc2dd \uc73c\ub85c \uad6c\uc131\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } \uc774\ubbf8\uc9c0\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uac00\uc838\uc624\uae30 \uc704\ud574\uc11c, get suspend function\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4: val drawable = Coil . get ( https://www.example.com/image.jpg ) Coil's \uc804\uccb4 \ubb38\uc11c \ub97c \uc5ec\uae30\uc11c \ud655\uc778\ud558\uc138\uc694.","title":"\ube60\ub978 \uc2dc\uc791"},{"location":"README-ko/#_3","text":"AndroidX Min SDK 14+ Compile SDK: 29+ Java 8+","title":"\uc694\uad6c\uc0ac\ud56d"},{"location":"README-ko/#r8-proguard","text":"Coil\uc740 \ubcc4\ub3c4\uc758 \uc124\uc815 \uc5c6\uc774 R8\uacfc \uc644\ubcbd\ud558\uac8c \ud638\ud658 \uac00\ub2a5\ud558\uba70 \ucd94\uac00 \uaddc\uce59\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Proguard\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, Coroutines , OkHttp , Okio \uc5d0 \uaddc\uce59\uc744 \ucd94\uac00\ud560 \ud544\uc694\uac00 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"R8 / Proguard"},{"location":"README-ko/#_4","text":"Copyright 2020 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"\ub77c\uc774\uc120\uc2a4"},{"location":"changelog/","text":"Changelog [0.9.4] - February 3, 2020 Fix: Respect aspect ratio when downsampling in ImageDecoderDecoder. Thanks @zhanghai. Previously bitmaps would be returned from the memory cache as long as their config was greater than or equal to the config specified in the request. For example, if you requested an ARGB_8888 bitmap, it would be possible to have a RGBA_F16 bitmap returned to you from the memory cache. Now, the cached config and the requested config must be equal. Make scale and durationMillis public in CrossfadeDrawable and CrossfadeTransition . [0.9.3] - February 1, 2020 Fix: Translate child drawable inside ScaleDrawable to ensure it is centered. Fix: Fix case where GIFs and SVGs would not fill bounds completely. Defer calling HttpUrl.get() to background thread. Improve BitmapFactory null bitmap error message. Add 3 devices to hardware bitmap blacklist. ( #264 ) Update AndroidX dependencies: androidx.lifecycle:lifecycle-common-java8 - 2.2.0 [0.9.2] - January 19, 2020 Fix: Fix decoding GIFs on pre-API 19. Thanks @mario. Fix: Fix rasterized vector drawables not being marked as sampled. Fix: Throw exception if Movie dimensions are = 0. Fix: Fix CrossfadeTransition not being resumed for a memory cache event. Fix: Prevent returning hardware bitmaps to all target methods if disallowed. Fix: Fix MovieDrawable not positioning itself in the center of its bounds. Remove automatic scaling from CrossfadeDrawable. Make BitmapPool.trimMemory public. Wrap AnimatedImageDrawable in a ScaleDrawable to ensure it fills its bounds. Add @JvmOverloads to RequestBuilder.setParameter. Set an SVG's view box to its size if the view box is not set. Pass state and level changes to CrossfadeDrawable children. Update OkHttp to 3.12.8. [0.9.1] - December 30, 2019 Fix: Fix crash when calling LoadRequestBuilder.crossfade(false) . [0.9.0] - December 30, 2019 Breaking : Transformation.transform now includes a Size parameter. This is to support transformations that change the size of the output Bitmap based on the size of the Target . Requests with transformations are now also exempt from image sampling . Breaking : Transformation s are now applied to any type of Drawable . Before, Transformation s would be skipped if the input Drawable was not a BitmapDrawable . Now, Drawable s are rendered to a Bitmap before applying the Transformation s. Breaking : Passing null data to ImageLoader.load is now treated as an error and calls Target.onError and Request.Listener.onError with a NullRequestDataException . This change was made to support setting a fallback drawable if data is null . Previously the request was silently ignored. Breaking : RequestDisposable.isDisposed is now a val . New : Support for custom transitions. See here for more info . Transitions are marked as experimental as the API is incubating. New : Add RequestDisposable.await to support suspending while a LoadRequest is in progress. New : Support setting a fallback drawable when request data is null. New : Add Precision . This makes the size of the output Drawable exact while enabling scaling optimizations for targets that support scaling (e.g. ImageViewTarget ). See its documentation for more information. New : Add RequestBuilder.aliasKeys to support matching multiple cache keys. Fix: Make RequestDisposable thread safe. Fix: RoundedCornersTransformation now crops to the size of the target then rounds the corners. Fix: CircleCropTransformation now crops from the center. Fix: Add several devices to the hardware bitmap blacklist . Fix: Preserve aspect ratio when converting a Drawable to a Bitmap. Fix: Fix possible memory cache miss with Scale.FIT . Fix: Ensure Parameters iteration order is deterministic. Fix: Defensive copy when creating Parameters and ComponentRegistry. Fix: Ensure RealBitmapPool's maxSize = 0. Fix: Show the start drawable if CrossfadeDrawable is not animating or done. Fix: Adjust CrossfadeDrawable to account for children with undefined intrinsic size. Fix: Fix MovieDrawable not scaling properly. Update Kotlin to 1.3.61. Update Kotlin Coroutines to 1.3.3. Update Okio to 2.4.3. Update AndroidX dependencies: androidx.exifinterface:exifinterface - 1.1.0 [0.8.0] - October 22, 2019 Breaking : SvgDrawable has been removed. Instead, SVGs are now prerendered to BitmapDrawable s by SvgDecoder . This makes SVGs significantly less expensive to render on the main thread . Also SvgDecoder now requires a Context in its constructor. Breaking : SparseIntArraySet extension functions have moved to the coil.extension package. New : Support setting per-request network headers. See here for more info . New : Add new Parameters API to support passing custom data through the image pipeline. New : Support individual corner radii in RoundedCornersTransformation. Thanks @khatv911. New : Add ImageView.clear() to support proactively freeing resources. New : Support loading resources from other packages. New : Add subtractPadding attribute to ViewSizeResolver to enable/disable subtracting a view's padding when measuring. New : Improve HttpUrlFetcher MIME type detection. New : Add Animatable2Compat support to MovieDrawable and CrossfadeDrawable. New : Add RequestBuilder * .repeatCount to set the repeat count for a GIF. New : Add BitmapPool creation to the public API. New : Annotate Request.Listener methods with @MainThread . Fix: Make CoilContentProvider visible for testing. Fix: Include night mode in the resource cache key. Fix: Work around ImageDecoder native crash by temporarily writing the source to disk. Fix: Correctly handle contact display photo uris. Fix: Pass tint to CrossfadeDrawable's children. Fix: Fix several instances of not closing sources. Fix: Add a blacklist of devices with broken/incomplete hardware bitmap implementations. Compile against SDK 29. Update Kotlin Coroutines to 1.3.2. Update OkHttp to 3.12.6. Update Okio to 2.4.1. Change appcompat-resources from compileOnly to implementation for coil-base . [0.7.0] - September 8, 2019 Breaking : ImageLoaderBuilder.okHttpClient(OkHttpClient.Builder.() - Unit) is now ImageLoaderBuilder.okHttpClient(() - OkHttpClient) . The initializer is also now called lazily on a background thread. If you set a custom OkHttpClient you must set OkHttpClient.cache to enable disk caching. If you don't set a custom OkHttpClient , Coil will create the default OkHttpClient which has disk caching enabled. The default Coil cache can be created using CoilUtils.createDefaultCache(context) . e.g.: val imageLoader = ImageLoader ( context ) { okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } } Breaking : Fetcher.key no longer has a default implementation. Breaking : Previously, only the first applicable Mapper would be called. Now, all applicable Mapper s will be called. No API changes. Breaking : Minor named parameter renaming: url - uri , factory - initializer . New : coil-svg artifact, which has an SvgDecoder that supports automatically decoding SVGs. Powered by AndroidSVG . Thanks @rharter. New : load(String) and get(String) now accept any of the supported Uri schemes. e.g. You can now do imageView.load(\"file:///path/to/file.jpg\") . New : Refactor ImageLoader to use Call.Factory instead of OkHttpClient . This allows lazy initialization of the networking resources using ImageLoaderBuilder.okHttpClient { OkHttpClient() } . Thanks @ZacSweers. New : RequestBuilder.decoder to explicitly set the decoder for a request. New : ImageLoaderBuilder.allowHardware to enable/disable hardware bitmaps by default for an ImageLoader. New : Support software rendering in ImageDecoderDecoder. Fix: Multiple bugs with loading vector drawables. Fix: Support WRAP_CONTENT View dimensions. Fix: Support parsing EXIF data longer than 8192 bytes. Fix: Don't stretch drawables with different aspect ratios when crossfading. Fix: Guard against network observer failing to register due to exception. Fix: Fix divide by zero error in MovieDrawable. Thanks @R12rus. Fix: Support nested Android asset files. Thanks @JaCzekanski. Fix: Guard against running out of file descriptors on Android O and O_MR1. Fix: Don't crash when disabling memory cache. Thanks @hansenji. Fix: Ensure Target.cancel is always called from the main thread. Update Kotlin to 1.3.50. Update Kotlin Coroutines to 1.3.0. Update OkHttp to 3.12.4. Update Okio to 2.4.0. Update AndroidX dependencies to the latest stable versions: androidx.appcompat:appcompat - 1.1.0 androidx.core:core-ktx - 1.1.0 androidx.lifecycle:lifecycle-common-java8 - 2.1.0 Replace appcompat with appcompat-resources as an optional compileOnly dependency. appcompat-resources is a much smaller artifact. [0.6.1] - August 16, 2019 New: Add transformations(List Transformation ) to RequestBuilder. Fix: Add the last modified date to the cache key for file uris. Fix: Ensure View dimensions are evaluated to at least 1px. Fix: Clear MovieDrawable's canvas between frames. Fix: Open assets correctly. [0.6.0] - August 12, 2019 Initial release.","title":"Change Log"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#094-february-3-2020","text":"Fix: Respect aspect ratio when downsampling in ImageDecoderDecoder. Thanks @zhanghai. Previously bitmaps would be returned from the memory cache as long as their config was greater than or equal to the config specified in the request. For example, if you requested an ARGB_8888 bitmap, it would be possible to have a RGBA_F16 bitmap returned to you from the memory cache. Now, the cached config and the requested config must be equal. Make scale and durationMillis public in CrossfadeDrawable and CrossfadeTransition .","title":"[0.9.4] - February 3, 2020"},{"location":"changelog/#093-february-1-2020","text":"Fix: Translate child drawable inside ScaleDrawable to ensure it is centered. Fix: Fix case where GIFs and SVGs would not fill bounds completely. Defer calling HttpUrl.get() to background thread. Improve BitmapFactory null bitmap error message. Add 3 devices to hardware bitmap blacklist. ( #264 ) Update AndroidX dependencies: androidx.lifecycle:lifecycle-common-java8 - 2.2.0","title":"[0.9.3] - February 1, 2020"},{"location":"changelog/#092-january-19-2020","text":"Fix: Fix decoding GIFs on pre-API 19. Thanks @mario. Fix: Fix rasterized vector drawables not being marked as sampled. Fix: Throw exception if Movie dimensions are = 0. Fix: Fix CrossfadeTransition not being resumed for a memory cache event. Fix: Prevent returning hardware bitmaps to all target methods if disallowed. Fix: Fix MovieDrawable not positioning itself in the center of its bounds. Remove automatic scaling from CrossfadeDrawable. Make BitmapPool.trimMemory public. Wrap AnimatedImageDrawable in a ScaleDrawable to ensure it fills its bounds. Add @JvmOverloads to RequestBuilder.setParameter. Set an SVG's view box to its size if the view box is not set. Pass state and level changes to CrossfadeDrawable children. Update OkHttp to 3.12.8.","title":"[0.9.2] - January 19, 2020"},{"location":"changelog/#091-december-30-2019","text":"Fix: Fix crash when calling LoadRequestBuilder.crossfade(false) .","title":"[0.9.1] - December 30, 2019"},{"location":"changelog/#090-december-30-2019","text":"Breaking : Transformation.transform now includes a Size parameter. This is to support transformations that change the size of the output Bitmap based on the size of the Target . Requests with transformations are now also exempt from image sampling . Breaking : Transformation s are now applied to any type of Drawable . Before, Transformation s would be skipped if the input Drawable was not a BitmapDrawable . Now, Drawable s are rendered to a Bitmap before applying the Transformation s. Breaking : Passing null data to ImageLoader.load is now treated as an error and calls Target.onError and Request.Listener.onError with a NullRequestDataException . This change was made to support setting a fallback drawable if data is null . Previously the request was silently ignored. Breaking : RequestDisposable.isDisposed is now a val . New : Support for custom transitions. See here for more info . Transitions are marked as experimental as the API is incubating. New : Add RequestDisposable.await to support suspending while a LoadRequest is in progress. New : Support setting a fallback drawable when request data is null. New : Add Precision . This makes the size of the output Drawable exact while enabling scaling optimizations for targets that support scaling (e.g. ImageViewTarget ). See its documentation for more information. New : Add RequestBuilder.aliasKeys to support matching multiple cache keys. Fix: Make RequestDisposable thread safe. Fix: RoundedCornersTransformation now crops to the size of the target then rounds the corners. Fix: CircleCropTransformation now crops from the center. Fix: Add several devices to the hardware bitmap blacklist . Fix: Preserve aspect ratio when converting a Drawable to a Bitmap. Fix: Fix possible memory cache miss with Scale.FIT . Fix: Ensure Parameters iteration order is deterministic. Fix: Defensive copy when creating Parameters and ComponentRegistry. Fix: Ensure RealBitmapPool's maxSize = 0. Fix: Show the start drawable if CrossfadeDrawable is not animating or done. Fix: Adjust CrossfadeDrawable to account for children with undefined intrinsic size. Fix: Fix MovieDrawable not scaling properly. Update Kotlin to 1.3.61. Update Kotlin Coroutines to 1.3.3. Update Okio to 2.4.3. Update AndroidX dependencies: androidx.exifinterface:exifinterface - 1.1.0","title":"[0.9.0] - December 30, 2019"},{"location":"changelog/#080-october-22-2019","text":"Breaking : SvgDrawable has been removed. Instead, SVGs are now prerendered to BitmapDrawable s by SvgDecoder . This makes SVGs significantly less expensive to render on the main thread . Also SvgDecoder now requires a Context in its constructor. Breaking : SparseIntArraySet extension functions have moved to the coil.extension package. New : Support setting per-request network headers. See here for more info . New : Add new Parameters API to support passing custom data through the image pipeline. New : Support individual corner radii in RoundedCornersTransformation. Thanks @khatv911. New : Add ImageView.clear() to support proactively freeing resources. New : Support loading resources from other packages. New : Add subtractPadding attribute to ViewSizeResolver to enable/disable subtracting a view's padding when measuring. New : Improve HttpUrlFetcher MIME type detection. New : Add Animatable2Compat support to MovieDrawable and CrossfadeDrawable. New : Add RequestBuilder * .repeatCount to set the repeat count for a GIF. New : Add BitmapPool creation to the public API. New : Annotate Request.Listener methods with @MainThread . Fix: Make CoilContentProvider visible for testing. Fix: Include night mode in the resource cache key. Fix: Work around ImageDecoder native crash by temporarily writing the source to disk. Fix: Correctly handle contact display photo uris. Fix: Pass tint to CrossfadeDrawable's children. Fix: Fix several instances of not closing sources. Fix: Add a blacklist of devices with broken/incomplete hardware bitmap implementations. Compile against SDK 29. Update Kotlin Coroutines to 1.3.2. Update OkHttp to 3.12.6. Update Okio to 2.4.1. Change appcompat-resources from compileOnly to implementation for coil-base .","title":"[0.8.0] - October 22, 2019"},{"location":"changelog/#070-september-8-2019","text":"Breaking : ImageLoaderBuilder.okHttpClient(OkHttpClient.Builder.() - Unit) is now ImageLoaderBuilder.okHttpClient(() - OkHttpClient) . The initializer is also now called lazily on a background thread. If you set a custom OkHttpClient you must set OkHttpClient.cache to enable disk caching. If you don't set a custom OkHttpClient , Coil will create the default OkHttpClient which has disk caching enabled. The default Coil cache can be created using CoilUtils.createDefaultCache(context) . e.g.: val imageLoader = ImageLoader ( context ) { okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } } Breaking : Fetcher.key no longer has a default implementation. Breaking : Previously, only the first applicable Mapper would be called. Now, all applicable Mapper s will be called. No API changes. Breaking : Minor named parameter renaming: url - uri , factory - initializer . New : coil-svg artifact, which has an SvgDecoder that supports automatically decoding SVGs. Powered by AndroidSVG . Thanks @rharter. New : load(String) and get(String) now accept any of the supported Uri schemes. e.g. You can now do imageView.load(\"file:///path/to/file.jpg\") . New : Refactor ImageLoader to use Call.Factory instead of OkHttpClient . This allows lazy initialization of the networking resources using ImageLoaderBuilder.okHttpClient { OkHttpClient() } . Thanks @ZacSweers. New : RequestBuilder.decoder to explicitly set the decoder for a request. New : ImageLoaderBuilder.allowHardware to enable/disable hardware bitmaps by default for an ImageLoader. New : Support software rendering in ImageDecoderDecoder. Fix: Multiple bugs with loading vector drawables. Fix: Support WRAP_CONTENT View dimensions. Fix: Support parsing EXIF data longer than 8192 bytes. Fix: Don't stretch drawables with different aspect ratios when crossfading. Fix: Guard against network observer failing to register due to exception. Fix: Fix divide by zero error in MovieDrawable. Thanks @R12rus. Fix: Support nested Android asset files. Thanks @JaCzekanski. Fix: Guard against running out of file descriptors on Android O and O_MR1. Fix: Don't crash when disabling memory cache. Thanks @hansenji. Fix: Ensure Target.cancel is always called from the main thread. Update Kotlin to 1.3.50. Update Kotlin Coroutines to 1.3.0. Update OkHttp to 3.12.4. Update Okio to 2.4.0. Update AndroidX dependencies to the latest stable versions: androidx.appcompat:appcompat - 1.1.0 androidx.core:core-ktx - 1.1.0 androidx.lifecycle:lifecycle-common-java8 - 2.1.0 Replace appcompat with appcompat-resources as an optional compileOnly dependency. appcompat-resources is a much smaller artifact.","title":"[0.7.0] - September 8, 2019"},{"location":"changelog/#061-august-16-2019","text":"New: Add transformations(List Transformation ) to RequestBuilder. Fix: Add the last modified date to the cache key for file uris. Fix: Ensure View dimensions are evaluated to at least 1px. Fix: Clear MovieDrawable's canvas between frames. Fix: Open assets correctly.","title":"[0.6.1] - August 16, 2019"},{"location":"changelog/#060-august-12-2019","text":"Initial release.","title":"[0.6.0] - August 12, 2019"},{"location":"code_of_conduct/","text":"Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colin colinwhite.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colin colinwhite.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing In an effort to keep the library small and stable, please keep contributions limited to bug fixes, documentation improvements, and test improvements. Issues that are tagged as help wanted are great issues to get started contributing to Coil. If you have a new feature idea, please create an enhancement request so it can be discussed or build it in an external library. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code passes all tests by running ./test.sh . Modified from OkHttp's Contributing section.","title":"Contributing"},{"location":"contributing/#contributing","text":"In an effort to keep the library small and stable, please keep contributions limited to bug fixes, documentation improvements, and test improvements. Issues that are tagged as help wanted are great issues to get started contributing to Coil. If you have a new feature idea, please create an enhancement request so it can be discussed or build it in an external library. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code passes all tests by running ./test.sh . Modified from OkHttp's Contributing section.","title":"Contributing"},{"location":"faq/","text":"FAQ Have a question that isn't part of the FAQ? Check StackOverflow with the tag #coil or search our Github issues . Can Coil be used with Java projects or mixed Kotlin/Java projects? Yes! Read here . How do I preload an image? Read here . How do I set up disk caching? Read here . How do I get development snapshots? Add the snapshots repository to your list of repositories: Gradle ( .gradle ): allprojects { repositories { maven { url https://oss.sonatype.org/content/repositories/snapshots/ } } } Gradle Kotlin DSL ( .gradle.kts ): allprojects { repositories { maven ( https://oss.sonatype.org/content/repositories/snapshots ) } } Then depend on the same artifacts with the latest snapshot version . Note Snapshots are deployed for each new commit on master that passes CI. They can potentially contain breaking changes or may be unstable. Use at your own risk.","title":"FAQ"},{"location":"faq/#faq","text":"Have a question that isn't part of the FAQ? Check StackOverflow with the tag #coil or search our Github issues .","title":"FAQ"},{"location":"faq/#can-coil-be-used-with-java-projects-or-mixed-kotlinjava-projects","text":"Yes! Read here .","title":"Can Coil be used with Java projects or mixed Kotlin/Java projects?"},{"location":"faq/#how-do-i-preload-an-image","text":"Read here .","title":"How do I preload an image?"},{"location":"faq/#how-do-i-set-up-disk-caching","text":"Read here .","title":"How do I set up disk caching?"},{"location":"faq/#how-do-i-get-development-snapshots","text":"Add the snapshots repository to your list of repositories: Gradle ( .gradle ): allprojects { repositories { maven { url https://oss.sonatype.org/content/repositories/snapshots/ } } } Gradle Kotlin DSL ( .gradle.kts ): allprojects { repositories { maven ( https://oss.sonatype.org/content/repositories/snapshots ) } } Then depend on the same artifacts with the latest snapshot version . Note Snapshots are deployed for each new commit on master that passes CI. They can potentially contain breaking changes or may be unstable. Use at your own risk.","title":"How do I get development snapshots?"},{"location":"getting_started/","text":"Getting Started Artifacts Coil has 4 artifacts published to mavenCentral() : io.coil-kt:coil : The default artifact, which includes the Coil singleton. io.coil-kt:coil-base : The base artifact, which does not include the Coil singleton. Prefer this artifact if you want to use dependency injection to inject your ImageLoader instance(s). io.coil-kt:coil-gif : Includes a set of decoders to support decoding GIFs. See GIFs for more details. io.coil-kt:coil-svg : Includes a decoder to support decoding SVGs. See SVGs for more details. If you need transformations that aren't part of the base Coil artifacts, check out the 3rd-party coil-transformations artifact hosted here . Java 8 Coil requires Java 8 bytecode. To enable Java 8 desugaring by D8 add the following to your Gradle build script: Gradle ( .gradle ): android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } } tasks . withType ( org . jetbrains . kotlin . gradle . tasks . KotlinCompile ). all { kotlinOptions { jvmTarget = 1.8 } } Gradle Kotlin DSL ( .gradle.kts ): android { compileOptions { sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } } tasks . withType KotlinCompile { kotlinOptions { jvmTarget = 1.8 } } API The heart of Coil's API is the ImageLoader . ImageLoader s are service classes that execute Request objects that are passed to them. ImageLoader s expose two methods for image loading: load : Starts an asynchronous request to load the data into the Target . fun load ( request : LoadRequest ): RequestDisposable get : A suspend function, which returns a Drawable . suspend fun get ( request : GetRequest ): Drawable ImageLoaders If you're using the io.coil-kt:coil artifact, you can set a default ImageLoader instance like so: Coil . setDefaultImageLoader { ImageLoader ( context ) { crossfade ( true ) okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } } } The default ImageLoader is used for any ImageView.load calls. The best place to call setDefaultImageLoader is in your Application class. Setting a default ImageLoader is optional. If you don't set one, Coil will lazily create a default ImageLoader when needed. If you're using the io.coil-kt:coil-base artifact, you should create your own ImageLoader instance(s) and inject them throughout your app with dependency injection. Read more about dependency injection here . Note If you set a custom OkHttpClient , you must set a cache implementation or the ImageLoader will have no disk cache. A default Coil cache instance can be created using CoilUtils.createDefaultCache . Extension Functions Coil provides a set of extension functions for ImageLoader s, ImageView s, and the Coil singleton to provide type-safe methods. Here's an example for loading a URL into an ImageView : imageView . load ( https://www.example.com/image.jpg ) By default, requests are initialized with the options from DefaultRequestOptions , however each individual request can be configured with an optional trailing lambda param: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } See the docs here and here for more information. Supported Data Types The base data types that are supported by all ImageLoader instances are: String (mapped to a Uri) HttpUrl Uri ( android.resource , content , file , http , and https schemes only) File @DrawableRes Int Drawable Bitmap Preloading To preload an image into memory, execute a load request without a Target : Coil . load ( context , https://www.example.com/image.jpg ) To only preload the image into the disk cache, disable the memory cache for the request: Coil . load ( context , https://www.example.com/image.jpg ) { memoryCachePolicy ( CachePolicy . DISABLED ) } Cancelling Requests load requests will be automatically cancelled if the associated View is detached, the associated Lifecycle is destroyed, or another request is started on the same View . Furthermore, each load request returns a RequestDisposable , which can be used to check if a request is in flight or dispose the request (effectively cancelling it and freeing its associated resources): val disposable = imageView . load ( https://www.example.com/image.jpg ) // Cancel the request. disposable . dispose () get requests will only be cancelled if the coroutine context's job is cancelled. Image Sampling Suppose you have an image that is 500x500 on disk, but you only need to load it into memory at 100x100 to be displayed in a view. Coil will load the image into memory, but what happens now if you need the image at 500x500? There's still more \"quality\" to read from disk, but the image is already loaded into memory at 100x100. Ideally, we would use the 100x100 image as a placeholder while we read the image from disk at 500x500. This is exactly what Coil does and Coil handles this process automatically for all BitmapDrawables . Paired with crossfade(true) , this can create a visual effect where the image detail appears to fade in, similar to a progressive JPEG . Here's what it looks like in the sample app: Images in the list have intentionally been loaded with very low detail and the crossfade is slowed down to highlight the visual effect. Bitmap Pooling Similar to Glide and Fresco, Coil supports bitmap pooling. Bitmap pooling is a technique to re-use Bitmap objects once they are no longer in use (i.e. when a View is detached, a Fragment's view is destroyed, etc.). This can significantly improve memory performance (especially on pre-Oreo devices), however it creates several API limitations. To make this optimization as seamless and transparent to the consumer as possible, Targets must opt-in to bitmap pooling. To opt in, implement PoolableViewTarget ; this requires the target to release all references to its current Drawable when its next lifecycle method is called. See PoolableViewTarget for more information. Note Do not use ImageView.getDrawable if the ImageView 's Drawable has been set through Coil's ImageViewTarget . Instead, either load the image using a custom Target or copy underlying Bitmap using Bitmap.copy .","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#artifacts","text":"Coil has 4 artifacts published to mavenCentral() : io.coil-kt:coil : The default artifact, which includes the Coil singleton. io.coil-kt:coil-base : The base artifact, which does not include the Coil singleton. Prefer this artifact if you want to use dependency injection to inject your ImageLoader instance(s). io.coil-kt:coil-gif : Includes a set of decoders to support decoding GIFs. See GIFs for more details. io.coil-kt:coil-svg : Includes a decoder to support decoding SVGs. See SVGs for more details. If you need transformations that aren't part of the base Coil artifacts, check out the 3rd-party coil-transformations artifact hosted here .","title":"Artifacts"},{"location":"getting_started/#java-8","text":"Coil requires Java 8 bytecode. To enable Java 8 desugaring by D8 add the following to your Gradle build script: Gradle ( .gradle ): android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } } tasks . withType ( org . jetbrains . kotlin . gradle . tasks . KotlinCompile ). all { kotlinOptions { jvmTarget = 1.8 } } Gradle Kotlin DSL ( .gradle.kts ): android { compileOptions { sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } } tasks . withType KotlinCompile { kotlinOptions { jvmTarget = 1.8 } }","title":"Java 8"},{"location":"getting_started/#api","text":"The heart of Coil's API is the ImageLoader . ImageLoader s are service classes that execute Request objects that are passed to them. ImageLoader s expose two methods for image loading: load : Starts an asynchronous request to load the data into the Target . fun load ( request : LoadRequest ): RequestDisposable get : A suspend function, which returns a Drawable . suspend fun get ( request : GetRequest ): Drawable","title":"API"},{"location":"getting_started/#imageloaders","text":"If you're using the io.coil-kt:coil artifact, you can set a default ImageLoader instance like so: Coil . setDefaultImageLoader { ImageLoader ( context ) { crossfade ( true ) okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } } } The default ImageLoader is used for any ImageView.load calls. The best place to call setDefaultImageLoader is in your Application class. Setting a default ImageLoader is optional. If you don't set one, Coil will lazily create a default ImageLoader when needed. If you're using the io.coil-kt:coil-base artifact, you should create your own ImageLoader instance(s) and inject them throughout your app with dependency injection. Read more about dependency injection here . Note If you set a custom OkHttpClient , you must set a cache implementation or the ImageLoader will have no disk cache. A default Coil cache instance can be created using CoilUtils.createDefaultCache .","title":"ImageLoaders"},{"location":"getting_started/#extension-functions","text":"Coil provides a set of extension functions for ImageLoader s, ImageView s, and the Coil singleton to provide type-safe methods. Here's an example for loading a URL into an ImageView : imageView . load ( https://www.example.com/image.jpg ) By default, requests are initialized with the options from DefaultRequestOptions , however each individual request can be configured with an optional trailing lambda param: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } See the docs here and here for more information.","title":"Extension Functions"},{"location":"getting_started/#supported-data-types","text":"The base data types that are supported by all ImageLoader instances are: String (mapped to a Uri) HttpUrl Uri ( android.resource , content , file , http , and https schemes only) File @DrawableRes Int Drawable Bitmap","title":"Supported Data Types"},{"location":"getting_started/#preloading","text":"To preload an image into memory, execute a load request without a Target : Coil . load ( context , https://www.example.com/image.jpg ) To only preload the image into the disk cache, disable the memory cache for the request: Coil . load ( context , https://www.example.com/image.jpg ) { memoryCachePolicy ( CachePolicy . DISABLED ) }","title":"Preloading"},{"location":"getting_started/#cancelling-requests","text":"load requests will be automatically cancelled if the associated View is detached, the associated Lifecycle is destroyed, or another request is started on the same View . Furthermore, each load request returns a RequestDisposable , which can be used to check if a request is in flight or dispose the request (effectively cancelling it and freeing its associated resources): val disposable = imageView . load ( https://www.example.com/image.jpg ) // Cancel the request. disposable . dispose () get requests will only be cancelled if the coroutine context's job is cancelled.","title":"Cancelling Requests"},{"location":"getting_started/#image-sampling","text":"Suppose you have an image that is 500x500 on disk, but you only need to load it into memory at 100x100 to be displayed in a view. Coil will load the image into memory, but what happens now if you need the image at 500x500? There's still more \"quality\" to read from disk, but the image is already loaded into memory at 100x100. Ideally, we would use the 100x100 image as a placeholder while we read the image from disk at 500x500. This is exactly what Coil does and Coil handles this process automatically for all BitmapDrawables . Paired with crossfade(true) , this can create a visual effect where the image detail appears to fade in, similar to a progressive JPEG . Here's what it looks like in the sample app: Images in the list have intentionally been loaded with very low detail and the crossfade is slowed down to highlight the visual effect.","title":"Image Sampling"},{"location":"getting_started/#bitmap-pooling","text":"Similar to Glide and Fresco, Coil supports bitmap pooling. Bitmap pooling is a technique to re-use Bitmap objects once they are no longer in use (i.e. when a View is detached, a Fragment's view is destroyed, etc.). This can significantly improve memory performance (especially on pre-Oreo devices), however it creates several API limitations. To make this optimization as seamless and transparent to the consumer as possible, Targets must opt-in to bitmap pooling. To opt in, implement PoolableViewTarget ; this requires the target to release all references to its current Drawable when its next lifecycle method is called. See PoolableViewTarget for more information. Note Do not use ImageView.getDrawable if the ImageView 's Drawable has been set through Coil's ImageViewTarget . Instead, either load the image using a custom Target or copy underlying Bitmap using Bitmap.copy .","title":"Bitmap Pooling"},{"location":"gifs/","text":"Gifs Unlike Glide, GIFs are not supported by default. However, Coil has an extension library to support them. To add GIF support, import the extension library: implementation ( io.coil-kt:coil-gif:0.9.4 ) And add the decoders to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader ( context ) { componentRegistry { if ( SDK_INT = P ) { add ( ImageDecoderDecoder ()) } else { add ( GifDecoder ()) } } } And that's it! The ImageLoader will automatically detect any GIFs using their file headers and decode them correctly. Note Coil includes two separate decoders to support decoding GIFs. GifDecoder supports all API levels, but is slower. ImageDecoderDecoder is powered by Android's new ImageDecoder API which is only available on Android P and above. ImageDecoderDecoder is faster than GifDecoder and also supports decoding animated WebP images.","title":"GIFs"},{"location":"gifs/#gifs","text":"Unlike Glide, GIFs are not supported by default. However, Coil has an extension library to support them. To add GIF support, import the extension library: implementation ( io.coil-kt:coil-gif:0.9.4 ) And add the decoders to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader ( context ) { componentRegistry { if ( SDK_INT = P ) { add ( ImageDecoderDecoder ()) } else { add ( GifDecoder ()) } } } And that's it! The ImageLoader will automatically detect any GIFs using their file headers and decode them correctly. Note Coil includes two separate decoders to support decoding GIFs. GifDecoder supports all API levels, but is slower. ImageDecoderDecoder is powered by Android's new ImageDecoder API which is only available on Android P and above. ImageDecoderDecoder is faster than GifDecoder and also supports decoding animated WebP images.","title":"Gifs"},{"location":"image_loaders/","text":"Image Loaders Image Loaders are service objects that handle image requests with load and get . They handle caching, image decoding, request management, bitmap pooling, memory management, and more. New instances can be created like so: val imageLoader = ImageLoader ( context ) Similar to Requests , ImageLoader s can be configured with an optional trailing lambda param: val imageLoader = ImageLoader ( context ) { availableMemoryPercentage ( 0.5 ) bitmapPoolPercentage ( 0.5 ) crossfade ( true ) } Internally, this constructs a RealImageLoader using ImageLoaderBuilder . If you're using the Coil singleton, you can then replace its ImageLoader instance with Coil.setDefaultImageLoader . The best place to set the default ImageLoader is in your Application class. Caching Each Image Loader keeps a memory cache of recently loaded BitmapDrawable s as well as a reusable pool of Bitmap s. Coil relies on OkHttpClient to handle disk caching. By default, every ImageLoader is already set up for disk caching and will set a max cache size of between 10-250MB depending on the remaining space on the user's device. However, if you set a custom OkHttpClient , you'll need to add the disk cache yourself. To get a Cache instance that's optimized for Coil, you can use CoilUtils.createDefaultCache . Optionally, you can create your own Cache instance with a different size + location. Here's an example: val imageLoader = ImageLoader ( context ) { okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } } Singleton vs. Dependency Injection Ideally, you should construct and inject your ImageLoader instance(s) using dependency injection. This will scale well as your app grows and it is the best way to manage multiple ImageLoader instances. However, for simple use cases the io.coil-kt:coil artifact provides a default ImageLoader instance that can be accessed with Coil.loader() . Both ImageView.load and Coil.load use the default ImageLoader instance as a default parameter: inline fun ImageView . load ( url : String ?, imageLoader : ImageLoader = Coil . loader (), builder : LoadRequestBuilder .() - Unit = {} ): RequestDisposable { return imageLoader . load ( context , url ) { target ( this @load ) builder () } } The ImageView extension function can be called with a specific ImageLoader like so: imageView . load ( https://www.example.com/image.jpg , imageLoader ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } The default ImageLoader is instantiated lazily and can be replaced with Coil.setDefaultImageLoader . Note Use the io.coil-kt:coil-base artifact if you are using dependency injection. Testing ImageLoader is an interface, which you can replace with a fake implementation. For instance, you could inject a fake ImageLoader implementation which always returns the same Drawable synchronously: val fakeImageLoader = object : ImageLoader { private val drawable = ColorDrawable ( Color . BLACK ) private val disposable = object : RequestDisposable { override fun isDisposed () = true override fun dispose () {} } override val defaults = DefaultRequestOptions () override fun load ( request : LoadRequest ): RequestDisposable { // Always call onStart before onSuccess. request . target ?. onStart ( drawable ) request . target ?. onSuccess ( drawable ) return disposable } override suspend fun get ( request : GetRequest ) = drawable override fun clearMemory () {} override fun shutdown () {} } This is perfect for screenshot and instrumentation tests where you want consistent rendering behavior.","title":"Image Loaders"},{"location":"image_loaders/#image-loaders","text":"Image Loaders are service objects that handle image requests with load and get . They handle caching, image decoding, request management, bitmap pooling, memory management, and more. New instances can be created like so: val imageLoader = ImageLoader ( context ) Similar to Requests , ImageLoader s can be configured with an optional trailing lambda param: val imageLoader = ImageLoader ( context ) { availableMemoryPercentage ( 0.5 ) bitmapPoolPercentage ( 0.5 ) crossfade ( true ) } Internally, this constructs a RealImageLoader using ImageLoaderBuilder . If you're using the Coil singleton, you can then replace its ImageLoader instance with Coil.setDefaultImageLoader . The best place to set the default ImageLoader is in your Application class.","title":"Image Loaders"},{"location":"image_loaders/#caching","text":"Each Image Loader keeps a memory cache of recently loaded BitmapDrawable s as well as a reusable pool of Bitmap s. Coil relies on OkHttpClient to handle disk caching. By default, every ImageLoader is already set up for disk caching and will set a max cache size of between 10-250MB depending on the remaining space on the user's device. However, if you set a custom OkHttpClient , you'll need to add the disk cache yourself. To get a Cache instance that's optimized for Coil, you can use CoilUtils.createDefaultCache . Optionally, you can create your own Cache instance with a different size + location. Here's an example: val imageLoader = ImageLoader ( context ) { okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } }","title":"Caching"},{"location":"image_loaders/#singleton-vs-dependency-injection","text":"Ideally, you should construct and inject your ImageLoader instance(s) using dependency injection. This will scale well as your app grows and it is the best way to manage multiple ImageLoader instances. However, for simple use cases the io.coil-kt:coil artifact provides a default ImageLoader instance that can be accessed with Coil.loader() . Both ImageView.load and Coil.load use the default ImageLoader instance as a default parameter: inline fun ImageView . load ( url : String ?, imageLoader : ImageLoader = Coil . loader (), builder : LoadRequestBuilder .() - Unit = {} ): RequestDisposable { return imageLoader . load ( context , url ) { target ( this @load ) builder () } } The ImageView extension function can be called with a specific ImageLoader like so: imageView . load ( https://www.example.com/image.jpg , imageLoader ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } The default ImageLoader is instantiated lazily and can be replaced with Coil.setDefaultImageLoader . Note Use the io.coil-kt:coil-base artifact if you are using dependency injection.","title":"Singleton vs. Dependency Injection"},{"location":"image_loaders/#testing","text":"ImageLoader is an interface, which you can replace with a fake implementation. For instance, you could inject a fake ImageLoader implementation which always returns the same Drawable synchronously: val fakeImageLoader = object : ImageLoader { private val drawable = ColorDrawable ( Color . BLACK ) private val disposable = object : RequestDisposable { override fun isDisposed () = true override fun dispose () {} } override val defaults = DefaultRequestOptions () override fun load ( request : LoadRequest ): RequestDisposable { // Always call onStart before onSuccess. request . target ?. onStart ( drawable ) request . target ?. onSuccess ( drawable ) return disposable } override suspend fun get ( request : GetRequest ) = drawable override fun clearMemory () {} override fun shutdown () {} } This is perfect for screenshot and instrumentation tests where you want consistent rendering behavior.","title":"Testing"},{"location":"image_pipeline/","text":"Extending the Image Pipeline Android supports many image formats out of the box, however there are also plenty of formats it does not (e.g. GIF, SVG, TIFF, etc.) Fortunately, ImageLoaders support pluggable components to add new data types, new fetching behavior, new image encodings, or otherwise overwrite the base image loading behavior. Coil's image pipeline consists of three main parts: Mappers , Fetchers , and Decoders . Custom components must be added to the ImageLoader when constructing it through its ComponentRegistry : val imageLoader = ImageLoader ( context ) { componentRegistry { add ( ItemMapper ()) add ( ProtocolBufferFetcher ()) add ( GifDecoder ()) } } Mappers Mappers allow you to add support for custom data types. For instance, say we get this model from our server: data class Item ( val id : Int , val imageUrl : String , val price : Int , val weight : Double ) We could write a custom mapper to map it to an HttpUrl : class ItemMapper : Mapper Item , HttpUrl { override fun map ( data : Item ): HttpUrl = HttpUrl . get ( data . imageUrl ) } After registering it when constructing our ImageLoader (see above), we can safely load an Item : imageView . loadAny ( item ) loadAny is the type-unsafe version of load that accepts any data type. If you want to know a Target 's size when mapping an object, you can extend from Measured Mapper . Note Extending from Measured Mapper can prevent setting placeholders and or cached drawables synchronously, as they force Coil to wait for the target to be measured. Prefer extending Mapper if you do not need to know the Target 's size. See Mapper and Measured Mapper for more information. Fetchers Fetchers translate data into either a BufferedSource or a Drawable . See Fetcher for more information. Decoders Decoders read a BufferedSource as input and return a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.). See Decoder for more information. Note Decoders are responsible for closing the BufferedSource when finished. This allows custom decoders to return a Drawable while still reading the source. This can be useful to support file types such as progressive JPEG where there is incremental information to show.","title":"Extending the Image Pipeline"},{"location":"image_pipeline/#extending-the-image-pipeline","text":"Android supports many image formats out of the box, however there are also plenty of formats it does not (e.g. GIF, SVG, TIFF, etc.) Fortunately, ImageLoaders support pluggable components to add new data types, new fetching behavior, new image encodings, or otherwise overwrite the base image loading behavior. Coil's image pipeline consists of three main parts: Mappers , Fetchers , and Decoders . Custom components must be added to the ImageLoader when constructing it through its ComponentRegistry : val imageLoader = ImageLoader ( context ) { componentRegistry { add ( ItemMapper ()) add ( ProtocolBufferFetcher ()) add ( GifDecoder ()) } }","title":"Extending the Image Pipeline"},{"location":"image_pipeline/#mappers","text":"Mappers allow you to add support for custom data types. For instance, say we get this model from our server: data class Item ( val id : Int , val imageUrl : String , val price : Int , val weight : Double ) We could write a custom mapper to map it to an HttpUrl : class ItemMapper : Mapper Item , HttpUrl { override fun map ( data : Item ): HttpUrl = HttpUrl . get ( data . imageUrl ) } After registering it when constructing our ImageLoader (see above), we can safely load an Item : imageView . loadAny ( item ) loadAny is the type-unsafe version of load that accepts any data type. If you want to know a Target 's size when mapping an object, you can extend from Measured Mapper . Note Extending from Measured Mapper can prevent setting placeholders and or cached drawables synchronously, as they force Coil to wait for the target to be measured. Prefer extending Mapper if you do not need to know the Target 's size. See Mapper and Measured Mapper for more information.","title":"Mappers"},{"location":"image_pipeline/#fetchers","text":"Fetchers translate data into either a BufferedSource or a Drawable . See Fetcher for more information.","title":"Fetchers"},{"location":"image_pipeline/#decoders","text":"Decoders read a BufferedSource as input and return a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.). See Decoder for more information. Note Decoders are responsible for closing the BufferedSource when finished. This allows custom decoders to return a Drawable while still reading the source. This can be useful to support file types such as progressive JPEG where there is incremental information to show.","title":"Decoders"},{"location":"java_compatibility/","text":"Java Compatibility Coil's API was designed to be Kotlin-first. It leverages Kotlin language features such as inlined lambdas, receiver params, default arguments, and extension functions, which are not available in Java. Also, suspend functions cannot be implemented in Java. This means custom Transformations , Size Resolvers , Fetchers , and Decoders must be implemented in Kotlin. With these limitations in mind, here is the recommended way to execute load requests from Java: LoadRequest request = ImageLoaders . newLoadBuilder ( imageLoader , context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . target ( imageView ) . build (); imageLoader . load ( request ); If you're using the default ImageLoader , you can get it via Coil.loader() . Note You should not use the API extension functions in Java. Instead, you should create Request objects manually like above. suspend functions cannot be easily called from Java. Thus, to get an image synchronously you'll have to create a wrapper function for get : object ImageLoaderCompat { @JvmStatic @WorkerThread fun getBlocking ( imageLoader : ImageLoader , request : GetRequest ): Drawable = runBlocking { imageLoader . get ( request ) } } Then call the ImageLoaderCompat function from Java: GetRequest request = ImageLoaders . newGetBuilder ( imageLoader ) . data ( https://www.example.com/image.jpg ) . size ( 1080 , 1920 ) . build (); Drawable drawable = ImageLoaderCompat . getBlocking ( imageLoader , request ); Note ImageLoaderCompat.getBlocking will block the current thread instead of suspending. Do not call this from the main thread.","title":"Java Compatibility"},{"location":"java_compatibility/#java-compatibility","text":"Coil's API was designed to be Kotlin-first. It leverages Kotlin language features such as inlined lambdas, receiver params, default arguments, and extension functions, which are not available in Java. Also, suspend functions cannot be implemented in Java. This means custom Transformations , Size Resolvers , Fetchers , and Decoders must be implemented in Kotlin. With these limitations in mind, here is the recommended way to execute load requests from Java: LoadRequest request = ImageLoaders . newLoadBuilder ( imageLoader , context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . target ( imageView ) . build (); imageLoader . load ( request ); If you're using the default ImageLoader , you can get it via Coil.loader() . Note You should not use the API extension functions in Java. Instead, you should create Request objects manually like above. suspend functions cannot be easily called from Java. Thus, to get an image synchronously you'll have to create a wrapper function for get : object ImageLoaderCompat { @JvmStatic @WorkerThread fun getBlocking ( imageLoader : ImageLoader , request : GetRequest ): Drawable = runBlocking { imageLoader . get ( request ) } } Then call the ImageLoaderCompat function from Java: GetRequest request = ImageLoaders . newGetBuilder ( imageLoader ) . data ( https://www.example.com/image.jpg ) . size ( 1080 , 1920 ) . build (); Drawable drawable = ImageLoaderCompat . getBlocking ( imageLoader , request ); Note ImageLoaderCompat.getBlocking will block the current thread instead of suspending. Do not call this from the main thread.","title":"Java Compatibility"},{"location":"migrating/","text":"Migrating from Glide/Picasso Here are a few examples of how to migrate Glide/Picasso calls into Coil calls: Basic Usage // Glide Glide . with ( context ) . load ( url ) . into ( imageView ) // Picasso Picasso . get () . load ( url ) . into ( imageView ) // Coil imageView . load ( url ) Custom Requests imageView . scaleType = ImageView . ScaleType . FIT_CENTER // Glide Glide . with ( context ) . load ( url ) . placeholder ( placeholder ) . fitCenter () . into ( imageView ) // Picasso Picasso . get () . load ( url ) . placeholder ( placeholder ) . fit () . into ( imageView ) // Coil (autodetects the scale type) imageView . load ( url ) { placeholder ( placeholder ) } Non-View Targets // Glide (has optional callbacks for start and error) Glide . with ( context ) . load ( url ) . into ( object : CustomTarget Drawable () { override fun onResourceReady ( resource : Drawable , transition : Transition Drawable ) { // Handle the successful result. } override fun onLoadCleared ( placeholder : Drawable ) { // Remove the drawable provided in onResourceReady from any Views and ensure no references to it remain. } }) // Picasso Picasso . get () . load ( url ) . into ( object : BitmapTarget { override fun onBitmapLoaded ( bitmap : Bitmap , from : Picasso . LoadedFrom ) { // Handle the successful result. } override fun onBitmapFailed ( e : Exception , errorDrawable : Drawable ?) { // Handle the error drawable. } override fun onPrepareLoad ( placeHolderDrawable : Drawable ?) { // Handle the placeholder drawable. } }) // Coil (has optional callbacks for start and error) Coil . load ( context , url ) { target { drawable - // Handle the successful result. } } Background Thread // Glide (blocks the current thread; must not be called from the main thread) val drawable = Glide . with ( context ) . load ( url ) . submit ( width , height ) . get () // Picasso (blocks the current thread; must not be called from the main thread) val drawable = Picasso . get () . load ( url ) . resize ( width , height ) . get () // Coil (suspends the current context; thread safe) val drawable = Coil . get ( url ) { size ( width , height ) }","title":"Migrating from Glide/Picasso"},{"location":"migrating/#migrating-from-glidepicasso","text":"Here are a few examples of how to migrate Glide/Picasso calls into Coil calls:","title":"Migrating from Glide/Picasso"},{"location":"migrating/#basic-usage","text":"// Glide Glide . with ( context ) . load ( url ) . into ( imageView ) // Picasso Picasso . get () . load ( url ) . into ( imageView ) // Coil imageView . load ( url )","title":"Basic Usage"},{"location":"migrating/#custom-requests","text":"imageView . scaleType = ImageView . ScaleType . FIT_CENTER // Glide Glide . with ( context ) . load ( url ) . placeholder ( placeholder ) . fitCenter () . into ( imageView ) // Picasso Picasso . get () . load ( url ) . placeholder ( placeholder ) . fit () . into ( imageView ) // Coil (autodetects the scale type) imageView . load ( url ) { placeholder ( placeholder ) }","title":"Custom Requests"},{"location":"migrating/#non-view-targets","text":"// Glide (has optional callbacks for start and error) Glide . with ( context ) . load ( url ) . into ( object : CustomTarget Drawable () { override fun onResourceReady ( resource : Drawable , transition : Transition Drawable ) { // Handle the successful result. } override fun onLoadCleared ( placeholder : Drawable ) { // Remove the drawable provided in onResourceReady from any Views and ensure no references to it remain. } }) // Picasso Picasso . get () . load ( url ) . into ( object : BitmapTarget { override fun onBitmapLoaded ( bitmap : Bitmap , from : Picasso . LoadedFrom ) { // Handle the successful result. } override fun onBitmapFailed ( e : Exception , errorDrawable : Drawable ?) { // Handle the error drawable. } override fun onPrepareLoad ( placeHolderDrawable : Drawable ?) { // Handle the placeholder drawable. } }) // Coil (has optional callbacks for start and error) Coil . load ( context , url ) { target { drawable - // Handle the successful result. } }","title":"Non-View Targets"},{"location":"migrating/#background-thread","text":"// Glide (blocks the current thread; must not be called from the main thread) val drawable = Glide . with ( context ) . load ( url ) . submit ( width , height ) . get () // Picasso (blocks the current thread; must not be called from the main thread) val drawable = Picasso . get () . load ( url ) . resize ( width , height ) . get () // Coil (suspends the current context; thread safe) val drawable = Coil . get ( url ) { size ( width , height ) }","title":"Background Thread"},{"location":"requests/","text":"Requests Requests are value objects that provide all the necessary information for an ImageLoader to execute an image request. Requests can be created a number of ways. This simplest way is to use the trailing lambda syntax: val request = LoadRequest ( context , imageLoader . defaults ) { data ( https://www.example.com/image.jpg ) crossfade ( true ) } Requests can also be created using typical builder syntax. This works best for Java: val request = imageLoader . newLoadBuilder ( context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . build () Once you've created a request, pass it to an ImageLoader to execute it: imageLoader . load ( request ) Optionally, you can use the type-safe load and get extension functions to create and execute requests. See the API documentation for more information.","title":"Requests"},{"location":"requests/#requests","text":"Requests are value objects that provide all the necessary information for an ImageLoader to execute an image request. Requests can be created a number of ways. This simplest way is to use the trailing lambda syntax: val request = LoadRequest ( context , imageLoader . defaults ) { data ( https://www.example.com/image.jpg ) crossfade ( true ) } Requests can also be created using typical builder syntax. This works best for Java: val request = imageLoader . newLoadBuilder ( context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . build () Once you've created a request, pass it to an ImageLoader to execute it: imageLoader . load ( request ) Optionally, you can use the type-safe load and get extension functions to create and execute requests. See the API documentation for more information.","title":"Requests"},{"location":"svgs/","text":"SVGs To add SVG support, import the extension library: implementation ( io.coil-kt:coil-svg:0.9.4 ) And add the decoder to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader ( context ) { componentRegistry { add ( SvgDecoder ()) } } And that's it! The ImageLoader will automatically detect any SVGs using their file headers and decode them correctly.","title":"SVGs"},{"location":"svgs/#svgs","text":"To add SVG support, import the extension library: implementation ( io.coil-kt:coil-svg:0.9.4 ) And add the decoder to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader ( context ) { componentRegistry { add ( SvgDecoder ()) } } And that's it! The ImageLoader will automatically detect any SVGs using their file headers and decode them correctly.","title":"SVGs"},{"location":"targets/","text":"Targets Targets handle the result of an image request. They often act as \"view adapters\" by taking the placeholder/error/success Drawables and applying them to a View . Here's the easiest way to create a custom target: Coil . load ( context , https://www.example.com/image.jpg ) { target { drawable - // Handle the successful result. } } There are 3 types of targets: Target : The base target class. Prefer this if the image request isn't tied to a View . ViewTarget : A target with an associated View . Prefer this if the request sets the placeholder/error/success Drawables on a View . Using ViewTarget also binds the request to the View 's lifecycle. PoolableViewTarget : A ViewTarget that supports bitmap pooling . This has performance benefits, however it comes with several strict behavior requirements. Read the docs for more information.","title":"Targets"},{"location":"targets/#targets","text":"Targets handle the result of an image request. They often act as \"view adapters\" by taking the placeholder/error/success Drawables and applying them to a View . Here's the easiest way to create a custom target: Coil . load ( context , https://www.example.com/image.jpg ) { target { drawable - // Handle the successful result. } } There are 3 types of targets: Target : The base target class. Prefer this if the image request isn't tied to a View . ViewTarget : A target with an associated View . Prefer this if the request sets the placeholder/error/success Drawables on a View . Using ViewTarget also binds the request to the View 's lifecycle. PoolableViewTarget : A ViewTarget that supports bitmap pooling . This has performance benefits, however it comes with several strict behavior requirements. Read the docs for more information.","title":"Targets"},{"location":"transformations/","text":"Transformations Transformations allow you to modify the pixel data of an image before the Drawable is returned from the request. By default, Coil comes packaged with 4 transformations: blur , circle crop , and grayscale , and rounded corners . See the API doc for more information. Note If the Drawable returned by the image pipeline is not a BitmapDrawable , it will be converted to one. This will cause animated drawables to only draw the first frame of their animation.","title":"Transformations"},{"location":"transformations/#transformations","text":"Transformations allow you to modify the pixel data of an image before the Drawable is returned from the request. By default, Coil comes packaged with 4 transformations: blur , circle crop , and grayscale , and rounded corners . See the API doc for more information. Note If the Drawable returned by the image pipeline is not a BitmapDrawable , it will be converted to one. This will cause animated drawables to only draw the first frame of their animation.","title":"Transformations"},{"location":"transitions/","text":"Transitions Transitions allow you to animate setting the result of an image request on a Target . Both ImageLoader and Request builders accept a Transition . Transitions allow you to intercept setting the Drawable on the Target . This allows you to animate the target's view or wrap the input drawable. By default, Coil comes packaged with 1 transition: crossfade . Take a look at the CrossfadeTransition source code for an example of how to write a custom Transition . See the API doc for more information.","title":"Transitions"},{"location":"transitions/#transitions","text":"Transitions allow you to animate setting the result of an image request on a Target . Both ImageLoader and Request builders accept a Transition . Transitions allow you to intercept setting the Drawable on the Target . This allows you to animate the target's view or wrap the input drawable. By default, Coil comes packaged with 1 transition: crossfade . Take a look at the CrossfadeTransition source code for an example of how to write a custom Transition . See the API doc for more information.","title":"Transitions"},{"location":"api/coil-base/","text":"coil-base Packages Name Summary coil coil.annotation coil.api coil.bitmappool coil.collection coil.decode coil.drawable coil.extension coil.fetch coil.map coil.network coil.request coil.size coil.target coil.transform coil.transition coil.util Index All Types","title":"coil-base"},{"location":"api/coil-base/#packages","text":"Name Summary coil coil.annotation coil.api coil.bitmappool coil.collection coil.decode coil.drawable coil.extension coil.fetch coil.map coil.network coil.request coil.size coil.target coil.transform coil.transition coil.util","title":"Packages"},{"location":"api/coil-base/#index","text":"All Types","title":"Index"},{"location":"api/coil-base/alltypes/","text":"All Types Name Summary coil.bitmappool.BitmapPool An object pool that enables callers to reuse Bitmap objects. | coil.transform.BlurTransformation A Transformation that applies a Gaussian blur to an image. | coil.annotation.BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker . | coil.request.CachePolicy Represents the read/write policy for a cache source. | coil.transform.CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. | coil.util.CoilLogger A singleton that enables/disables logging to Log . | coil.util.CoilUtils Public utility methods for Coil. | coil.ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. | coil.drawable.CrossfadeDrawable A Drawable that crossfades from start to end . | coil.transition.CrossfadeTransition A Transition that crossfades from the current drawable to a new one. | coil.decode.DataSource Represents the source that a Drawable was loaded from. | coil.decode.Decoder Converts a BufferedSource into a Drawable . | coil.decode.DecodeResult The result of Decoder.decode . | coil.decode.DecodeUtils A collection of useful utility methods for decoding images. | coil.DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . | coil.size.DisplaySizeResolver A SizeResolver that constrains a Target to the size of the display. | coil.fetch.DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . | coil.annotation.ExperimentalCoil Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. | coil.fetch.Fetcher A Fetcher translates data into either a BufferedSource or a Drawable . | coil.fetch.FetchResult The result of Fetcher.fetch . | coil.request.GetRequest A value object that represents a get image request. | coil.request.GetRequestBuilder Builder for a GetRequest . | coil.transform.GrayscaleTransformation A Transformation that converts an image to shades of gray. | coil.network.HttpException Exception for an unexpected, non-2xx HTTP response. | coil.ImageLoader Loads images using load and get . | coil.ImageLoaderBuilder Builder for an ImageLoader . | coil.target.ImageViewTarget A Target that handles setting images on an ImageView . | coil.request.LoadRequest A value object that represents a load image request. | coil.request.LoadRequestBuilder Builder for a LoadRequest . | coil.map.Mapper An interface to convert data with type T into V . | coil.map.MeasuredMapper An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously. | coil.request.NullRequestDataException Exception for when null Request.data is passed to ImageLoader.load . | coil.decode.Options A set of configuration options for fetching and decoding an image. | coil.size.OriginalSize Represents the width and height of the source image. | coil.request.Parameters A map of generic values that can be used to pass custom data to Fetcher s and Decoder s. | coil.size.PixelSize A positive width and height in pixels. | coil.target.PoolableViewTarget A ViewTarget that supports Bitmap pooling. | coil.size.Precision Represents the required precision for the size of an image in an image request. | coil.request.Request A value object that represents an image request. | coil.request.RequestBuilder Base class for LoadRequestBuilder and GetRequestBuilder . | coil.request.RequestDisposable Represents the work of an ImageLoader.load request. | coil.transform.RoundedCornersTransformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. | coil.size.Scale Represents a scaling policy. | coil.size.Size Represents the target size of an image request. | coil.size.SizeResolver An interface for measuring the target size for an image request. | coil.fetch.SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . | coil.collection.SparseIntArraySet A collection of unordered, unique Int s. | coil.target.Target A listener that accepts the result of an image load. | coil.transform.Transformation An interface for making transformations to an image's pixel data. | coil.transition.Transition A class to animate between a Target 's current drawable and the result of an image request. | coil.transition.TransitionResult Represents the result of an image request. | coil.transition.TransitionTarget A Target that supports applying Transition s. | coil.size.ViewSizeResolver A SizeResolver that measures the size of a View . | coil.target.ViewTarget A Target with an associated View .","title":"Home"},{"location":"api/coil-base/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/coil-base/alltypes/#coilbitmappoolbitmappool","text":"An object pool that enables callers to reuse Bitmap objects. |","title":"coil.bitmappool.BitmapPool"},{"location":"api/coil-base/alltypes/#coiltransformblurtransformation","text":"A Transformation that applies a Gaussian blur to an image. |","title":"coil.transform.BlurTransformation"},{"location":"api/coil-base/alltypes/#coilannotationbuildermarker","text":"Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker . |","title":"coil.annotation.BuilderMarker"},{"location":"api/coil-base/alltypes/#coilrequestcachepolicy","text":"Represents the read/write policy for a cache source. |","title":"coil.request.CachePolicy"},{"location":"api/coil-base/alltypes/#coiltransformcirclecroptransformation","text":"A Transformation that crops an image using a centered circle as the mask. |","title":"coil.transform.CircleCropTransformation"},{"location":"api/coil-base/alltypes/#coilutilcoillogger","text":"A singleton that enables/disables logging to Log . |","title":"coil.util.CoilLogger"},{"location":"api/coil-base/alltypes/#coilutilcoilutils","text":"Public utility methods for Coil. |","title":"coil.util.CoilUtils"},{"location":"api/coil-base/alltypes/#coilcomponentregistry","text":"Registry for all the components that an ImageLoader uses to fulfil image requests. |","title":"coil.ComponentRegistry"},{"location":"api/coil-base/alltypes/#coildrawablecrossfadedrawable","text":"A Drawable that crossfades from start to end . |","title":"coil.drawable.CrossfadeDrawable"},{"location":"api/coil-base/alltypes/#coiltransitioncrossfadetransition","text":"A Transition that crossfades from the current drawable to a new one. |","title":"coil.transition.CrossfadeTransition"},{"location":"api/coil-base/alltypes/#coildecodedatasource","text":"Represents the source that a Drawable was loaded from. |","title":"coil.decode.DataSource"},{"location":"api/coil-base/alltypes/#coildecodedecoder","text":"Converts a BufferedSource into a Drawable . |","title":"coil.decode.Decoder"},{"location":"api/coil-base/alltypes/#coildecodedecoderesult","text":"The result of Decoder.decode . |","title":"coil.decode.DecodeResult"},{"location":"api/coil-base/alltypes/#coildecodedecodeutils","text":"A collection of useful utility methods for decoding images. |","title":"coil.decode.DecodeUtils"},{"location":"api/coil-base/alltypes/#coildefaultrequestoptions","text":"A set of default request options, which are used to initialize a RequestBuilder . |","title":"coil.DefaultRequestOptions"},{"location":"api/coil-base/alltypes/#coilsizedisplaysizeresolver","text":"A SizeResolver that constrains a Target to the size of the display. |","title":"coil.size.DisplaySizeResolver"},{"location":"api/coil-base/alltypes/#coilfetchdrawableresult","text":"A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . |","title":"coil.fetch.DrawableResult"},{"location":"api/coil-base/alltypes/#coilannotationexperimentalcoil","text":"Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. |","title":"coil.annotation.ExperimentalCoil"},{"location":"api/coil-base/alltypes/#coilfetchfetcher","text":"A Fetcher translates data into either a BufferedSource or a Drawable . |","title":"coil.fetch.Fetcher"},{"location":"api/coil-base/alltypes/#coilfetchfetchresult","text":"The result of Fetcher.fetch . |","title":"coil.fetch.FetchResult"},{"location":"api/coil-base/alltypes/#coilrequestgetrequest","text":"A value object that represents a get image request. |","title":"coil.request.GetRequest"},{"location":"api/coil-base/alltypes/#coilrequestgetrequestbuilder","text":"Builder for a GetRequest . |","title":"coil.request.GetRequestBuilder"},{"location":"api/coil-base/alltypes/#coiltransformgrayscaletransformation","text":"A Transformation that converts an image to shades of gray. |","title":"coil.transform.GrayscaleTransformation"},{"location":"api/coil-base/alltypes/#coilnetworkhttpexception","text":"Exception for an unexpected, non-2xx HTTP response. |","title":"coil.network.HttpException"},{"location":"api/coil-base/alltypes/#coilimageloader","text":"Loads images using load and get . |","title":"coil.ImageLoader"},{"location":"api/coil-base/alltypes/#coilimageloaderbuilder","text":"Builder for an ImageLoader . |","title":"coil.ImageLoaderBuilder"},{"location":"api/coil-base/alltypes/#coiltargetimageviewtarget","text":"A Target that handles setting images on an ImageView . |","title":"coil.target.ImageViewTarget"},{"location":"api/coil-base/alltypes/#coilrequestloadrequest","text":"A value object that represents a load image request. |","title":"coil.request.LoadRequest"},{"location":"api/coil-base/alltypes/#coilrequestloadrequestbuilder","text":"Builder for a LoadRequest . |","title":"coil.request.LoadRequestBuilder"},{"location":"api/coil-base/alltypes/#coilmapmapper","text":"An interface to convert data with type T into V . |","title":"coil.map.Mapper"},{"location":"api/coil-base/alltypes/#coilmapmeasuredmapper","text":"An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously. |","title":"coil.map.MeasuredMapper"},{"location":"api/coil-base/alltypes/#coilrequestnullrequestdataexception","text":"Exception for when null Request.data is passed to ImageLoader.load . |","title":"coil.request.NullRequestDataException"},{"location":"api/coil-base/alltypes/#coildecodeoptions","text":"A set of configuration options for fetching and decoding an image. |","title":"coil.decode.Options"},{"location":"api/coil-base/alltypes/#coilsizeoriginalsize","text":"Represents the width and height of the source image. |","title":"coil.size.OriginalSize"},{"location":"api/coil-base/alltypes/#coilrequestparameters","text":"A map of generic values that can be used to pass custom data to Fetcher s and Decoder s. |","title":"coil.request.Parameters"},{"location":"api/coil-base/alltypes/#coilsizepixelsize","text":"A positive width and height in pixels. |","title":"coil.size.PixelSize"},{"location":"api/coil-base/alltypes/#coiltargetpoolableviewtarget","text":"A ViewTarget that supports Bitmap pooling. |","title":"coil.target.PoolableViewTarget"},{"location":"api/coil-base/alltypes/#coilsizeprecision","text":"Represents the required precision for the size of an image in an image request. |","title":"coil.size.Precision"},{"location":"api/coil-base/alltypes/#coilrequestrequest","text":"A value object that represents an image request. |","title":"coil.request.Request"},{"location":"api/coil-base/alltypes/#coilrequestrequestbuilder","text":"Base class for LoadRequestBuilder and GetRequestBuilder . |","title":"coil.request.RequestBuilder"},{"location":"api/coil-base/alltypes/#coilrequestrequestdisposable","text":"Represents the work of an ImageLoader.load request. |","title":"coil.request.RequestDisposable"},{"location":"api/coil-base/alltypes/#coiltransformroundedcornerstransformation","text":"A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. |","title":"coil.transform.RoundedCornersTransformation"},{"location":"api/coil-base/alltypes/#coilsizescale","text":"Represents a scaling policy. |","title":"coil.size.Scale"},{"location":"api/coil-base/alltypes/#coilsizesize","text":"Represents the target size of an image request. |","title":"coil.size.Size"},{"location":"api/coil-base/alltypes/#coilsizesizeresolver","text":"An interface for measuring the target size for an image request. |","title":"coil.size.SizeResolver"},{"location":"api/coil-base/alltypes/#coilfetchsourceresult","text":"A raw BufferedSource result, which will be consumed by the relevant Decoder . |","title":"coil.fetch.SourceResult"},{"location":"api/coil-base/alltypes/#coilcollectionsparseintarrayset","text":"A collection of unordered, unique Int s. |","title":"coil.collection.SparseIntArraySet"},{"location":"api/coil-base/alltypes/#coiltargettarget","text":"A listener that accepts the result of an image load. |","title":"coil.target.Target"},{"location":"api/coil-base/alltypes/#coiltransformtransformation","text":"An interface for making transformations to an image's pixel data. |","title":"coil.transform.Transformation"},{"location":"api/coil-base/alltypes/#coiltransitiontransition","text":"A class to animate between a Target 's current drawable and the result of an image request. |","title":"coil.transition.Transition"},{"location":"api/coil-base/alltypes/#coiltransitiontransitionresult","text":"Represents the result of an image request. |","title":"coil.transition.TransitionResult"},{"location":"api/coil-base/alltypes/#coiltransitiontransitiontarget","text":"A Target that supports applying Transition s. |","title":"coil.transition.TransitionTarget"},{"location":"api/coil-base/alltypes/#coilsizeviewsizeresolver","text":"A SizeResolver that measures the size of a View . |","title":"coil.size.ViewSizeResolver"},{"location":"api/coil-base/alltypes/#coiltargetviewtarget","text":"A Target with an associated View .","title":"coil.target.ViewTarget"},{"location":"api/coil-base/coil/","text":"coil-base / coil Package coil Types Name Summary ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. class ComponentRegistry DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . data class DefaultRequestOptions ImageLoader Loads images using load and get . interface ImageLoader ImageLoaderBuilder Builder for an ImageLoader . class ImageLoaderBuilder","title":"Home"},{"location":"api/coil-base/coil/#package-coil","text":"","title":"Package coil"},{"location":"api/coil-base/coil/#types","text":"Name Summary ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. class ComponentRegistry DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . data class DefaultRequestOptions ImageLoader Loads images using load and get . interface ImageLoader ImageLoaderBuilder Builder for an ImageLoader . class ImageLoaderBuilder","title":"Types"},{"location":"api/coil-base/coil/-component-registry/","text":"coil-base / coil / ComponentRegistry ComponentRegistry class ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. Use this class to register support for custom Mapper s, MeasuredMapper s, Fetcher s, and Decoder s. Types Name Summary Builder class Builder Functions Name Summary getMapper fun T : Any getMapper(data: T): Mapper T, * ? getMeasuredMapper fun T : Any getMeasuredMapper(data: T): MeasuredMapper T, * ? newBuilder fun newBuilder(): Builder requireDecoder fun T : Any requireDecoder(data: T, source: BufferedSource , mimeType: String ?): Decoder requireFetcher fun T : Any requireFetcher(data: T): Fetcher T Companion Object Functions Name Summary invoke Create a new ComponentRegistry instance. operator fun invoke(builder: Builder.() - Unit = {}): ComponentRegistry operator fun invoke(registry: ComponentRegistry , builder: Builder.() - Unit = {}): ComponentRegistry","title":"Home"},{"location":"api/coil-base/coil/-component-registry/#componentregistry","text":"class ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. Use this class to register support for custom Mapper s, MeasuredMapper s, Fetcher s, and Decoder s.","title":"ComponentRegistry"},{"location":"api/coil-base/coil/-component-registry/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"api/coil-base/coil/-component-registry/#functions","text":"Name Summary getMapper fun T : Any getMapper(data: T): Mapper T, * ? getMeasuredMapper fun T : Any getMeasuredMapper(data: T): MeasuredMapper T, * ? newBuilder fun newBuilder(): Builder requireDecoder fun T : Any requireDecoder(data: T, source: BufferedSource , mimeType: String ?): Decoder requireFetcher fun T : Any requireFetcher(data: T): Fetcher T","title":"Functions"},{"location":"api/coil-base/coil/-component-registry/#companion-object-functions","text":"Name Summary invoke Create a new ComponentRegistry instance. operator fun invoke(builder: Builder.() - Unit = {}): ComponentRegistry operator fun invoke(registry: ComponentRegistry , builder: Builder.() - Unit = {}): ComponentRegistry","title":"Companion Object Functions"},{"location":"api/coil-base/coil/-component-registry/get-mapper/","text":"coil-base / coil / ComponentRegistry / getMapper getMapper fun T : Any getMapper(data: T): Mapper T, * ?","title":"Get mapper"},{"location":"api/coil-base/coil/-component-registry/get-mapper/#getmapper","text":"fun T : Any getMapper(data: T): Mapper T, * ?","title":"getMapper"},{"location":"api/coil-base/coil/-component-registry/get-measured-mapper/","text":"coil-base / coil / ComponentRegistry / getMeasuredMapper getMeasuredMapper fun T : Any getMeasuredMapper(data: T): MeasuredMapper T, * ?","title":"Get measured mapper"},{"location":"api/coil-base/coil/-component-registry/get-measured-mapper/#getmeasuredmapper","text":"fun T : Any getMeasuredMapper(data: T): MeasuredMapper T, * ?","title":"getMeasuredMapper"},{"location":"api/coil-base/coil/-component-registry/invoke/","text":"coil-base / coil / ComponentRegistry / invoke invoke operator inline fun invoke(builder: Builder.() - Unit = {}): ComponentRegistry Create a new ComponentRegistry instance. Example: val registry = ComponentRegistry { add(GifDecoder()) } operator inline fun invoke(registry: ComponentRegistry , builder: Builder.() - Unit = {}): ComponentRegistry Create a new ComponentRegistry instance.","title":"Invoke"},{"location":"api/coil-base/coil/-component-registry/invoke/#invoke","text":"operator inline fun invoke(builder: Builder.() - Unit = {}): ComponentRegistry Create a new ComponentRegistry instance. Example: val registry = ComponentRegistry { add(GifDecoder()) } operator inline fun invoke(registry: ComponentRegistry , builder: Builder.() - Unit = {}): ComponentRegistry Create a new ComponentRegistry instance.","title":"invoke"},{"location":"api/coil-base/coil/-component-registry/new-builder/","text":"coil-base / coil / ComponentRegistry / newBuilder newBuilder fun newBuilder(): Builder","title":"New builder"},{"location":"api/coil-base/coil/-component-registry/new-builder/#newbuilder","text":"fun newBuilder(): Builder","title":"newBuilder"},{"location":"api/coil-base/coil/-component-registry/require-decoder/","text":"coil-base / coil / ComponentRegistry / requireDecoder requireDecoder fun T : Any requireDecoder(data: T, source: BufferedSource , mimeType: String ?): Decoder","title":"Require decoder"},{"location":"api/coil-base/coil/-component-registry/require-decoder/#requiredecoder","text":"fun T : Any requireDecoder(data: T, source: BufferedSource , mimeType: String ?): Decoder","title":"requireDecoder"},{"location":"api/coil-base/coil/-component-registry/require-fetcher/","text":"coil-base / coil / ComponentRegistry / requireFetcher requireFetcher fun T : Any requireFetcher(data: T): Fetcher T","title":"Require fetcher"},{"location":"api/coil-base/coil/-component-registry/require-fetcher/#requirefetcher","text":"fun T : Any requireFetcher(data: T): Fetcher T","title":"requireFetcher"},{"location":"api/coil-base/coil/-component-registry/-builder/","text":"coil-base / coil / ComponentRegistry / Builder Builder @BuilderMarker class Builder Constructors Name Summary init Builder() Builder(registry: ComponentRegistry ) Functions Name Summary add Register a Mapper . fun T : Any add(mapper: Mapper T, * ): Builder Register a MeasuredMapper . fun T : Any add(measuredMapper: MeasuredMapper T, * ): Builder Register a Fetcher . fun T : Any add(fetcher: Fetcher T ): Builder Register a Decoder . fun add(decoder: Decoder ): Builder build fun build(): ComponentRegistry","title":"Home"},{"location":"api/coil-base/coil/-component-registry/-builder/#builder","text":"@BuilderMarker class Builder","title":"Builder"},{"location":"api/coil-base/coil/-component-registry/-builder/#constructors","text":"Name Summary init Builder() Builder(registry: ComponentRegistry )","title":"Constructors"},{"location":"api/coil-base/coil/-component-registry/-builder/#functions","text":"Name Summary add Register a Mapper . fun T : Any add(mapper: Mapper T, * ): Builder Register a MeasuredMapper . fun T : Any add(measuredMapper: MeasuredMapper T, * ): Builder Register a Fetcher . fun T : Any add(fetcher: Fetcher T ): Builder Register a Decoder . fun add(decoder: Decoder ): Builder build fun build(): ComponentRegistry","title":"Functions"},{"location":"api/coil-base/coil/-component-registry/-builder/-init-/","text":"coil-base / coil / ComponentRegistry / Builder / init init Builder() Builder(registry: ComponentRegistry )","title":" init "},{"location":"api/coil-base/coil/-component-registry/-builder/-init-/#init","text":"Builder() Builder(registry: ComponentRegistry )","title":"&lt;init&gt;"},{"location":"api/coil-base/coil/-component-registry/-builder/add/","text":"coil-base / coil / ComponentRegistry / Builder / add add fun reified T : Any add(mapper: Mapper T, * ): Builder Register a Mapper . fun reified T : Any add(measuredMapper: MeasuredMapper T, * ): Builder Register a MeasuredMapper . fun reified T : Any add(fetcher: Fetcher T ): Builder Register a Fetcher . fun add(decoder: Decoder ): Builder Register a Decoder .","title":"Add"},{"location":"api/coil-base/coil/-component-registry/-builder/add/#add","text":"fun reified T : Any add(mapper: Mapper T, * ): Builder Register a Mapper . fun reified T : Any add(measuredMapper: MeasuredMapper T, * ): Builder Register a MeasuredMapper . fun reified T : Any add(fetcher: Fetcher T ): Builder Register a Fetcher . fun add(decoder: Decoder ): Builder Register a Decoder .","title":"add"},{"location":"api/coil-base/coil/-component-registry/-builder/build/","text":"coil-base / coil / ComponentRegistry / Builder / build build fun build(): ComponentRegistry","title":"Build"},{"location":"api/coil-base/coil/-component-registry/-builder/build/#build","text":"fun build(): ComponentRegistry","title":"build"},{"location":"api/coil-base/coil/-default-request-options/","text":"coil-base / coil / DefaultRequestOptions DefaultRequestOptions data class DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . See Also ImageLoader.defaults Constructors Name Summary init A set of default request options, which are used to initialize a RequestBuilder . DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, transition: Transition ? = null, precision: Precision = Precision.AUTOMATIC, allowHardware: Boolean = true, allowRgb565: Boolean = false, placeholder: Drawable ? = null, error: Drawable ? = null, fallback: Drawable ? = null) Properties Name Summary allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? fallback val fallback: Drawable ? placeholder val placeholder: Drawable ? precision val precision: Precision transition val transition: Transition ?","title":"Home"},{"location":"api/coil-base/coil/-default-request-options/#defaultrequestoptions","text":"data class DefaultRequestOptions A set of default request options, which are used to initialize a RequestBuilder . See Also ImageLoader.defaults","title":"DefaultRequestOptions"},{"location":"api/coil-base/coil/-default-request-options/#constructors","text":"Name Summary init A set of default request options, which are used to initialize a RequestBuilder . DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, transition: Transition ? = null, precision: Precision = Precision.AUTOMATIC, allowHardware: Boolean = true, allowRgb565: Boolean = false, placeholder: Drawable ? = null, error: Drawable ? = null, fallback: Drawable ? = null)","title":"Constructors"},{"location":"api/coil-base/coil/-default-request-options/#properties","text":"Name Summary allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? fallback val fallback: Drawable ? placeholder val placeholder: Drawable ? precision val precision: Precision transition val transition: Transition ?","title":"Properties"},{"location":"api/coil-base/coil/-default-request-options/-init-/","text":"coil-base / coil / DefaultRequestOptions / init init DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, transition: Transition ? = null, precision: Precision = Precision.AUTOMATIC, allowHardware: Boolean = true, allowRgb565: Boolean = false, placeholder: Drawable ? = null, error: Drawable ? = null, fallback: Drawable ? = null) A set of default request options, which are used to initialize a RequestBuilder . See Also ImageLoader.defaults","title":" init "},{"location":"api/coil-base/coil/-default-request-options/-init-/#init","text":"DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, transition: Transition ? = null, precision: Precision = Precision.AUTOMATIC, allowHardware: Boolean = true, allowRgb565: Boolean = false, placeholder: Drawable ? = null, error: Drawable ? = null, fallback: Drawable ? = null) A set of default request options, which are used to initialize a RequestBuilder . See Also ImageLoader.defaults","title":"&lt;init&gt;"},{"location":"api/coil-base/coil/-default-request-options/allow-hardware/","text":"coil-base / coil / DefaultRequestOptions / allowHardware allowHardware val allowHardware: Boolean","title":"Allow hardware"},{"location":"api/coil-base/coil/-default-request-options/allow-hardware/#allowhardware","text":"val allowHardware: Boolean","title":"allowHardware"},{"location":"api/coil-base/coil/-default-request-options/allow-rgb565/","text":"coil-base / coil / DefaultRequestOptions / allowRgb565 allowRgb565 val allowRgb565: Boolean","title":"Allow rgb565"},{"location":"api/coil-base/coil/-default-request-options/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean","title":"allowRgb565"},{"location":"api/coil-base/coil/-default-request-options/dispatcher/","text":"coil-base / coil / DefaultRequestOptions / dispatcher dispatcher val dispatcher: CoroutineDispatcher","title":"Dispatcher"},{"location":"api/coil-base/coil/-default-request-options/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher","title":"dispatcher"},{"location":"api/coil-base/coil/-default-request-options/error/","text":"coil-base / coil / DefaultRequestOptions / error error val error: Drawable ?","title":"Error"},{"location":"api/coil-base/coil/-default-request-options/error/#error","text":"val error: Drawable ?","title":"error"},{"location":"api/coil-base/coil/-default-request-options/fallback/","text":"coil-base / coil / DefaultRequestOptions / fallback fallback val fallback: Drawable ?","title":"Fallback"},{"location":"api/coil-base/coil/-default-request-options/fallback/#fallback","text":"val fallback: Drawable ?","title":"fallback"},{"location":"api/coil-base/coil/-default-request-options/placeholder/","text":"coil-base / coil / DefaultRequestOptions / placeholder placeholder val placeholder: Drawable ?","title":"Placeholder"},{"location":"api/coil-base/coil/-default-request-options/placeholder/#placeholder","text":"val placeholder: Drawable ?","title":"placeholder"},{"location":"api/coil-base/coil/-default-request-options/precision/","text":"coil-base / coil / DefaultRequestOptions / precision precision val precision: Precision","title":"Precision"},{"location":"api/coil-base/coil/-default-request-options/precision/#precision","text":"val precision: Precision","title":"precision"},{"location":"api/coil-base/coil/-default-request-options/transition/","text":"coil-base / coil / DefaultRequestOptions / transition transition val transition: Transition ?","title":"Transition"},{"location":"api/coil-base/coil/-default-request-options/transition/#transition","text":"val transition: Transition ?","title":"transition"},{"location":"api/coil-base/coil/-image-loader/","text":"coil-base / coil / ImageLoader ImageLoader interface ImageLoader Loads images using load and get . Properties Name Summary defaults The default options for any Request s created by this image loader. abstract val defaults: DefaultRequestOptions Functions Name Summary clearMemory Completely clear this image loader's memory cache and bitmap pool. abstract fun clearMemory(): Unit get Load the request 's data and suspend until the operation is complete. Return the loaded Drawable . abstract suspend fun get(request: GetRequest ): Drawable load Start an asynchronous operation to load the request 's data into its Target . abstract fun load(request: LoadRequest ): RequestDisposable shutdown Shutdown this image loader. abstract fun shutdown(): Unit Companion Object Functions Name Summary invoke Create a new ImageLoader instance. operator fun invoke(context: Context , builder: ImageLoaderBuilder .() - Unit = {}): ImageLoader Extension Functions Name Summary get suspend fun ImageLoader .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun ImageLoader .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable newGetBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder newLoadBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"Home"},{"location":"api/coil-base/coil/-image-loader/#imageloader","text":"interface ImageLoader Loads images using load and get .","title":"ImageLoader"},{"location":"api/coil-base/coil/-image-loader/#properties","text":"Name Summary defaults The default options for any Request s created by this image loader. abstract val defaults: DefaultRequestOptions","title":"Properties"},{"location":"api/coil-base/coil/-image-loader/#functions","text":"Name Summary clearMemory Completely clear this image loader's memory cache and bitmap pool. abstract fun clearMemory(): Unit get Load the request 's data and suspend until the operation is complete. Return the loaded Drawable . abstract suspend fun get(request: GetRequest ): Drawable load Start an asynchronous operation to load the request 's data into its Target . abstract fun load(request: LoadRequest ): RequestDisposable shutdown Shutdown this image loader. abstract fun shutdown(): Unit","title":"Functions"},{"location":"api/coil-base/coil/-image-loader/#companion-object-functions","text":"Name Summary invoke Create a new ImageLoader instance. operator fun invoke(context: Context , builder: ImageLoaderBuilder .() - Unit = {}): ImageLoader","title":"Companion Object Functions"},{"location":"api/coil-base/coil/-image-loader/#extension-functions","text":"Name Summary get suspend fun ImageLoader .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun ImageLoader .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable newGetBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder newLoadBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"Extension Functions"},{"location":"api/coil-base/coil/-image-loader/clear-memory/","text":"coil-base / coil / ImageLoader / clearMemory clearMemory abstract fun clearMemory(): Unit Completely clear this image loader's memory cache and bitmap pool.","title":"Clear memory"},{"location":"api/coil-base/coil/-image-loader/clear-memory/#clearmemory","text":"abstract fun clearMemory(): Unit Completely clear this image loader's memory cache and bitmap pool.","title":"clearMemory"},{"location":"api/coil-base/coil/-image-loader/defaults/","text":"coil-base / coil / ImageLoader / defaults defaults abstract val defaults: DefaultRequestOptions The default options for any Request s created by this image loader.","title":"Defaults"},{"location":"api/coil-base/coil/-image-loader/defaults/#defaults","text":"abstract val defaults: DefaultRequestOptions The default options for any Request s created by this image loader.","title":"defaults"},{"location":"api/coil-base/coil/-image-loader/get/","text":"coil-base / coil / ImageLoader / get get abstract suspend fun get(request: GetRequest ): Drawable Load the request 's data and suspend until the operation is complete. Return the loaded Drawable . Parameters request - The request to execute. Return The Drawable result.","title":"Get"},{"location":"api/coil-base/coil/-image-loader/get/#get","text":"abstract suspend fun get(request: GetRequest ): Drawable Load the request 's data and suspend until the operation is complete. Return the loaded Drawable .","title":"get"},{"location":"api/coil-base/coil/-image-loader/get/#parameters","text":"request - The request to execute. Return The Drawable result.","title":"Parameters"},{"location":"api/coil-base/coil/-image-loader/invoke/","text":"coil-base / coil / ImageLoader / invoke invoke operator inline fun invoke(context: Context , builder: ImageLoaderBuilder .() - Unit = {}): ImageLoader Create a new ImageLoader instance. Example: val loader = ImageLoader(context) { availableMemoryPercentage(0.5) crossfade(true) }","title":"Invoke"},{"location":"api/coil-base/coil/-image-loader/invoke/#invoke","text":"operator inline fun invoke(context: Context , builder: ImageLoaderBuilder .() - Unit = {}): ImageLoader Create a new ImageLoader instance. Example: val loader = ImageLoader(context) { availableMemoryPercentage(0.5) crossfade(true) }","title":"invoke"},{"location":"api/coil-base/coil/-image-loader/load/","text":"coil-base / coil / ImageLoader / load load abstract fun load(request: LoadRequest ): RequestDisposable Start an asynchronous operation to load the request 's data into its Target . If the request's target is null, this method preloads the image. Parameters request - The request to execute. Return A RequestDisposable which can be used to cancel or check the status of the request.","title":"Load"},{"location":"api/coil-base/coil/-image-loader/load/#load","text":"abstract fun load(request: LoadRequest ): RequestDisposable Start an asynchronous operation to load the request 's data into its Target . If the request's target is null, this method preloads the image.","title":"load"},{"location":"api/coil-base/coil/-image-loader/load/#parameters","text":"request - The request to execute. Return A RequestDisposable which can be used to cancel or check the status of the request.","title":"Parameters"},{"location":"api/coil-base/coil/-image-loader/shutdown/","text":"coil-base / coil / ImageLoader / shutdown shutdown abstract fun shutdown(): Unit Shutdown this image loader. All associated resources will be freed and any new requests will fail before starting. In progress load requests will be cancelled. In progress get requests will continue until complete.","title":"Shutdown"},{"location":"api/coil-base/coil/-image-loader/shutdown/#shutdown","text":"abstract fun shutdown(): Unit Shutdown this image loader. All associated resources will be freed and any new requests will fail before starting. In progress load requests will be cancelled. In progress get requests will continue until complete.","title":"shutdown"},{"location":"api/coil-base/coil/-image-loader-builder/","text":"coil-base / coil / ImageLoaderBuilder ImageLoaderBuilder @BuilderMarker class ImageLoaderBuilder Builder for an ImageLoader . Constructors Name Summary init Builder for an ImageLoader . ImageLoaderBuilder(context: Context ) Functions Name Summary allowHardware Allow the use of Bitmap.Config.HARDWARE . fun allowHardware(enable: Boolean ): ImageLoaderBuilder allowRgb565 Allow automatically using Bitmap.Config.RGB_565 when an image is guaranteed to not have alpha. fun allowRgb565(enable: Boolean ): ImageLoaderBuilder availableMemoryPercentage Set the percentage of available memory to devote to this ImageLoader 's memory cache and bitmap pool. fun availableMemoryPercentage(multiplier: Double ): ImageLoaderBuilder bitmapPoolPercentage Set the percentage of memory allocated to this ImageLoader to allocate to bitmap pooling. fun bitmapPoolPercentage(multiplier: Double ): ImageLoaderBuilder build Create a new ImageLoader instance. fun build(): ImageLoader callFactory Set the Call.Factory used for network requests. fun callFactory(callFactory: Factory ): ImageLoaderBuilder Set a lazy callback to create the Call.Factory used for network requests. fun callFactory(initializer: () - Factory ): ImageLoaderBuilder componentRegistry Build and set the ComponentRegistry . fun componentRegistry(builder: Builder.() - Unit ): ImageLoaderBuilder Set the ComponentRegistry . fun componentRegistry(registry: ComponentRegistry ): ImageLoaderBuilder crossfade Enable a crossfade animation with duration CrossfadeDrawable.DEFAULT_DURATION milliseconds when a request completes successfully. fun crossfade(enable: Boolean ): ImageLoaderBuilder Enable a crossfade animation with durationMillis milliseconds when a request completes successfully. fun crossfade(durationMillis: Int ): ImageLoaderBuilder dispatcher The default CoroutineDispatcher to run image requests on. fun dispatcher(dispatcher: CoroutineDispatcher ): ImageLoaderBuilder error Set the default error drawable to use when a request fails. fun error(drawableResId: Int ): ImageLoaderBuilder fun error(drawable: Drawable ?): ImageLoaderBuilder fallback Set the default fallback drawable to use if Request.data is null. fun fallback(drawableResId: Int ): ImageLoaderBuilder fun fallback(drawable: Drawable ?): ImageLoaderBuilder okHttpClient Set the OkHttpClient used for network requests. fun okHttpClient(okHttpClient: OkHttpClient ): ImageLoaderBuilder Set a lazy callback to create the OkHttpClient used for network requests. fun okHttpClient(initializer: () - OkHttpClient ): ImageLoaderBuilder placeholder Set the default placeholder drawable to use when a request starts. fun placeholder(drawableResId: Int ): ImageLoaderBuilder fun placeholder(drawable: Drawable ?): ImageLoaderBuilder precision Set the default precision for a request. Precision controls whether the size of the loaded image must match the request's size exactly or not. fun precision(precision: Precision ): ImageLoaderBuilder transition Set the default Transition for each request. fun transition(transition: Transition ?): ImageLoaderBuilder","title":"Home"},{"location":"api/coil-base/coil/-image-loader-builder/#imageloaderbuilder","text":"@BuilderMarker class ImageLoaderBuilder Builder for an ImageLoader .","title":"ImageLoaderBuilder"},{"location":"api/coil-base/coil/-image-loader-builder/#constructors","text":"Name Summary init Builder for an ImageLoader . ImageLoaderBuilder(context: Context )","title":"Constructors"},{"location":"api/coil-base/coil/-image-loader-builder/#functions","text":"Name Summary allowHardware Allow the use of Bitmap.Config.HARDWARE . fun allowHardware(enable: Boolean ): ImageLoaderBuilder allowRgb565 Allow automatically using Bitmap.Config.RGB_565 when an image is guaranteed to not have alpha. fun allowRgb565(enable: Boolean ): ImageLoaderBuilder availableMemoryPercentage Set the percentage of available memory to devote to this ImageLoader 's memory cache and bitmap pool. fun availableMemoryPercentage(multiplier: Double ): ImageLoaderBuilder bitmapPoolPercentage Set the percentage of memory allocated to this ImageLoader to allocate to bitmap pooling. fun bitmapPoolPercentage(multiplier: Double ): ImageLoaderBuilder build Create a new ImageLoader instance. fun build(): ImageLoader callFactory Set the Call.Factory used for network requests. fun callFactory(callFactory: Factory ): ImageLoaderBuilder Set a lazy callback to create the Call.Factory used for network requests. fun callFactory(initializer: () - Factory ): ImageLoaderBuilder componentRegistry Build and set the ComponentRegistry . fun componentRegistry(builder: Builder.() - Unit ): ImageLoaderBuilder Set the ComponentRegistry . fun componentRegistry(registry: ComponentRegistry ): ImageLoaderBuilder crossfade Enable a crossfade animation with duration CrossfadeDrawable.DEFAULT_DURATION milliseconds when a request completes successfully. fun crossfade(enable: Boolean ): ImageLoaderBuilder Enable a crossfade animation with durationMillis milliseconds when a request completes successfully. fun crossfade(durationMillis: Int ): ImageLoaderBuilder dispatcher The default CoroutineDispatcher to run image requests on. fun dispatcher(dispatcher: CoroutineDispatcher ): ImageLoaderBuilder error Set the default error drawable to use when a request fails. fun error(drawableResId: Int ): ImageLoaderBuilder fun error(drawable: Drawable ?): ImageLoaderBuilder fallback Set the default fallback drawable to use if Request.data is null. fun fallback(drawableResId: Int ): ImageLoaderBuilder fun fallback(drawable: Drawable ?): ImageLoaderBuilder okHttpClient Set the OkHttpClient used for network requests. fun okHttpClient(okHttpClient: OkHttpClient ): ImageLoaderBuilder Set a lazy callback to create the OkHttpClient used for network requests. fun okHttpClient(initializer: () - OkHttpClient ): ImageLoaderBuilder placeholder Set the default placeholder drawable to use when a request starts. fun placeholder(drawableResId: Int ): ImageLoaderBuilder fun placeholder(drawable: Drawable ?): ImageLoaderBuilder precision Set the default precision for a request. Precision controls whether the size of the loaded image must match the request's size exactly or not. fun precision(precision: Precision ): ImageLoaderBuilder transition Set the default Transition for each request. fun transition(transition: Transition ?): ImageLoaderBuilder","title":"Functions"},{"location":"api/coil-base/coil/-image-loader-builder/-init-/","text":"coil-base / coil / ImageLoaderBuilder / init init ImageLoaderBuilder(context: Context ) Builder for an ImageLoader .","title":" init "},{"location":"api/coil-base/coil/-image-loader-builder/-init-/#init","text":"ImageLoaderBuilder(context: Context ) Builder for an ImageLoader .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil/-image-loader-builder/allow-hardware/","text":"coil-base / coil / ImageLoaderBuilder / allowHardware allowHardware fun allowHardware(enable: Boolean ): ImageLoaderBuilder Allow the use of Bitmap.Config.HARDWARE . If false, any use of Bitmap.Config.HARDWARE will be treated as Bitmap.Config.ARGB_8888 . NOTE: Setting this to false this will reduce performance on Android O and above. Only disable if necessary. Default: true","title":"Allow hardware"},{"location":"api/coil-base/coil/-image-loader-builder/allow-hardware/#allowhardware","text":"fun allowHardware(enable: Boolean ): ImageLoaderBuilder Allow the use of Bitmap.Config.HARDWARE . If false, any use of Bitmap.Config.HARDWARE will be treated as Bitmap.Config.ARGB_8888 . NOTE: Setting this to false this will reduce performance on Android O and above. Only disable if necessary. Default: true","title":"allowHardware"},{"location":"api/coil-base/coil/-image-loader-builder/allow-rgb565/","text":"coil-base / coil / ImageLoaderBuilder / allowRgb565 allowRgb565 fun allowRgb565(enable: Boolean ): ImageLoaderBuilder Allow automatically using Bitmap.Config.RGB_565 when an image is guaranteed to not have alpha. This will reduce the visual quality of the image, but will also reduce memory usage. Prefer only enabling this for low memory and resource constrained devices. Default: false","title":"Allow rgb565"},{"location":"api/coil-base/coil/-image-loader-builder/allow-rgb565/#allowrgb565","text":"fun allowRgb565(enable: Boolean ): ImageLoaderBuilder Allow automatically using Bitmap.Config.RGB_565 when an image is guaranteed to not have alpha. This will reduce the visual quality of the image, but will also reduce memory usage. Prefer only enabling this for low memory and resource constrained devices. Default: false","title":"allowRgb565"},{"location":"api/coil-base/coil/-image-loader-builder/available-memory-percentage/","text":"coil-base / coil / ImageLoaderBuilder / availableMemoryPercentage availableMemoryPercentage fun availableMemoryPercentage(multiplier: Double ): ImageLoaderBuilder Set the percentage of available memory to devote to this ImageLoader 's memory cache and bitmap pool. Setting this to 0 disables memory caching and bitmap pooling. Default: Utils.getDefaultAvailableMemoryPercentage","title":"Available memory percentage"},{"location":"api/coil-base/coil/-image-loader-builder/available-memory-percentage/#availablememorypercentage","text":"fun availableMemoryPercentage(multiplier: Double ): ImageLoaderBuilder Set the percentage of available memory to devote to this ImageLoader 's memory cache and bitmap pool. Setting this to 0 disables memory caching and bitmap pooling. Default: Utils.getDefaultAvailableMemoryPercentage","title":"availableMemoryPercentage"},{"location":"api/coil-base/coil/-image-loader-builder/bitmap-pool-percentage/","text":"coil-base / coil / ImageLoaderBuilder / bitmapPoolPercentage bitmapPoolPercentage fun bitmapPoolPercentage(multiplier: Double ): ImageLoaderBuilder Set the percentage of memory allocated to this ImageLoader to allocate to bitmap pooling. i.e. Setting availableMemoryPercentage to 0.25 and bitmapPoolPercentage to 0.5 allows this ImageLoader to use 25% of the app's total memory and splits that memory 50/50 between the bitmap pool and memory cache. Setting this to 0 disables bitmap pooling. Default: Utils.getDefaultBitmapPoolPercentage","title":"Bitmap pool percentage"},{"location":"api/coil-base/coil/-image-loader-builder/bitmap-pool-percentage/#bitmappoolpercentage","text":"fun bitmapPoolPercentage(multiplier: Double ): ImageLoaderBuilder Set the percentage of memory allocated to this ImageLoader to allocate to bitmap pooling. i.e. Setting availableMemoryPercentage to 0.25 and bitmapPoolPercentage to 0.5 allows this ImageLoader to use 25% of the app's total memory and splits that memory 50/50 between the bitmap pool and memory cache. Setting this to 0 disables bitmap pooling. Default: Utils.getDefaultBitmapPoolPercentage","title":"bitmapPoolPercentage"},{"location":"api/coil-base/coil/-image-loader-builder/build/","text":"coil-base / coil / ImageLoaderBuilder / build build fun build(): ImageLoader Create a new ImageLoader instance.","title":"Build"},{"location":"api/coil-base/coil/-image-loader-builder/build/#build","text":"fun build(): ImageLoader Create a new ImageLoader instance.","title":"build"},{"location":"api/coil-base/coil/-image-loader-builder/call-factory/","text":"coil-base / coil / ImageLoaderBuilder / callFactory callFactory fun callFactory(callFactory: Factory ): ImageLoaderBuilder Set the Call.Factory used for network requests. Calling okHttpClient automatically sets this value. NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache . fun callFactory(initializer: () - Factory ): ImageLoaderBuilder Set a lazy callback to create the Call.Factory used for network requests. This allows lazy creation of the Call.Factory on a background thread. initializer is guaranteed to be called at most once. Prefer using this instead of callFactory(Call.Factory) . Calling okHttpClient automatically sets this value. NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache .","title":"Call factory"},{"location":"api/coil-base/coil/-image-loader-builder/call-factory/#callfactory","text":"fun callFactory(callFactory: Factory ): ImageLoaderBuilder Set the Call.Factory used for network requests. Calling okHttpClient automatically sets this value. NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache . fun callFactory(initializer: () - Factory ): ImageLoaderBuilder Set a lazy callback to create the Call.Factory used for network requests. This allows lazy creation of the Call.Factory on a background thread. initializer is guaranteed to be called at most once. Prefer using this instead of callFactory(Call.Factory) . Calling okHttpClient automatically sets this value. NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache .","title":"callFactory"},{"location":"api/coil-base/coil/-image-loader-builder/component-registry/","text":"coil-base / coil / ImageLoaderBuilder / componentRegistry componentRegistry inline fun componentRegistry(builder: Builder.() - Unit ): ImageLoaderBuilder Build and set the ComponentRegistry . fun componentRegistry(registry: ComponentRegistry ): ImageLoaderBuilder Set the ComponentRegistry .","title":"Component registry"},{"location":"api/coil-base/coil/-image-loader-builder/component-registry/#componentregistry","text":"inline fun componentRegistry(builder: Builder.() - Unit ): ImageLoaderBuilder Build and set the ComponentRegistry . fun componentRegistry(registry: ComponentRegistry ): ImageLoaderBuilder Set the ComponentRegistry .","title":"componentRegistry"},{"location":"api/coil-base/coil/-image-loader-builder/crossfade/","text":"coil-base / coil / ImageLoaderBuilder / crossfade crossfade fun crossfade(enable: Boolean ): ImageLoaderBuilder Enable a crossfade animation with duration CrossfadeDrawable.DEFAULT_DURATION milliseconds when a request completes successfully. Default: false fun crossfade(durationMillis: Int ): ImageLoaderBuilder Enable a crossfade animation with durationMillis milliseconds when a request completes successfully.","title":"Crossfade"},{"location":"api/coil-base/coil/-image-loader-builder/crossfade/#crossfade","text":"fun crossfade(enable: Boolean ): ImageLoaderBuilder Enable a crossfade animation with duration CrossfadeDrawable.DEFAULT_DURATION milliseconds when a request completes successfully. Default: false fun crossfade(durationMillis: Int ): ImageLoaderBuilder Enable a crossfade animation with durationMillis milliseconds when a request completes successfully.","title":"crossfade"},{"location":"api/coil-base/coil/-image-loader-builder/dispatcher/","text":"coil-base / coil / ImageLoaderBuilder / dispatcher dispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): ImageLoaderBuilder The default CoroutineDispatcher to run image requests on. Default: Dispatchers.IO","title":"Dispatcher"},{"location":"api/coil-base/coil/-image-loader-builder/dispatcher/#dispatcher","text":"fun dispatcher(dispatcher: CoroutineDispatcher ): ImageLoaderBuilder The default CoroutineDispatcher to run image requests on. Default: Dispatchers.IO","title":"dispatcher"},{"location":"api/coil-base/coil/-image-loader-builder/error/","text":"coil-base / coil / ImageLoaderBuilder / error error fun error(@DrawableRes drawableResId: Int ): ImageLoaderBuilder fun error(drawable: Drawable ?): ImageLoaderBuilder Set the default error drawable to use when a request fails.","title":"Error"},{"location":"api/coil-base/coil/-image-loader-builder/error/#error","text":"fun error(@DrawableRes drawableResId: Int ): ImageLoaderBuilder fun error(drawable: Drawable ?): ImageLoaderBuilder Set the default error drawable to use when a request fails.","title":"error"},{"location":"api/coil-base/coil/-image-loader-builder/fallback/","text":"coil-base / coil / ImageLoaderBuilder / fallback fallback fun fallback(@DrawableRes drawableResId: Int ): ImageLoaderBuilder fun fallback(drawable: Drawable ?): ImageLoaderBuilder Set the default fallback drawable to use if Request.data is null.","title":"Fallback"},{"location":"api/coil-base/coil/-image-loader-builder/fallback/#fallback","text":"fun fallback(@DrawableRes drawableResId: Int ): ImageLoaderBuilder fun fallback(drawable: Drawable ?): ImageLoaderBuilder Set the default fallback drawable to use if Request.data is null.","title":"fallback"},{"location":"api/coil-base/coil/-image-loader-builder/ok-http-client/","text":"coil-base / coil / ImageLoaderBuilder / okHttpClient okHttpClient fun okHttpClient(okHttpClient: OkHttpClient ): ImageLoaderBuilder Set the OkHttpClient used for network requests. This is a convenience function for calling callFactory(Call.Factory) . NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache . fun okHttpClient(initializer: () - OkHttpClient ): ImageLoaderBuilder Set a lazy callback to create the OkHttpClient used for network requests. This is a convenience function for calling callFactory(() - Call.Factory) . NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache .","title":"Ok http client"},{"location":"api/coil-base/coil/-image-loader-builder/ok-http-client/#okhttpclient","text":"fun okHttpClient(okHttpClient: OkHttpClient ): ImageLoaderBuilder Set the OkHttpClient used for network requests. This is a convenience function for calling callFactory(Call.Factory) . NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache . fun okHttpClient(initializer: () - OkHttpClient ): ImageLoaderBuilder Set a lazy callback to create the OkHttpClient used for network requests. This is a convenience function for calling callFactory(() - Call.Factory) . NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache .","title":"okHttpClient"},{"location":"api/coil-base/coil/-image-loader-builder/placeholder/","text":"coil-base / coil / ImageLoaderBuilder / placeholder placeholder fun placeholder(@DrawableRes drawableResId: Int ): ImageLoaderBuilder fun placeholder(drawable: Drawable ?): ImageLoaderBuilder Set the default placeholder drawable to use when a request starts.","title":"Placeholder"},{"location":"api/coil-base/coil/-image-loader-builder/placeholder/#placeholder","text":"fun placeholder(@DrawableRes drawableResId: Int ): ImageLoaderBuilder fun placeholder(drawable: Drawable ?): ImageLoaderBuilder Set the default placeholder drawable to use when a request starts.","title":"placeholder"},{"location":"api/coil-base/coil/-image-loader-builder/precision/","text":"coil-base / coil / ImageLoaderBuilder / precision precision fun precision(precision: Precision ): ImageLoaderBuilder Set the default precision for a request. Precision controls whether the size of the loaded image must match the request's size exactly or not. Default: Precision.AUTOMATIC","title":"Precision"},{"location":"api/coil-base/coil/-image-loader-builder/precision/#precision","text":"fun precision(precision: Precision ): ImageLoaderBuilder Set the default precision for a request. Precision controls whether the size of the loaded image must match the request's size exactly or not. Default: Precision.AUTOMATIC","title":"precision"},{"location":"api/coil-base/coil/-image-loader-builder/transition/","text":"coil-base / coil / ImageLoaderBuilder / transition transition @ExperimentalCoil fun transition(transition: Transition ?): ImageLoaderBuilder Set the default Transition for each request.","title":"Transition"},{"location":"api/coil-base/coil/-image-loader-builder/transition/#transition","text":"@ExperimentalCoil fun transition(transition: Transition ?): ImageLoaderBuilder Set the default Transition for each request.","title":"transition"},{"location":"api/coil-base/coil.annotation/","text":"coil-base / coil.annotation Package coil.annotation Annotations Name Summary BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker . annotation class BuilderMarker ExperimentalCoil Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. annotation class ExperimentalCoil","title":"Home"},{"location":"api/coil-base/coil.annotation/#package-coilannotation","text":"","title":"Package coil.annotation"},{"location":"api/coil-base/coil.annotation/#annotations","text":"Name Summary BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker . annotation class BuilderMarker ExperimentalCoil Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. annotation class ExperimentalCoil","title":"Annotations"},{"location":"api/coil-base/coil.annotation/-builder-marker/","text":"coil-base / coil.annotation / BuilderMarker BuilderMarker @DslMarker annotation class BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker . Constructors Name Summary init Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker . BuilderMarker()","title":"Home"},{"location":"api/coil-base/coil.annotation/-builder-marker/#buildermarker","text":"@DslMarker annotation class BuilderMarker Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker .","title":"BuilderMarker"},{"location":"api/coil-base/coil.annotation/-builder-marker/#constructors","text":"Name Summary init Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker . BuilderMarker()","title":"Constructors"},{"location":"api/coil-base/coil.annotation/-builder-marker/-init-/","text":"coil-base / coil.annotation / BuilderMarker / init init BuilderMarker() Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker .","title":" init "},{"location":"api/coil-base/coil.annotation/-builder-marker/-init-/#init","text":"BuilderMarker() Marks builder classes that are part of a DSL. This restricts calling an outer scope if it is also marked by DslMarker .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.annotation/-experimental-coil/","text":"coil-base / coil.annotation / ExperimentalCoil ExperimentalCoil annotation class ExperimentalCoil Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. Constructors Name Summary init Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. ExperimentalCoil()","title":"Home"},{"location":"api/coil-base/coil.annotation/-experimental-coil/#experimentalcoil","text":"annotation class ExperimentalCoil Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating.","title":"ExperimentalCoil"},{"location":"api/coil-base/coil.annotation/-experimental-coil/#constructors","text":"Name Summary init Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. ExperimentalCoil()","title":"Constructors"},{"location":"api/coil-base/coil.annotation/-experimental-coil/-init-/","text":"coil-base / coil.annotation / ExperimentalCoil / init init ExperimentalCoil() Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating.","title":" init "},{"location":"api/coil-base/coil.annotation/-experimental-coil/-init-/#init","text":"ExperimentalCoil() Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.api/","text":"coil-base / coil.api Package coil.api Functions Name Summary get suspend fun ImageLoader .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun ImageLoader .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable newGetBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder newLoadBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"Home"},{"location":"api/coil-base/coil.api/#package-coilapi","text":"","title":"Package coil.api"},{"location":"api/coil-base/coil.api/#functions","text":"Name Summary get suspend fun ImageLoader .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun ImageLoader .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable newGetBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder newLoadBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"Functions"},{"location":"api/coil-base/coil.api/get-any/","text":"coil-base / coil.api / getAny getAny suspend inline fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"Get any"},{"location":"api/coil-base/coil.api/get-any/#getany","text":"suspend inline fun ImageLoader .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"getAny"},{"location":"api/coil-base/coil.api/get/","text":"coil-base / coil.api / get get suspend inline fun ImageLoader .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(@DrawableRes drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"Get"},{"location":"api/coil-base/coil.api/get/#get","text":"suspend inline fun ImageLoader .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(@DrawableRes drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun ImageLoader .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"get"},{"location":"api/coil-base/coil.api/load-any/","text":"coil-base / coil.api / loadAny loadAny inline fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Load any"},{"location":"api/coil-base/coil.api/load-any/#loadany","text":"inline fun ImageLoader .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"loadAny"},{"location":"api/coil-base/coil.api/load/","text":"coil-base / coil.api / load load inline fun ImageLoader .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , @DrawableRes drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Load"},{"location":"api/coil-base/coil.api/load/#load","text":"inline fun ImageLoader .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , @DrawableRes drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageLoader .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"load"},{"location":"api/coil-base/coil.api/new-get-builder/","text":"coil-base / coil.api / newGetBuilder newGetBuilder fun ImageLoader .newGetBuilder(): GetRequestBuilder","title":"New get builder"},{"location":"api/coil-base/coil.api/new-get-builder/#newgetbuilder","text":"fun ImageLoader .newGetBuilder(): GetRequestBuilder","title":"newGetBuilder"},{"location":"api/coil-base/coil.api/new-load-builder/","text":"coil-base / coil.api / newLoadBuilder newLoadBuilder fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"New load builder"},{"location":"api/coil-base/coil.api/new-load-builder/#newloadbuilder","text":"fun ImageLoader .newLoadBuilder(context: Context ): LoadRequestBuilder","title":"newLoadBuilder"},{"location":"api/coil-base/coil.bitmappool/","text":"coil-base / coil.bitmappool Package coil.bitmappool Types Name Summary BitmapPool An object pool that enables callers to reuse Bitmap objects. interface BitmapPool","title":"Home"},{"location":"api/coil-base/coil.bitmappool/#package-coilbitmappool","text":"","title":"Package coil.bitmappool"},{"location":"api/coil-base/coil.bitmappool/#types","text":"Name Summary BitmapPool An object pool that enables callers to reuse Bitmap objects. interface BitmapPool","title":"Types"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/","text":"coil-base / coil.bitmappool / BitmapPool BitmapPool interface BitmapPool An object pool that enables callers to reuse Bitmap objects. Functions Name Summary clear Remove all Bitmap s from this pool and free their memory. abstract fun clear(): Unit get Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. abstract fun get(width: Int , height: Int , config: Config ): Bitmap getDirty Identical to get except that any returned Bitmap may not have been erased and may contain random data. abstract fun getDirty(width: Int , height: Int , config: Config ): Bitmap getDirtyOrNull Identical to getDirty except that null will be returned if the pool does not contain a usable Bitmap. abstract fun getDirtyOrNull(width: Int , height: Int , config: Config ): Bitmap ? getOrNull Identical to get except that null will be returned if the pool does not contain a usable Bitmap. abstract fun getOrNull(width: Int , height: Int , config: Config ): Bitmap ? put Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the Bitmap and discards it. abstract fun put(bitmap: Bitmap ): Unit trimMemory abstract fun trimMemory(level: Int ): Unit Companion Object Functions Name Summary invoke Create a new BitmapPool . operator fun invoke(maxSize: Long ): BitmapPool","title":"Home"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/#bitmappool","text":"interface BitmapPool An object pool that enables callers to reuse Bitmap objects.","title":"BitmapPool"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/#functions","text":"Name Summary clear Remove all Bitmap s from this pool and free their memory. abstract fun clear(): Unit get Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. abstract fun get(width: Int , height: Int , config: Config ): Bitmap getDirty Identical to get except that any returned Bitmap may not have been erased and may contain random data. abstract fun getDirty(width: Int , height: Int , config: Config ): Bitmap getDirtyOrNull Identical to getDirty except that null will be returned if the pool does not contain a usable Bitmap. abstract fun getDirtyOrNull(width: Int , height: Int , config: Config ): Bitmap ? getOrNull Identical to get except that null will be returned if the pool does not contain a usable Bitmap. abstract fun getOrNull(width: Int , height: Int , config: Config ): Bitmap ? put Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the Bitmap and discards it. abstract fun put(bitmap: Bitmap ): Unit trimMemory abstract fun trimMemory(level: Int ): Unit","title":"Functions"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/#companion-object-functions","text":"Name Summary invoke Create a new BitmapPool . operator fun invoke(maxSize: Long ): BitmapPool","title":"Companion Object Functions"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/clear/","text":"coil-base / coil.bitmappool / BitmapPool / clear clear abstract fun clear(): Unit Remove all Bitmap s from this pool and free their memory.","title":"Clear"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/clear/#clear","text":"abstract fun clear(): Unit Remove all Bitmap s from this pool and free their memory.","title":"clear"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-dirty-or-null/","text":"coil-base / coil.bitmappool / BitmapPool / getDirtyOrNull getDirtyOrNull abstract fun getDirtyOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to getDirty except that null will be returned if the pool does not contain a usable Bitmap.","title":"Get dirty or null"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-dirty-or-null/#getdirtyornull","text":"abstract fun getDirtyOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to getDirty except that null will be returned if the pool does not contain a usable Bitmap.","title":"getDirtyOrNull"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-dirty/","text":"coil-base / coil.bitmappool / BitmapPool / getDirty getDirty abstract fun getDirty(@Px width: Int , @Px height: Int , config: Config ): Bitmap Identical to get except that any returned Bitmap may not have been erased and may contain random data. If no Bitmap with the requested attributes is present in the pool, a new one will be allocated. Although this method is slightly more efficient than BitmapPool.get it should be used with caution and only when the caller is sure that they are going to erase the Bitmap entirely before writing new data to it.","title":"Get dirty"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-dirty/#getdirty","text":"abstract fun getDirty(@Px width: Int , @Px height: Int , config: Config ): Bitmap Identical to get except that any returned Bitmap may not have been erased and may contain random data. If no Bitmap with the requested attributes is present in the pool, a new one will be allocated. Although this method is slightly more efficient than BitmapPool.get it should be used with caution and only when the caller is sure that they are going to erase the Bitmap entirely before writing new data to it.","title":"getDirty"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-or-null/","text":"coil-base / coil.bitmappool / BitmapPool / getOrNull getOrNull abstract fun getOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to get except that null will be returned if the pool does not contain a usable Bitmap.","title":"Get or null"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get-or-null/#getornull","text":"abstract fun getOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to get except that null will be returned if the pool does not contain a usable Bitmap.","title":"getOrNull"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get/","text":"coil-base / coil.bitmappool / BitmapPool / get get abstract fun get(@Px width: Int , @Px height: Int , config: Config ): Bitmap Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. If no Bitmap with the requested attributes is present in the pool, a new one will be allocated. Because this method erases all pixels in the Bitmap , this method is slightly slower than getDirty . If the Bitmap is being obtained to be used in BitmapFactory or in any other case where every pixel in the Bitmap will always be overwritten or cleared, getDirty will be faster. When in doubt, use this method to ensure correctness.","title":"Get"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/get/#get","text":"abstract fun get(@Px width: Int , @Px height: Int , config: Config ): Bitmap Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. If no Bitmap with the requested attributes is present in the pool, a new one will be allocated. Because this method erases all pixels in the Bitmap , this method is slightly slower than getDirty . If the Bitmap is being obtained to be used in BitmapFactory or in any other case where every pixel in the Bitmap will always be overwritten or cleared, getDirty will be faster. When in doubt, use this method to ensure correctness.","title":"get"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/invoke/","text":"coil-base / coil.bitmappool / BitmapPool / invoke invoke operator fun invoke(maxSize: Long ): BitmapPool Create a new BitmapPool . Parameters maxSize - The maximum size of the pool in bytes.","title":"Invoke"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/invoke/#invoke","text":"operator fun invoke(maxSize: Long ): BitmapPool Create a new BitmapPool .","title":"invoke"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/invoke/#parameters","text":"maxSize - The maximum size of the pool in bytes.","title":"Parameters"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/put/","text":"coil-base / coil.bitmappool / BitmapPool / put put abstract fun put(bitmap: Bitmap ): Unit Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the Bitmap and discards it. Callers must not continue to use the Bitmap after calling this method.","title":"Put"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/put/#put","text":"abstract fun put(bitmap: Bitmap ): Unit Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the Bitmap and discards it. Callers must not continue to use the Bitmap after calling this method.","title":"put"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/trim-memory/","text":"coil-base / coil.bitmappool / BitmapPool / trimMemory trimMemory abstract fun trimMemory(level: Int ): Unit See Also ComponentCallbacks2.onTrimMemory","title":"Trim memory"},{"location":"api/coil-base/coil.bitmappool/-bitmap-pool/trim-memory/#trimmemory","text":"abstract fun trimMemory(level: Int ): Unit See Also ComponentCallbacks2.onTrimMemory","title":"trimMemory"},{"location":"api/coil-base/coil.collection/","text":"coil-base / coil.collection Package coil.collection Types Name Summary SparseIntArraySet A collection of unordered, unique Int s. class SparseIntArraySet","title":"Home"},{"location":"api/coil-base/coil.collection/#package-coilcollection","text":"","title":"Package coil.collection"},{"location":"api/coil-base/coil.collection/#types","text":"Name Summary SparseIntArraySet A collection of unordered, unique Int s. class SparseIntArraySet","title":"Types"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/","text":"coil-base / coil.collection / SparseIntArraySet SparseIntArraySet class SparseIntArraySet A collection of unordered, unique Int s. This data structure is intended to be more memory efficient than using a Set to store Int s, both because it avoids auto-boxing elements and it doesn't allocate a hash table. See Also SparseIntArray Constructors Name Summary init A collection of unordered, unique Int s. SparseIntArraySet(initialCapacity: Int = 10) Functions Name Summary add Adds an element to the set. fun add(element: Int ): Boolean clear Removes all elements from this SparseIntArraySet. fun clear(): Unit contains Return true if the SparseIntArraySet contains this element. fun contains(element: Int ): Boolean elementAt Given an index in the range [0, size) , returns the element from the index th key-value mapping that this SparseIntArraySet stores. fun elementAt(index: Int ): Int indexOfElement Returns the index for which elementAt would return the specified element, or a negative number if the specified element is not mapped. fun indexOfElement(key: Int ): Int remove Removes the element from the set. Return true if it was present. fun remove(element: Int ): Boolean removeAt Removes the element at the given index. fun removeAt(index: Int ): Unit size Returns the number of elements that this SparseIntArraySet currently stores. fun size(): Int Extension Functions Name Summary addAll fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit forEach fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit isEmpty fun SparseIntArraySet .isEmpty(): Boolean isNotEmpty fun SparseIntArraySet .isNotEmpty(): Boolean minusAssign operator fun SparseIntArraySet .minusAssign(element: Int ): Unit plus operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet plusAssign operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"Home"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/#sparseintarrayset","text":"class SparseIntArraySet A collection of unordered, unique Int s. This data structure is intended to be more memory efficient than using a Set to store Int s, both because it avoids auto-boxing elements and it doesn't allocate a hash table. See Also SparseIntArray","title":"SparseIntArraySet"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/#constructors","text":"Name Summary init A collection of unordered, unique Int s. SparseIntArraySet(initialCapacity: Int = 10)","title":"Constructors"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/#functions","text":"Name Summary add Adds an element to the set. fun add(element: Int ): Boolean clear Removes all elements from this SparseIntArraySet. fun clear(): Unit contains Return true if the SparseIntArraySet contains this element. fun contains(element: Int ): Boolean elementAt Given an index in the range [0, size) , returns the element from the index th key-value mapping that this SparseIntArraySet stores. fun elementAt(index: Int ): Int indexOfElement Returns the index for which elementAt would return the specified element, or a negative number if the specified element is not mapped. fun indexOfElement(key: Int ): Int remove Removes the element from the set. Return true if it was present. fun remove(element: Int ): Boolean removeAt Removes the element at the given index. fun removeAt(index: Int ): Unit size Returns the number of elements that this SparseIntArraySet currently stores. fun size(): Int","title":"Functions"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/#extension-functions","text":"Name Summary addAll fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit forEach fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit isEmpty fun SparseIntArraySet .isEmpty(): Boolean isNotEmpty fun SparseIntArraySet .isNotEmpty(): Boolean minusAssign operator fun SparseIntArraySet .minusAssign(element: Int ): Unit plus operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet plusAssign operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"Extension Functions"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/-init-/","text":"coil-base / coil.collection / SparseIntArraySet / init init SparseIntArraySet(initialCapacity: Int = 10) A collection of unordered, unique Int s. This data structure is intended to be more memory efficient than using a Set to store Int s, both because it avoids auto-boxing elements and it doesn't allocate a hash table. See Also SparseIntArray","title":" init "},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/-init-/#init","text":"SparseIntArraySet(initialCapacity: Int = 10) A collection of unordered, unique Int s. This data structure is intended to be more memory efficient than using a Set to store Int s, both because it avoids auto-boxing elements and it doesn't allocate a hash table. See Also SparseIntArray","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/add/","text":"coil-base / coil.collection / SparseIntArraySet / add add fun add(element: Int ): Boolean Adds an element to the set.","title":"Add"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/add/#add","text":"fun add(element: Int ): Boolean Adds an element to the set.","title":"add"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/clear/","text":"coil-base / coil.collection / SparseIntArraySet / clear clear fun clear(): Unit Removes all elements from this SparseIntArraySet.","title":"Clear"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/clear/#clear","text":"fun clear(): Unit Removes all elements from this SparseIntArraySet.","title":"clear"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/contains/","text":"coil-base / coil.collection / SparseIntArraySet / contains contains fun contains(element: Int ): Boolean Return true if the SparseIntArraySet contains this element.","title":"Contains"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/contains/#contains","text":"fun contains(element: Int ): Boolean Return true if the SparseIntArraySet contains this element.","title":"contains"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/element-at/","text":"coil-base / coil.collection / SparseIntArraySet / elementAt elementAt fun elementAt(index: Int ): Int Given an index in the range [0, size) , returns the element from the index th key-value mapping that this SparseIntArraySet stores. The elements corresponding to indices in ascending order are guaranteed to be in ascending order, e.g., elementAt(0) will return the smallest element and elementAt(size()-1) will return the largest element.","title":"Element at"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/element-at/#elementat","text":"fun elementAt(index: Int ): Int Given an index in the range [0, size) , returns the element from the index th key-value mapping that this SparseIntArraySet stores. The elements corresponding to indices in ascending order are guaranteed to be in ascending order, e.g., elementAt(0) will return the smallest element and elementAt(size()-1) will return the largest element.","title":"elementAt"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/index-of-element/","text":"coil-base / coil.collection / SparseIntArraySet / indexOfElement indexOfElement fun indexOfElement(key: Int ): Int Returns the index for which elementAt would return the specified element, or a negative number if the specified element is not mapped.","title":"Index of element"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/index-of-element/#indexofelement","text":"fun indexOfElement(key: Int ): Int Returns the index for which elementAt would return the specified element, or a negative number if the specified element is not mapped.","title":"indexOfElement"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/remove-at/","text":"coil-base / coil.collection / SparseIntArraySet / removeAt removeAt fun removeAt(index: Int ): Unit Removes the element at the given index.","title":"Remove at"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/remove-at/#removeat","text":"fun removeAt(index: Int ): Unit Removes the element at the given index.","title":"removeAt"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/remove/","text":"coil-base / coil.collection / SparseIntArraySet / remove remove fun remove(element: Int ): Boolean Removes the element from the set. Return true if it was present.","title":"Remove"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/remove/#remove","text":"fun remove(element: Int ): Boolean Removes the element from the set. Return true if it was present.","title":"remove"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/size/","text":"coil-base / coil.collection / SparseIntArraySet / size size fun size(): Int Returns the number of elements that this SparseIntArraySet currently stores.","title":"Size"},{"location":"api/coil-base/coil.collection/-sparse-int-array-set/size/#size","text":"fun size(): Int Returns the number of elements that this SparseIntArraySet currently stores.","title":"size"},{"location":"api/coil-base/coil.decode/","text":"coil-base / coil.decode Package coil.decode Types Name Summary DataSource Represents the source that a Drawable was loaded from. enum class DataSource Decoder Converts a BufferedSource into a Drawable . interface Decoder DecodeResult The result of Decoder.decode . data class DecodeResult DecodeUtils A collection of useful utility methods for decoding images. object DecodeUtils Options A set of configuration options for fetching and decoding an image. data class Options","title":"Home"},{"location":"api/coil-base/coil.decode/#package-coildecode","text":"","title":"Package coil.decode"},{"location":"api/coil-base/coil.decode/#types","text":"Name Summary DataSource Represents the source that a Drawable was loaded from. enum class DataSource Decoder Converts a BufferedSource into a Drawable . interface Decoder DecodeResult The result of Decoder.decode . data class DecodeResult DecodeUtils A collection of useful utility methods for decoding images. object DecodeUtils Options A set of configuration options for fetching and decoding an image. data class Options","title":"Types"},{"location":"api/coil-base/coil.decode/-data-source/","text":"coil-base / coil.decode / DataSource DataSource enum class DataSource Represents the source that a Drawable was loaded from. See Also SourceResult.dataSource DrawableResult.dataSource Enum Values Name Summary NETWORK DISK MEMORY","title":"Home"},{"location":"api/coil-base/coil.decode/-data-source/#datasource","text":"enum class DataSource Represents the source that a Drawable was loaded from. See Also SourceResult.dataSource DrawableResult.dataSource","title":"DataSource"},{"location":"api/coil-base/coil.decode/-data-source/#enum-values","text":"Name Summary NETWORK DISK MEMORY","title":"Enum Values"},{"location":"api/coil-base/coil.decode/-data-source/-d-i-s-k/","text":"coil-base / coil.decode / DataSource / DISK DISK DISK","title":" d i s k"},{"location":"api/coil-base/coil.decode/-data-source/-d-i-s-k/#disk","text":"DISK","title":"DISK"},{"location":"api/coil-base/coil.decode/-data-source/-m-e-m-o-r-y/","text":"coil-base / coil.decode / DataSource / MEMORY MEMORY MEMORY","title":" m e m o r y"},{"location":"api/coil-base/coil.decode/-data-source/-m-e-m-o-r-y/#memory","text":"MEMORY","title":"MEMORY"},{"location":"api/coil-base/coil.decode/-data-source/-n-e-t-w-o-r-k/","text":"coil-base / coil.decode / DataSource / NETWORK NETWORK NETWORK","title":" n e t w o r k"},{"location":"api/coil-base/coil.decode/-data-source/-n-e-t-w-o-r-k/#network","text":"NETWORK","title":"NETWORK"},{"location":"api/coil-base/coil.decode/-decode-result/","text":"coil-base / coil.decode / DecodeResult DecodeResult data class DecodeResult The result of Decoder.decode . Parameters drawable - The decoded Drawable . isSampled - True if drawable is sampled (i.e. loaded into memory at less than its original size). See Also Decoder Constructors Name Summary init The result of Decoder.decode . DecodeResult(drawable: Drawable , isSampled: Boolean ) Properties Name Summary drawable The decoded Drawable . val drawable: Drawable isSampled True if drawable is sampled (i.e. loaded into memory at less than its original size). val isSampled: Boolean","title":"Home"},{"location":"api/coil-base/coil.decode/-decode-result/#decoderesult","text":"data class DecodeResult The result of Decoder.decode .","title":"DecodeResult"},{"location":"api/coil-base/coil.decode/-decode-result/#parameters","text":"drawable - The decoded Drawable . isSampled - True if drawable is sampled (i.e. loaded into memory at less than its original size). See Also Decoder","title":"Parameters"},{"location":"api/coil-base/coil.decode/-decode-result/#constructors","text":"Name Summary init The result of Decoder.decode . DecodeResult(drawable: Drawable , isSampled: Boolean )","title":"Constructors"},{"location":"api/coil-base/coil.decode/-decode-result/#properties","text":"Name Summary drawable The decoded Drawable . val drawable: Drawable isSampled True if drawable is sampled (i.e. loaded into memory at less than its original size). val isSampled: Boolean","title":"Properties"},{"location":"api/coil-base/coil.decode/-decode-result/-init-/","text":"coil-base / coil.decode / DecodeResult / init init DecodeResult(drawable: Drawable , isSampled: Boolean ) The result of Decoder.decode . Parameters drawable - The decoded Drawable . isSampled - True if drawable is sampled (i.e. loaded into memory at less than its original size). See Also Decoder","title":" init "},{"location":"api/coil-base/coil.decode/-decode-result/-init-/#init","text":"DecodeResult(drawable: Drawable , isSampled: Boolean ) The result of Decoder.decode .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.decode/-decode-result/-init-/#parameters","text":"drawable - The decoded Drawable . isSampled - True if drawable is sampled (i.e. loaded into memory at less than its original size). See Also Decoder","title":"Parameters"},{"location":"api/coil-base/coil.decode/-decode-result/drawable/","text":"coil-base / coil.decode / DecodeResult / drawable drawable val drawable: Drawable The decoded Drawable .","title":"Drawable"},{"location":"api/coil-base/coil.decode/-decode-result/drawable/#drawable","text":"val drawable: Drawable The decoded Drawable .","title":"drawable"},{"location":"api/coil-base/coil.decode/-decode-result/is-sampled/","text":"coil-base / coil.decode / DecodeResult / isSampled isSampled val isSampled: Boolean True if drawable is sampled (i.e. loaded into memory at less than its original size).","title":"Is sampled"},{"location":"api/coil-base/coil.decode/-decode-result/is-sampled/#issampled","text":"val isSampled: Boolean True if drawable is sampled (i.e. loaded into memory at less than its original size).","title":"isSampled"},{"location":"api/coil-base/coil.decode/-decode-utils/","text":"coil-base / coil.decode / DecodeUtils DecodeUtils object DecodeUtils A collection of useful utility methods for decoding images. Functions Name Summary calculateInSampleSize Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( srcWidth and srcHeight ), the output dimensions ( destWidth , destHeight ), and the scale . fun calculateInSampleSize(srcWidth: Int , srcHeight: Int , destWidth: Int , destHeight: Int , scale: Scale ): Int computeSizeMultiplier Calculate the percentage to multiply the source dimensions by to fit/fill the destination dimensions while preserving aspect ratio. fun computeSizeMultiplier(srcWidth: Int , srcHeight: Int , destWidth: Int , destHeight: Int , scale: Scale ): Double fun computeSizeMultiplier(srcWidth: Float , srcHeight: Float , destWidth: Float , destHeight: Float , scale: Scale ): Float fun computeSizeMultiplier(srcWidth: Double , srcHeight: Double , destWidth: Double , destHeight: Double , scale: Scale ): Double isAnimatedWebP Return true if the source contains an animated WebP image. The source is not consumed. fun isAnimatedWebP(source: BufferedSource ): Boolean isGif Return true if the source contains a GIF image. The source is not consumed. fun isGif(source: BufferedSource ): Boolean isWebP Return true if the source contains a WebP image. The source is not consumed. fun isWebP(source: BufferedSource ): Boolean","title":"Home"},{"location":"api/coil-base/coil.decode/-decode-utils/#decodeutils","text":"object DecodeUtils A collection of useful utility methods for decoding images.","title":"DecodeUtils"},{"location":"api/coil-base/coil.decode/-decode-utils/#functions","text":"Name Summary calculateInSampleSize Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( srcWidth and srcHeight ), the output dimensions ( destWidth , destHeight ), and the scale . fun calculateInSampleSize(srcWidth: Int , srcHeight: Int , destWidth: Int , destHeight: Int , scale: Scale ): Int computeSizeMultiplier Calculate the percentage to multiply the source dimensions by to fit/fill the destination dimensions while preserving aspect ratio. fun computeSizeMultiplier(srcWidth: Int , srcHeight: Int , destWidth: Int , destHeight: Int , scale: Scale ): Double fun computeSizeMultiplier(srcWidth: Float , srcHeight: Float , destWidth: Float , destHeight: Float , scale: Scale ): Float fun computeSizeMultiplier(srcWidth: Double , srcHeight: Double , destWidth: Double , destHeight: Double , scale: Scale ): Double isAnimatedWebP Return true if the source contains an animated WebP image. The source is not consumed. fun isAnimatedWebP(source: BufferedSource ): Boolean isGif Return true if the source contains a GIF image. The source is not consumed. fun isGif(source: BufferedSource ): Boolean isWebP Return true if the source contains a WebP image. The source is not consumed. fun isWebP(source: BufferedSource ): Boolean","title":"Functions"},{"location":"api/coil-base/coil.decode/-decode-utils/calculate-in-sample-size/","text":"coil-base / coil.decode / DecodeUtils / calculateInSampleSize calculateInSampleSize @JvmStatic fun calculateInSampleSize(@Px srcWidth: Int , @Px srcHeight: Int , @Px destWidth: Int , @Px destHeight: Int , scale: Scale ): Int Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( srcWidth and srcHeight ), the output dimensions ( destWidth , destHeight ), and the scale .","title":"Calculate in sample size"},{"location":"api/coil-base/coil.decode/-decode-utils/calculate-in-sample-size/#calculateinsamplesize","text":"@JvmStatic fun calculateInSampleSize(@Px srcWidth: Int , @Px srcHeight: Int , @Px destWidth: Int , @Px destHeight: Int , scale: Scale ): Int Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( srcWidth and srcHeight ), the output dimensions ( destWidth , destHeight ), and the scale .","title":"calculateInSampleSize"},{"location":"api/coil-base/coil.decode/-decode-utils/compute-size-multiplier/","text":"coil-base / coil.decode / DecodeUtils / computeSizeMultiplier computeSizeMultiplier @JvmStatic fun computeSizeMultiplier(@Px srcWidth: Int , @Px srcHeight: Int , @Px destWidth: Int , @Px destHeight: Int , scale: Scale ): Double Calculate the percentage to multiply the source dimensions by to fit/fill the destination dimensions while preserving aspect ratio. @JvmStatic fun computeSizeMultiplier(@Px srcWidth: Float , @Px srcHeight: Float , @Px destWidth: Float , @Px destHeight: Float , scale: Scale ): Float @JvmStatic fun computeSizeMultiplier(@Px srcWidth: Double , @Px srcHeight: Double , @Px destWidth: Double , @Px destHeight: Double , scale: Scale ): Double See Also computeSizeMultiplier","title":"Compute size multiplier"},{"location":"api/coil-base/coil.decode/-decode-utils/compute-size-multiplier/#computesizemultiplier","text":"@JvmStatic fun computeSizeMultiplier(@Px srcWidth: Int , @Px srcHeight: Int , @Px destWidth: Int , @Px destHeight: Int , scale: Scale ): Double Calculate the percentage to multiply the source dimensions by to fit/fill the destination dimensions while preserving aspect ratio. @JvmStatic fun computeSizeMultiplier(@Px srcWidth: Float , @Px srcHeight: Float , @Px destWidth: Float , @Px destHeight: Float , scale: Scale ): Float @JvmStatic fun computeSizeMultiplier(@Px srcWidth: Double , @Px srcHeight: Double , @Px destWidth: Double , @Px destHeight: Double , scale: Scale ): Double See Also computeSizeMultiplier","title":"computeSizeMultiplier"},{"location":"api/coil-base/coil.decode/-decode-utils/is-animated-web-p/","text":"coil-base / coil.decode / DecodeUtils / isAnimatedWebP isAnimatedWebP @JvmStatic fun isAnimatedWebP(source: BufferedSource ): Boolean Return true if the source contains an animated WebP image. The source is not consumed.","title":"Is animated web p"},{"location":"api/coil-base/coil.decode/-decode-utils/is-animated-web-p/#isanimatedwebp","text":"@JvmStatic fun isAnimatedWebP(source: BufferedSource ): Boolean Return true if the source contains an animated WebP image. The source is not consumed.","title":"isAnimatedWebP"},{"location":"api/coil-base/coil.decode/-decode-utils/is-gif/","text":"coil-base / coil.decode / DecodeUtils / isGif isGif @JvmStatic fun isGif(source: BufferedSource ): Boolean Return true if the source contains a GIF image. The source is not consumed.","title":"Is gif"},{"location":"api/coil-base/coil.decode/-decode-utils/is-gif/#isgif","text":"@JvmStatic fun isGif(source: BufferedSource ): Boolean Return true if the source contains a GIF image. The source is not consumed.","title":"isGif"},{"location":"api/coil-base/coil.decode/-decode-utils/is-web-p/","text":"coil-base / coil.decode / DecodeUtils / isWebP isWebP @JvmStatic fun isWebP(source: BufferedSource ): Boolean Return true if the source contains a WebP image. The source is not consumed.","title":"Is web p"},{"location":"api/coil-base/coil.decode/-decode-utils/is-web-p/#iswebp","text":"@JvmStatic fun isWebP(source: BufferedSource ): Boolean Return true if the source contains a WebP image. The source is not consumed.","title":"isWebP"},{"location":"api/coil-base/coil.decode/-decoder/","text":"coil-base / coil.decode / Decoder Decoder interface Decoder Converts a BufferedSource into a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.). Functions Name Summary decode Decode source as a Drawable . abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles Return true if this decoder supports decoding source . abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Home"},{"location":"api/coil-base/coil.decode/-decoder/#decoder","text":"interface Decoder Converts a BufferedSource into a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.).","title":"Decoder"},{"location":"api/coil-base/coil.decode/-decoder/#functions","text":"Name Summary decode Decode source as a Drawable . abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles Return true if this decoder supports decoding source . abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-base/coil.decode/-decoder/decode/","text":"coil-base / coil.decode / Decoder / decode decode abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult Decode source as a Drawable . NOTE: Implementations are responsible for closing source when finished with it. Parameters pool - A BitmapPool which can be used to request Bitmap instances. source - The BufferedSource to read from. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Decode"},{"location":"api/coil-base/coil.decode/-decoder/decode/#decode","text":"abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult Decode source as a Drawable . NOTE: Implementations are responsible for closing source when finished with it.","title":"decode"},{"location":"api/coil-base/coil.decode/-decoder/decode/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. source - The BufferedSource to read from. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-decoder/handles/","text":"coil-base / coil.decode / Decoder / handles handles abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean Return true if this decoder supports decoding source . Implementations must not consume the source, as this can cause subsequent calls to handles and decode to fail. Prefer using BufferedSource.peek , BufferedSource.rangeEquals , or other non-destructive methods to check for the presence of header bytes or other markers. Implementations can also rely on mimeType , however it is not guaranteed to be accurate (e.g. a file that ends with .png, but is encoded as a .jpg). Parameters source - The BufferedSource to read from. mimeType - An optional MIME type for the source .","title":"Handles"},{"location":"api/coil-base/coil.decode/-decoder/handles/#handles","text":"abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean Return true if this decoder supports decoding source . Implementations must not consume the source, as this can cause subsequent calls to handles and decode to fail. Prefer using BufferedSource.peek , BufferedSource.rangeEquals , or other non-destructive methods to check for the presence of header bytes or other markers. Implementations can also rely on mimeType , however it is not guaranteed to be accurate (e.g. a file that ends with .png, but is encoded as a .jpg).","title":"handles"},{"location":"api/coil-base/coil.decode/-decoder/handles/#parameters","text":"source - The BufferedSource to read from. mimeType - An optional MIME type for the source .","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/","text":"coil-base / coil.decode / Options Options data class Options A set of configuration options for fetching and decoding an image. Fetcher s and Decoder s should respect these options as best as possible. Parameters config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . scale - The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. allowInexactSize - True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. allowRgb565 - True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. headers - The header fields to use for any network requests. parameters - A map of custom parameters. These are used to pass custom data to a component. networkCachePolicy - Determines if this request is allowed to read from the network. diskCachePolicy - Determines if this request is allowed to read/write from/to disk. Constructors Name Summary init A set of configuration options for fetching and decoding an image. Options(config: Config , colorSpace: ColorSpace ?, scale: Scale , allowInexactSize: Boolean , allowRgb565: Boolean , headers: Headers , parameters: Parameters , networkCachePolicy: CachePolicy , diskCachePolicy: CachePolicy ) Properties Name Summary allowInexactSize True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. val allowInexactSize: Boolean allowRgb565 True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. val allowRgb565: Boolean colorSpace The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . val colorSpace: ColorSpace ? config The requested config for any Bitmap s. val config: Config diskCachePolicy Determines if this request is allowed to read/write from/to disk. val diskCachePolicy: CachePolicy headers The header fields to use for any network requests. val headers: Headers networkCachePolicy Determines if this request is allowed to read from the network. val networkCachePolicy: CachePolicy parameters A map of custom parameters. These are used to pass custom data to a component. val parameters: Parameters scale The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. val scale: Scale","title":"Home"},{"location":"api/coil-base/coil.decode/-options/#options","text":"data class Options A set of configuration options for fetching and decoding an image. Fetcher s and Decoder s should respect these options as best as possible.","title":"Options"},{"location":"api/coil-base/coil.decode/-options/#parameters","text":"config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . scale - The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. allowInexactSize - True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. allowRgb565 - True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. headers - The header fields to use for any network requests. parameters - A map of custom parameters. These are used to pass custom data to a component. networkCachePolicy - Determines if this request is allowed to read from the network. diskCachePolicy - Determines if this request is allowed to read/write from/to disk.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/#constructors","text":"Name Summary init A set of configuration options for fetching and decoding an image. Options(config: Config , colorSpace: ColorSpace ?, scale: Scale , allowInexactSize: Boolean , allowRgb565: Boolean , headers: Headers , parameters: Parameters , networkCachePolicy: CachePolicy , diskCachePolicy: CachePolicy )","title":"Constructors"},{"location":"api/coil-base/coil.decode/-options/#properties","text":"Name Summary allowInexactSize True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. val allowInexactSize: Boolean allowRgb565 True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. val allowRgb565: Boolean colorSpace The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . val colorSpace: ColorSpace ? config The requested config for any Bitmap s. val config: Config diskCachePolicy Determines if this request is allowed to read/write from/to disk. val diskCachePolicy: CachePolicy headers The header fields to use for any network requests. val headers: Headers networkCachePolicy Determines if this request is allowed to read from the network. val networkCachePolicy: CachePolicy parameters A map of custom parameters. These are used to pass custom data to a component. val parameters: Parameters scale The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. val scale: Scale","title":"Properties"},{"location":"api/coil-base/coil.decode/-options/-init-/","text":"coil-base / coil.decode / Options / init init Options(config: Config , colorSpace: ColorSpace ?, scale: Scale , allowInexactSize: Boolean , allowRgb565: Boolean , headers: Headers , parameters: Parameters , networkCachePolicy: CachePolicy , diskCachePolicy: CachePolicy ) A set of configuration options for fetching and decoding an image. Fetcher s and Decoder s should respect these options as best as possible. Parameters config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . scale - The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. allowInexactSize - True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. allowRgb565 - True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. headers - The header fields to use for any network requests. parameters - A map of custom parameters. These are used to pass custom data to a component. networkCachePolicy - Determines if this request is allowed to read from the network. diskCachePolicy - Determines if this request is allowed to read/write from/to disk.","title":" init "},{"location":"api/coil-base/coil.decode/-options/-init-/#init","text":"Options(config: Config , colorSpace: ColorSpace ?, scale: Scale , allowInexactSize: Boolean , allowRgb565: Boolean , headers: Headers , parameters: Parameters , networkCachePolicy: CachePolicy , diskCachePolicy: CachePolicy ) A set of configuration options for fetching and decoding an image. Fetcher s and Decoder s should respect these options as best as possible.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.decode/-options/-init-/#parameters","text":"config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . scale - The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. allowInexactSize - True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. allowRgb565 - True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. headers - The header fields to use for any network requests. parameters - A map of custom parameters. These are used to pass custom data to a component. networkCachePolicy - Determines if this request is allowed to read from the network. diskCachePolicy - Determines if this request is allowed to read/write from/to disk.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/allow-inexact-size/","text":"coil-base / coil.decode / Options / allowInexactSize allowInexactSize val allowInexactSize: Boolean True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization.","title":"Allow inexact size"},{"location":"api/coil-base/coil.decode/-options/allow-inexact-size/#allowinexactsize","text":"val allowInexactSize: Boolean True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization.","title":"allowInexactSize"},{"location":"api/coil-base/coil.decode/-options/allow-rgb565/","text":"coil-base / coil.decode / Options / allowRgb565 allowRgb565 val allowRgb565: Boolean True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha.","title":"Allow rgb565"},{"location":"api/coil-base/coil.decode/-options/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha.","title":"allowRgb565"},{"location":"api/coil-base/coil.decode/-options/color-space/","text":"coil-base / coil.decode / Options / colorSpace colorSpace val colorSpace: ColorSpace ? The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb .","title":"Color space"},{"location":"api/coil-base/coil.decode/-options/color-space/#colorspace","text":"val colorSpace: ColorSpace ? The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb .","title":"colorSpace"},{"location":"api/coil-base/coil.decode/-options/config/","text":"coil-base / coil.decode / Options / config config val config: Config The requested config for any Bitmap s.","title":"Config"},{"location":"api/coil-base/coil.decode/-options/config/#config","text":"val config: Config The requested config for any Bitmap s.","title":"config"},{"location":"api/coil-base/coil.decode/-options/disk-cache-policy/","text":"coil-base / coil.decode / Options / diskCachePolicy diskCachePolicy val diskCachePolicy: CachePolicy Determines if this request is allowed to read/write from/to disk.","title":"Disk cache policy"},{"location":"api/coil-base/coil.decode/-options/disk-cache-policy/#diskcachepolicy","text":"val diskCachePolicy: CachePolicy Determines if this request is allowed to read/write from/to disk.","title":"diskCachePolicy"},{"location":"api/coil-base/coil.decode/-options/headers/","text":"coil-base / coil.decode / Options / headers headers val headers: Headers The header fields to use for any network requests.","title":"Headers"},{"location":"api/coil-base/coil.decode/-options/headers/#headers","text":"val headers: Headers The header fields to use for any network requests.","title":"headers"},{"location":"api/coil-base/coil.decode/-options/network-cache-policy/","text":"coil-base / coil.decode / Options / networkCachePolicy networkCachePolicy val networkCachePolicy: CachePolicy Determines if this request is allowed to read from the network.","title":"Network cache policy"},{"location":"api/coil-base/coil.decode/-options/network-cache-policy/#networkcachepolicy","text":"val networkCachePolicy: CachePolicy Determines if this request is allowed to read from the network.","title":"networkCachePolicy"},{"location":"api/coil-base/coil.decode/-options/parameters/","text":"coil-base / coil.decode / Options / parameters parameters val parameters: Parameters A map of custom parameters. These are used to pass custom data to a component.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/parameters/#parameters","text":"val parameters: Parameters A map of custom parameters. These are used to pass custom data to a component.","title":"parameters"},{"location":"api/coil-base/coil.decode/-options/scale/","text":"coil-base / coil.decode / Options / scale scale val scale: Scale The scaling algorithm for how to fit the source image's dimensions into the target's dimensions.","title":"Scale"},{"location":"api/coil-base/coil.decode/-options/scale/#scale","text":"val scale: Scale The scaling algorithm for how to fit the source image's dimensions into the target's dimensions.","title":"scale"},{"location":"api/coil-base/coil.drawable/","text":"coil-base / coil.drawable Package coil.drawable Types Name Summary CrossfadeDrawable A Drawable that crossfades from start to end . class CrossfadeDrawable : Drawable , Callback , Animatable2Compat","title":"Home"},{"location":"api/coil-base/coil.drawable/#package-coildrawable","text":"","title":"Package coil.drawable"},{"location":"api/coil-base/coil.drawable/#types","text":"Name Summary CrossfadeDrawable A Drawable that crossfades from start to end . class CrossfadeDrawable : Drawable , Callback , Animatable2Compat","title":"Types"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable CrossfadeDrawable class CrossfadeDrawable : Drawable , Callback , Animatable2Compat A Drawable that crossfades from start to end . NOTE: The animation can only be executed once as the start drawable is dereferenced at the end of the transition. Parameters start - The Drawable to crossfade from. end - The Drawable to crossfade to. scale - The scaling algorithm for start and end . durationMillis - The duration of the crossfade animation. Constructors Name Summary init A Drawable that crossfades from start to end . CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION) Properties Name Summary durationMillis The duration of the crossfade animation. val durationMillis: Int end The Drawable to crossfade to. val end: Drawable ? scale The scaling algorithm for start and end . val scale: Scale Functions Name Summary clearAnimationCallbacks fun clearAnimationCallbacks(): Unit draw fun draw(canvas: Canvas ): Unit getAlpha fun getAlpha(): Int getColorFilter fun getColorFilter(): ColorFilter ? getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit onLevelChange fun onLevelChange(level: Int ): Boolean onStateChange fun onStateChange(state: IntArray ): Boolean registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setTint fun setTint(tintColor: Int ): Unit setTintBlendMode fun setTintBlendMode(blendMode: BlendMode ?): Unit setTintList fun setTintList(tint: ColorStateList ?): Unit setTintMode fun setTintMode(tintMode: Mode ?): Unit start fun start(): Unit stop fun stop(): Unit unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit Companion Object Properties Name Summary DEFAULT_DURATION const val DEFAULT_DURATION: Int","title":"Home"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#crossfadedrawable","text":"class CrossfadeDrawable : Drawable , Callback , Animatable2Compat A Drawable that crossfades from start to end . NOTE: The animation can only be executed once as the start drawable is dereferenced at the end of the transition.","title":"CrossfadeDrawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#parameters","text":"start - The Drawable to crossfade from. end - The Drawable to crossfade to. scale - The scaling algorithm for start and end . durationMillis - The duration of the crossfade animation.","title":"Parameters"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#constructors","text":"Name Summary init A Drawable that crossfades from start to end . CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION)","title":"Constructors"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#properties","text":"Name Summary durationMillis The duration of the crossfade animation. val durationMillis: Int end The Drawable to crossfade to. val end: Drawable ? scale The scaling algorithm for start and end . val scale: Scale","title":"Properties"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#functions","text":"Name Summary clearAnimationCallbacks fun clearAnimationCallbacks(): Unit draw fun draw(canvas: Canvas ): Unit getAlpha fun getAlpha(): Int getColorFilter fun getColorFilter(): ColorFilter ? getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit onLevelChange fun onLevelChange(level: Int ): Boolean onStateChange fun onStateChange(state: IntArray ): Boolean registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setTint fun setTint(tintColor: Int ): Unit setTintBlendMode fun setTintBlendMode(blendMode: BlendMode ?): Unit setTintList fun setTintList(tint: ColorStateList ?): Unit setTintMode fun setTintMode(tintMode: Mode ?): Unit start fun start(): Unit stop fun stop(): Unit unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Functions"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#companion-object-properties","text":"Name Summary DEFAULT_DURATION const val DEFAULT_DURATION: Int","title":"Companion Object Properties"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-d-e-f-a-u-l-t_-d-u-r-a-t-i-o-n/","text":"coil-base / coil.drawable / CrossfadeDrawable / DEFAULT_DURATION DEFAULT_DURATION const val DEFAULT_DURATION: Int","title":" d e f a u l t  d u r a t i o n"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-d-e-f-a-u-l-t_-d-u-r-a-t-i-o-n/#default_duration","text":"const val DEFAULT_DURATION: Int","title":"DEFAULT_DURATION"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-init-/","text":"coil-base / coil.drawable / CrossfadeDrawable / init init CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION) A Drawable that crossfades from start to end . NOTE: The animation can only be executed once as the start drawable is dereferenced at the end of the transition. Parameters start - The Drawable to crossfade from. end - The Drawable to crossfade to. scale - The scaling algorithm for start and end . durationMillis - The duration of the crossfade animation.","title":" init "},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-init-/#init","text":"CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION) A Drawable that crossfades from start to end . NOTE: The animation can only be executed once as the start drawable is dereferenced at the end of the transition.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-init-/#parameters","text":"start - The Drawable to crossfade from. end - The Drawable to crossfade to. scale - The scaling algorithm for start and end . durationMillis - The duration of the crossfade animation.","title":"Parameters"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/clear-animation-callbacks/","text":"coil-base / coil.drawable / CrossfadeDrawable / clearAnimationCallbacks clearAnimationCallbacks fun clearAnimationCallbacks(): Unit","title":"Clear animation callbacks"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/clear-animation-callbacks/#clearanimationcallbacks","text":"fun clearAnimationCallbacks(): Unit","title":"clearAnimationCallbacks"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/draw/","text":"coil-base / coil.drawable / CrossfadeDrawable / draw draw fun draw(canvas: Canvas ): Unit","title":"Draw"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/draw/#draw","text":"fun draw(canvas: Canvas ): Unit","title":"draw"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/duration-millis/","text":"coil-base / coil.drawable / CrossfadeDrawable / durationMillis durationMillis val durationMillis: Int The duration of the crossfade animation.","title":"Duration millis"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/duration-millis/#durationmillis","text":"val durationMillis: Int The duration of the crossfade animation.","title":"durationMillis"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/end/","text":"coil-base / coil.drawable / CrossfadeDrawable / end end val end: Drawable ? The Drawable to crossfade to.","title":"End"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/end/#end","text":"val end: Drawable ? The Drawable to crossfade to.","title":"end"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-alpha/","text":"coil-base / coil.drawable / CrossfadeDrawable / getAlpha getAlpha fun getAlpha(): Int","title":"Get alpha"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-alpha/#getalpha","text":"fun getAlpha(): Int","title":"getAlpha"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-color-filter/","text":"coil-base / coil.drawable / CrossfadeDrawable / getColorFilter getColorFilter fun getColorFilter(): ColorFilter ?","title":"Get color filter"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-color-filter/#getcolorfilter","text":"fun getColorFilter(): ColorFilter ?","title":"getColorFilter"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-height/","text":"coil-base / coil.drawable / CrossfadeDrawable / getIntrinsicHeight getIntrinsicHeight fun getIntrinsicHeight(): Int","title":"Get intrinsic height"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-height/#getintrinsicheight","text":"fun getIntrinsicHeight(): Int","title":"getIntrinsicHeight"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-width/","text":"coil-base / coil.drawable / CrossfadeDrawable / getIntrinsicWidth getIntrinsicWidth fun getIntrinsicWidth(): Int","title":"Get intrinsic width"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-width/#getintrinsicwidth","text":"fun getIntrinsicWidth(): Int","title":"getIntrinsicWidth"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-opacity/","text":"coil-base / coil.drawable / CrossfadeDrawable / getOpacity getOpacity fun getOpacity(): Int","title":"Get opacity"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-opacity/#getopacity","text":"fun getOpacity(): Int","title":"getOpacity"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/invalidate-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable / invalidateDrawable invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit","title":"Invalidate drawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/invalidate-drawable/#invalidatedrawable","text":"fun invalidateDrawable(who: Drawable ): Unit","title":"invalidateDrawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/is-running/","text":"coil-base / coil.drawable / CrossfadeDrawable / isRunning isRunning fun isRunning(): Boolean","title":"Is running"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/is-running/#isrunning","text":"fun isRunning(): Boolean","title":"isRunning"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-bounds-change/","text":"coil-base / coil.drawable / CrossfadeDrawable / onBoundsChange onBoundsChange protected fun onBoundsChange(bounds: Rect ): Unit","title":"On bounds change"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-bounds-change/#onboundschange","text":"protected fun onBoundsChange(bounds: Rect ): Unit","title":"onBoundsChange"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-level-change/","text":"coil-base / coil.drawable / CrossfadeDrawable / onLevelChange onLevelChange protected fun onLevelChange(level: Int ): Boolean","title":"On level change"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-level-change/#onlevelchange","text":"protected fun onLevelChange(level: Int ): Boolean","title":"onLevelChange"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-state-change/","text":"coil-base / coil.drawable / CrossfadeDrawable / onStateChange onStateChange protected fun onStateChange(state: IntArray ): Boolean","title":"On state change"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-state-change/#onstatechange","text":"protected fun onStateChange(state: IntArray ): Boolean","title":"onStateChange"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/register-animation-callback/","text":"coil-base / coil.drawable / CrossfadeDrawable / registerAnimationCallback registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit","title":"Register animation callback"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/register-animation-callback/#registeranimationcallback","text":"fun registerAnimationCallback(callback: AnimationCallback ): Unit","title":"registerAnimationCallback"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/scale/","text":"coil-base / coil.drawable / CrossfadeDrawable / scale scale val scale: Scale The scaling algorithm for start and end .","title":"Scale"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/scale/#scale","text":"val scale: Scale The scaling algorithm for start and end .","title":"scale"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/schedule-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable / scheduleDrawable scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit","title":"Schedule drawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/schedule-drawable/#scheduledrawable","text":"fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit","title":"scheduleDrawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-alpha/","text":"coil-base / coil.drawable / CrossfadeDrawable / setAlpha setAlpha fun setAlpha(alpha: Int ): Unit","title":"Set alpha"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-alpha/#setalpha","text":"fun setAlpha(alpha: Int ): Unit","title":"setAlpha"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-color-filter/","text":"coil-base / coil.drawable / CrossfadeDrawable / setColorFilter setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"Set color filter"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-color-filter/#setcolorfilter","text":"fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"setColorFilter"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-blend-mode/","text":"coil-base / coil.drawable / CrossfadeDrawable / setTintBlendMode setTintBlendMode fun setTintBlendMode(blendMode: BlendMode ?): Unit","title":"Set tint blend mode"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-blend-mode/#settintblendmode","text":"fun setTintBlendMode(blendMode: BlendMode ?): Unit","title":"setTintBlendMode"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-list/","text":"coil-base / coil.drawable / CrossfadeDrawable / setTintList setTintList fun setTintList(tint: ColorStateList ?): Unit","title":"Set tint list"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-list/#settintlist","text":"fun setTintList(tint: ColorStateList ?): Unit","title":"setTintList"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-mode/","text":"coil-base / coil.drawable / CrossfadeDrawable / setTintMode setTintMode fun setTintMode(tintMode: Mode ?): Unit","title":"Set tint mode"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-mode/#settintmode","text":"fun setTintMode(tintMode: Mode ?): Unit","title":"setTintMode"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint/","text":"coil-base / coil.drawable / CrossfadeDrawable / setTint setTint fun setTint(tintColor: Int ): Unit","title":"Set tint"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint/#settint","text":"fun setTint(tintColor: Int ): Unit","title":"setTint"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/start/","text":"coil-base / coil.drawable / CrossfadeDrawable / start start fun start(): Unit","title":"Start"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/start/#start","text":"fun start(): Unit","title":"start"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/stop/","text":"coil-base / coil.drawable / CrossfadeDrawable / stop stop fun stop(): Unit","title":"Stop"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/stop/#stop","text":"fun stop(): Unit","title":"stop"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/unregister-animation-callback/","text":"coil-base / coil.drawable / CrossfadeDrawable / unregisterAnimationCallback unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean","title":"Unregister animation callback"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/unregister-animation-callback/#unregisteranimationcallback","text":"fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean","title":"unregisterAnimationCallback"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/unschedule-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable / unscheduleDrawable unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Unschedule drawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/unschedule-drawable/#unscheduledrawable","text":"fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"unscheduleDrawable"},{"location":"api/coil-base/coil.extension/","text":"coil-base / coil.extension Package coil.extension Functions Name Summary addAll fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit forEach fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit get operator fun Parameters .get(key: String ): Any ? isEmpty fun SparseIntArraySet .isEmpty(): Boolean isNotEmpty fun Parameters .isNotEmpty(): Boolean fun SparseIntArraySet .isNotEmpty(): Boolean minusAssign operator fun SparseIntArraySet .minusAssign(element: Int ): Unit plus operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet plusAssign operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"Home"},{"location":"api/coil-base/coil.extension/#package-coilextension","text":"","title":"Package coil.extension"},{"location":"api/coil-base/coil.extension/#functions","text":"Name Summary addAll fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit forEach fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit get operator fun Parameters .get(key: String ): Any ? isEmpty fun SparseIntArraySet .isEmpty(): Boolean isNotEmpty fun Parameters .isNotEmpty(): Boolean fun SparseIntArraySet .isNotEmpty(): Boolean minusAssign operator fun SparseIntArraySet .minusAssign(element: Int ): Unit plus operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet plusAssign operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"Functions"},{"location":"api/coil-base/coil.extension/add-all/","text":"coil-base / coil.extension / addAll addAll fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit","title":"Add all"},{"location":"api/coil-base/coil.extension/add-all/#addall","text":"fun SparseIntArraySet .addAll(other: SparseIntArraySet ): Unit","title":"addAll"},{"location":"api/coil-base/coil.extension/for-each/","text":"coil-base / coil.extension / forEach forEach inline fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit","title":"For each"},{"location":"api/coil-base/coil.extension/for-each/#foreach","text":"inline fun SparseIntArraySet .forEach(action: (element: Int ) - Unit ): Unit","title":"forEach"},{"location":"api/coil-base/coil.extension/get/","text":"coil-base / coil.extension / get get operator fun Parameters .get(key: String ): Any ?","title":"Get"},{"location":"api/coil-base/coil.extension/get/#get","text":"operator fun Parameters .get(key: String ): Any ?","title":"get"},{"location":"api/coil-base/coil.extension/is-empty/","text":"coil-base / coil.extension / isEmpty isEmpty fun SparseIntArraySet .isEmpty(): Boolean","title":"Is empty"},{"location":"api/coil-base/coil.extension/is-empty/#isempty","text":"fun SparseIntArraySet .isEmpty(): Boolean","title":"isEmpty"},{"location":"api/coil-base/coil.extension/is-not-empty/","text":"coil-base / coil.extension / isNotEmpty isNotEmpty fun Parameters .isNotEmpty(): Boolean fun SparseIntArraySet .isNotEmpty(): Boolean","title":"Is not empty"},{"location":"api/coil-base/coil.extension/is-not-empty/#isnotempty","text":"fun Parameters .isNotEmpty(): Boolean fun SparseIntArraySet .isNotEmpty(): Boolean","title":"isNotEmpty"},{"location":"api/coil-base/coil.extension/minus-assign/","text":"coil-base / coil.extension / minusAssign minusAssign operator fun SparseIntArraySet .minusAssign(element: Int ): Unit","title":"Minus assign"},{"location":"api/coil-base/coil.extension/minus-assign/#minusassign","text":"operator fun SparseIntArraySet .minusAssign(element: Int ): Unit","title":"minusAssign"},{"location":"api/coil-base/coil.extension/plus-assign/","text":"coil-base / coil.extension / plusAssign plusAssign operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"Plus assign"},{"location":"api/coil-base/coil.extension/plus-assign/#plusassign","text":"operator fun SparseIntArraySet .plusAssign(element: Int ): Unit","title":"plusAssign"},{"location":"api/coil-base/coil.extension/plus/","text":"coil-base / coil.extension / plus plus operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet","title":"Plus"},{"location":"api/coil-base/coil.extension/plus/#plus","text":"operator fun SparseIntArraySet .plus(other: SparseIntArraySet ): SparseIntArraySet","title":"plus"},{"location":"api/coil-base/coil.fetch/","text":"coil-base / coil.fetch Package coil.fetch Types Name Summary DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . data class DrawableResult : FetchResult Fetcher A Fetcher translates data into either a BufferedSource or a Drawable . interface Fetcher T : Any FetchResult The result of Fetcher.fetch . sealed class FetchResult SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . data class SourceResult : FetchResult","title":"Home"},{"location":"api/coil-base/coil.fetch/#package-coilfetch","text":"","title":"Package coil.fetch"},{"location":"api/coil-base/coil.fetch/#types","text":"Name Summary DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . data class DrawableResult : FetchResult Fetcher A Fetcher translates data into either a BufferedSource or a Drawable . interface Fetcher T : Any FetchResult The result of Fetcher.fetch . sealed class FetchResult SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . data class SourceResult : FetchResult","title":"Types"},{"location":"api/coil-base/coil.fetch/-fetch-result/","text":"coil-base / coil.fetch / FetchResult FetchResult sealed class FetchResult The result of Fetcher.fetch . Inheritors Name Summary DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . data class DrawableResult : FetchResult SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . data class SourceResult : FetchResult","title":" fetch result"},{"location":"api/coil-base/coil.fetch/-fetch-result/#fetchresult","text":"sealed class FetchResult The result of Fetcher.fetch .","title":"FetchResult"},{"location":"api/coil-base/coil.fetch/-fetch-result/#inheritors","text":"Name Summary DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . data class DrawableResult : FetchResult SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . data class SourceResult : FetchResult","title":"Inheritors"},{"location":"api/coil-base/coil.fetch/-drawable-result/","text":"coil-base / coil.fetch / DrawableResult DrawableResult data class DrawableResult : FetchResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . Parameters drawable - The loaded Drawable . dataSource - The source that drawable was fetched from. isSampled - True if drawable is sampled (i.e. not loaded into memory at full size). Constructors Name Summary init A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource ) Properties Name Summary dataSource The source that drawable was fetched from. val dataSource: DataSource drawable The loaded Drawable . val drawable: Drawable isSampled True if drawable is sampled (i.e. not loaded into memory at full size). val isSampled: Boolean","title":"Home"},{"location":"api/coil-base/coil.fetch/-drawable-result/#drawableresult","text":"data class DrawableResult : FetchResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource .","title":"DrawableResult"},{"location":"api/coil-base/coil.fetch/-drawable-result/#parameters","text":"drawable - The loaded Drawable . dataSource - The source that drawable was fetched from. isSampled - True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-drawable-result/#constructors","text":"Name Summary init A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource )","title":"Constructors"},{"location":"api/coil-base/coil.fetch/-drawable-result/#properties","text":"Name Summary dataSource The source that drawable was fetched from. val dataSource: DataSource drawable The loaded Drawable . val drawable: Drawable isSampled True if drawable is sampled (i.e. not loaded into memory at full size). val isSampled: Boolean","title":"Properties"},{"location":"api/coil-base/coil.fetch/-drawable-result/-init-/","text":"coil-base / coil.fetch / DrawableResult / init init DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource ) A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . Parameters drawable - The loaded Drawable . dataSource - The source that drawable was fetched from. isSampled - True if drawable is sampled (i.e. not loaded into memory at full size).","title":" init "},{"location":"api/coil-base/coil.fetch/-drawable-result/-init-/#init","text":"DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource ) A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.fetch/-drawable-result/-init-/#parameters","text":"drawable - The loaded Drawable . dataSource - The source that drawable was fetched from. isSampled - True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-drawable-result/data-source/","text":"coil-base / coil.fetch / DrawableResult / dataSource dataSource val dataSource: DataSource The source that drawable was fetched from.","title":"Data source"},{"location":"api/coil-base/coil.fetch/-drawable-result/data-source/#datasource","text":"val dataSource: DataSource The source that drawable was fetched from.","title":"dataSource"},{"location":"api/coil-base/coil.fetch/-drawable-result/drawable/","text":"coil-base / coil.fetch / DrawableResult / drawable drawable val drawable: Drawable The loaded Drawable .","title":"Drawable"},{"location":"api/coil-base/coil.fetch/-drawable-result/drawable/#drawable","text":"val drawable: Drawable The loaded Drawable .","title":"drawable"},{"location":"api/coil-base/coil.fetch/-drawable-result/is-sampled/","text":"coil-base / coil.fetch / DrawableResult / isSampled isSampled val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Is sampled"},{"location":"api/coil-base/coil.fetch/-drawable-result/is-sampled/#issampled","text":"val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"isSampled"},{"location":"api/coil-base/coil.fetch/-fetcher/","text":"coil-base / coil.fetch / Fetcher Fetcher interface Fetcher T : Any A Fetcher translates data into either a BufferedSource or a Drawable . To accomplish this, fetchers fit into one of two types: Uses the data as a key to fetch bytes from a remote source (e.g. network or disk) and exposes is as a BufferedSource . e.g. HttpUrlFetcher Reads the data directly and translates it into a Drawable . e.g. BitmapFetcher Functions Name Summary fetch Load the data into memory. Perform any necessary fetching operations. abstract suspend fun fetch(pool: BitmapPool , data: T, size: Size , options: Options ): FetchResult handles Return true if this can load data . open fun handles(data: T): Boolean key Compute the memory cache key for data . abstract fun key(data: T): String ?","title":"Home"},{"location":"api/coil-base/coil.fetch/-fetcher/#fetcher","text":"interface Fetcher T : Any A Fetcher translates data into either a BufferedSource or a Drawable . To accomplish this, fetchers fit into one of two types: Uses the data as a key to fetch bytes from a remote source (e.g. network or disk) and exposes is as a BufferedSource . e.g. HttpUrlFetcher Reads the data directly and translates it into a Drawable . e.g. BitmapFetcher","title":"Fetcher"},{"location":"api/coil-base/coil.fetch/-fetcher/#functions","text":"Name Summary fetch Load the data into memory. Perform any necessary fetching operations. abstract suspend fun fetch(pool: BitmapPool , data: T, size: Size , options: Options ): FetchResult handles Return true if this can load data . open fun handles(data: T): Boolean key Compute the memory cache key for data . abstract fun key(data: T): String ?","title":"Functions"},{"location":"api/coil-base/coil.fetch/-fetcher/fetch/","text":"coil-base / coil.fetch / Fetcher / fetch fetch abstract suspend fun fetch(pool: BitmapPool , data: T, size: Size , options: Options ): FetchResult Load the data into memory. Perform any necessary fetching operations. Parameters pool - A BitmapPool which can be used to request Bitmap instances. data - The data to load. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Fetch"},{"location":"api/coil-base/coil.fetch/-fetcher/fetch/#fetch","text":"abstract suspend fun fetch(pool: BitmapPool , data: T, size: Size , options: Options ): FetchResult Load the data into memory. Perform any necessary fetching operations.","title":"fetch"},{"location":"api/coil-base/coil.fetch/-fetcher/fetch/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. data - The data to load. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-fetcher/handles/","text":"coil-base / coil.fetch / Fetcher / handles handles open fun handles(data: T): Boolean Return true if this can load data .","title":"Handles"},{"location":"api/coil-base/coil.fetch/-fetcher/handles/#handles","text":"open fun handles(data: T): Boolean Return true if this can load data .","title":"handles"},{"location":"api/coil-base/coil.fetch/-fetcher/key/","text":"coil-base / coil.fetch / Fetcher / key key abstract fun key(data: T): String ? Compute the memory cache key for data . Items with the same cache key will be treated as equivalent by the MemoryCache . Returning null will prevent the result of fetch from being added to the memory cache.","title":"Key"},{"location":"api/coil-base/coil.fetch/-fetcher/key/#key","text":"abstract fun key(data: T): String ? Compute the memory cache key for data . Items with the same cache key will be treated as equivalent by the MemoryCache . Returning null will prevent the result of fetch from being added to the memory cache.","title":"key"},{"location":"api/coil-base/coil.fetch/-source-result/","text":"coil-base / coil.fetch / SourceResult SourceResult data class SourceResult : FetchResult A raw BufferedSource result, which will be consumed by the relevant Decoder . Parameters source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from. Constructors Name Summary init A raw BufferedSource result, which will be consumed by the relevant Decoder . SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource ) Properties Name Summary dataSource Where source was loaded from. val dataSource: DataSource mimeType An optional MIME type for the source . val mimeType: String ? source An unconsumed BufferedSource that will be decoded by a Decoder . val source: BufferedSource","title":"Home"},{"location":"api/coil-base/coil.fetch/-source-result/#sourceresult","text":"data class SourceResult : FetchResult A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":"SourceResult"},{"location":"api/coil-base/coil.fetch/-source-result/#parameters","text":"source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-source-result/#constructors","text":"Name Summary init A raw BufferedSource result, which will be consumed by the relevant Decoder . SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource )","title":"Constructors"},{"location":"api/coil-base/coil.fetch/-source-result/#properties","text":"Name Summary dataSource Where source was loaded from. val dataSource: DataSource mimeType An optional MIME type for the source . val mimeType: String ? source An unconsumed BufferedSource that will be decoded by a Decoder . val source: BufferedSource","title":"Properties"},{"location":"api/coil-base/coil.fetch/-source-result/-init-/","text":"coil-base / coil.fetch / SourceResult / init init SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource ) A raw BufferedSource result, which will be consumed by the relevant Decoder . Parameters source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from.","title":" init "},{"location":"api/coil-base/coil.fetch/-source-result/-init-/#init","text":"SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource ) A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.fetch/-source-result/-init-/#parameters","text":"source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-source-result/data-source/","text":"coil-base / coil.fetch / SourceResult / dataSource dataSource val dataSource: DataSource Where source was loaded from.","title":"Data source"},{"location":"api/coil-base/coil.fetch/-source-result/data-source/#datasource","text":"val dataSource: DataSource Where source was loaded from.","title":"dataSource"},{"location":"api/coil-base/coil.fetch/-source-result/mime-type/","text":"coil-base / coil.fetch / SourceResult / mimeType mimeType val mimeType: String ? An optional MIME type for the source .","title":"Mime type"},{"location":"api/coil-base/coil.fetch/-source-result/mime-type/#mimetype","text":"val mimeType: String ? An optional MIME type for the source .","title":"mimeType"},{"location":"api/coil-base/coil.fetch/-source-result/source/","text":"coil-base / coil.fetch / SourceResult / source source val source: BufferedSource An unconsumed BufferedSource that will be decoded by a Decoder .","title":"Source"},{"location":"api/coil-base/coil.fetch/-source-result/source/#source","text":"val source: BufferedSource An unconsumed BufferedSource that will be decoded by a Decoder .","title":"source"},{"location":"api/coil-base/coil.map/","text":"coil-base / coil.map Package coil.map Types Name Summary Mapper An interface to convert data with type T into V . interface Mapper T : Any , V : Any MeasuredMapper An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously. interface MeasuredMapper T : Any , V : Any","title":"Home"},{"location":"api/coil-base/coil.map/#package-coilmap","text":"","title":"Package coil.map"},{"location":"api/coil-base/coil.map/#types","text":"Name Summary Mapper An interface to convert data with type T into V . interface Mapper T : Any , V : Any MeasuredMapper An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously. interface MeasuredMapper T : Any , V : Any","title":"Types"},{"location":"api/coil-base/coil.map/-mapper/","text":"coil-base / coil.map / Mapper Mapper interface Mapper T : Any , V : Any An interface to convert data with type T into V . Use this to map custom data types to a type that can be handled by a Fetcher . Functions Name Summary handles Return true if this can convert data . open fun handles(data: T): Boolean map Convert data into V . abstract fun map(data: T): V","title":"Home"},{"location":"api/coil-base/coil.map/-mapper/#mapper","text":"interface Mapper T : Any , V : Any An interface to convert data with type T into V . Use this to map custom data types to a type that can be handled by a Fetcher .","title":"Mapper"},{"location":"api/coil-base/coil.map/-mapper/#functions","text":"Name Summary handles Return true if this can convert data . open fun handles(data: T): Boolean map Convert data into V . abstract fun map(data: T): V","title":"Functions"},{"location":"api/coil-base/coil.map/-mapper/handles/","text":"coil-base / coil.map / Mapper / handles handles open fun handles(data: T): Boolean Return true if this can convert data .","title":"Handles"},{"location":"api/coil-base/coil.map/-mapper/handles/#handles","text":"open fun handles(data: T): Boolean Return true if this can convert data .","title":"handles"},{"location":"api/coil-base/coil.map/-mapper/map/","text":"coil-base / coil.map / Mapper / map map abstract fun map(data: T): V Convert data into V .","title":"Map"},{"location":"api/coil-base/coil.map/-mapper/map/#map","text":"abstract fun map(data: T): V Convert data into V .","title":"map"},{"location":"api/coil-base/coil.map/-measured-mapper/","text":"coil-base / coil.map / MeasuredMapper MeasuredMapper interface MeasuredMapper T : Any , V : Any An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously. Prefer implementing Mapper if you do not need to need to know the size of the Target . See Also Mapper Functions Name Summary handles Return true if this can convert data . open fun handles(data: T): Boolean map Convert data into V . abstract fun map(data: T, size: Size ): V","title":"Home"},{"location":"api/coil-base/coil.map/-measured-mapper/#measuredmapper","text":"interface MeasuredMapper T : Any , V : Any An interface to convert data with type T into V . Unlike Mapper s, MeasuredMapper must wait for the Target to be measured. This can cause cached Drawables to not be set synchronously. Prefer implementing Mapper if you do not need to need to know the size of the Target . See Also Mapper","title":"MeasuredMapper"},{"location":"api/coil-base/coil.map/-measured-mapper/#functions","text":"Name Summary handles Return true if this can convert data . open fun handles(data: T): Boolean map Convert data into V . abstract fun map(data: T, size: Size ): V","title":"Functions"},{"location":"api/coil-base/coil.map/-measured-mapper/handles/","text":"coil-base / coil.map / MeasuredMapper / handles handles open fun handles(data: T): Boolean Return true if this can convert data .","title":"Handles"},{"location":"api/coil-base/coil.map/-measured-mapper/handles/#handles","text":"open fun handles(data: T): Boolean Return true if this can convert data .","title":"handles"},{"location":"api/coil-base/coil.map/-measured-mapper/map/","text":"coil-base / coil.map / MeasuredMapper / map map abstract fun map(data: T, size: Size ): V Convert data into V .","title":"Map"},{"location":"api/coil-base/coil.map/-measured-mapper/map/#map","text":"abstract fun map(data: T, size: Size ): V Convert data into V .","title":"map"},{"location":"api/coil-base/coil.network/","text":"coil-base / coil.network Package coil.network Exceptions Name Summary HttpException Exception for an unexpected, non-2xx HTTP response. class HttpException : RuntimeException","title":"Home"},{"location":"api/coil-base/coil.network/#package-coilnetwork","text":"","title":"Package coil.network"},{"location":"api/coil-base/coil.network/#exceptions","text":"Name Summary HttpException Exception for an unexpected, non-2xx HTTP response. class HttpException : RuntimeException","title":"Exceptions"},{"location":"api/coil-base/coil.network/-http-exception/","text":"coil-base / coil.network / HttpException HttpException class HttpException : RuntimeException Exception for an unexpected, non-2xx HTTP response. See Also HttpUrlFetcher Constructors Name Summary init Exception for an unexpected, non-2xx HTTP response. HttpException(response: Response ) Properties Name Summary response val response: Response","title":"Home"},{"location":"api/coil-base/coil.network/-http-exception/#httpexception","text":"class HttpException : RuntimeException Exception for an unexpected, non-2xx HTTP response. See Also HttpUrlFetcher","title":"HttpException"},{"location":"api/coil-base/coil.network/-http-exception/#constructors","text":"Name Summary init Exception for an unexpected, non-2xx HTTP response. HttpException(response: Response )","title":"Constructors"},{"location":"api/coil-base/coil.network/-http-exception/#properties","text":"Name Summary response val response: Response","title":"Properties"},{"location":"api/coil-base/coil.network/-http-exception/-init-/","text":"coil-base / coil.network / HttpException / init init HttpException(response: Response ) Exception for an unexpected, non-2xx HTTP response. See Also HttpUrlFetcher","title":" init "},{"location":"api/coil-base/coil.network/-http-exception/-init-/#init","text":"HttpException(response: Response ) Exception for an unexpected, non-2xx HTTP response. See Also HttpUrlFetcher","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.network/-http-exception/response/","text":"coil-base / coil.network / HttpException / response response val response: Response","title":"Response"},{"location":"api/coil-base/coil.network/-http-exception/response/#response","text":"val response: Response","title":"response"},{"location":"api/coil-base/coil.request/","text":"coil-base / coil.request Package coil.request Types Name Summary CachePolicy Represents the read/write policy for a cache source. enum class CachePolicy GetRequest A value object that represents a get image request. class GetRequest : Request GetRequestBuilder Builder for a GetRequest . class GetRequestBuilder : RequestBuilder GetRequestBuilder LoadRequest A value object that represents a load image request. class LoadRequest : Request LoadRequestBuilder Builder for a LoadRequest . class LoadRequestBuilder : RequestBuilder LoadRequestBuilder Parameters A map of generic values that can be used to pass custom data to Fetcher s and Decoder s. class Parameters : Iterable Pair String , Entry Request A value object that represents an image request. sealed class Request RequestBuilder Base class for LoadRequestBuilder and GetRequestBuilder . sealed class RequestBuilder T : RequestBuilder T RequestDisposable Represents the work of an ImageLoader.load request. interface RequestDisposable Exceptions Name Summary NullRequestDataException Exception for when null Request.data is passed to ImageLoader.load . class NullRequestDataException : RuntimeException","title":"Home"},{"location":"api/coil-base/coil.request/#package-coilrequest","text":"","title":"Package coil.request"},{"location":"api/coil-base/coil.request/#types","text":"Name Summary CachePolicy Represents the read/write policy for a cache source. enum class CachePolicy GetRequest A value object that represents a get image request. class GetRequest : Request GetRequestBuilder Builder for a GetRequest . class GetRequestBuilder : RequestBuilder GetRequestBuilder LoadRequest A value object that represents a load image request. class LoadRequest : Request LoadRequestBuilder Builder for a LoadRequest . class LoadRequestBuilder : RequestBuilder LoadRequestBuilder Parameters A map of generic values that can be used to pass custom data to Fetcher s and Decoder s. class Parameters : Iterable Pair String , Entry Request A value object that represents an image request. sealed class Request RequestBuilder Base class for LoadRequestBuilder and GetRequestBuilder . sealed class RequestBuilder T : RequestBuilder T RequestDisposable Represents the work of an ImageLoader.load request. interface RequestDisposable","title":"Types"},{"location":"api/coil-base/coil.request/#exceptions","text":"Name Summary NullRequestDataException Exception for when null Request.data is passed to ImageLoader.load . class NullRequestDataException : RuntimeException","title":"Exceptions"},{"location":"api/coil-base/coil.request/-cache-policy/","text":"coil-base / coil.request / CachePolicy CachePolicy enum class CachePolicy Represents the read/write policy for a cache source. See Also Request.networkCachePolicy Request.diskCachePolicy Request.memoryCachePolicy Enum Values Name Summary ENABLED READ_ONLY WRITE_ONLY DISABLED Properties Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":"Home"},{"location":"api/coil-base/coil.request/-cache-policy/#cachepolicy","text":"enum class CachePolicy Represents the read/write policy for a cache source. See Also Request.networkCachePolicy Request.diskCachePolicy Request.memoryCachePolicy","title":"CachePolicy"},{"location":"api/coil-base/coil.request/-cache-policy/#enum-values","text":"Name Summary ENABLED READ_ONLY WRITE_ONLY DISABLED","title":"Enum Values"},{"location":"api/coil-base/coil.request/-cache-policy/#properties","text":"Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":"Properties"},{"location":"api/coil-base/coil.request/-cache-policy/-d-i-s-a-b-l-e-d/","text":"coil-base / coil.request / CachePolicy / DISABLED DISABLED DISABLED","title":" d i s a b l e d"},{"location":"api/coil-base/coil.request/-cache-policy/-d-i-s-a-b-l-e-d/#disabled","text":"DISABLED","title":"DISABLED"},{"location":"api/coil-base/coil.request/-cache-policy/-e-n-a-b-l-e-d/","text":"coil-base / coil.request / CachePolicy / ENABLED ENABLED ENABLED","title":" e n a b l e d"},{"location":"api/coil-base/coil.request/-cache-policy/-e-n-a-b-l-e-d/#enabled","text":"ENABLED","title":"ENABLED"},{"location":"api/coil-base/coil.request/-cache-policy/-r-e-a-d_-o-n-l-y/","text":"coil-base / coil.request / CachePolicy / READ_ONLY READ_ONLY READ_ONLY","title":" r e a d  o n l y"},{"location":"api/coil-base/coil.request/-cache-policy/-r-e-a-d_-o-n-l-y/#read_only","text":"READ_ONLY","title":"READ_ONLY"},{"location":"api/coil-base/coil.request/-cache-policy/-w-r-i-t-e_-o-n-l-y/","text":"coil-base / coil.request / CachePolicy / WRITE_ONLY WRITE_ONLY WRITE_ONLY","title":" w r i t e  o n l y"},{"location":"api/coil-base/coil.request/-cache-policy/-w-r-i-t-e_-o-n-l-y/#write_only","text":"WRITE_ONLY","title":"WRITE_ONLY"},{"location":"api/coil-base/coil.request/-cache-policy/read-enabled/","text":"coil-base / coil.request / CachePolicy / readEnabled readEnabled val readEnabled: Boolean","title":"Read enabled"},{"location":"api/coil-base/coil.request/-cache-policy/read-enabled/#readenabled","text":"val readEnabled: Boolean","title":"readEnabled"},{"location":"api/coil-base/coil.request/-cache-policy/write-enabled/","text":"coil-base / coil.request / CachePolicy / writeEnabled writeEnabled val writeEnabled: Boolean","title":"Write enabled"},{"location":"api/coil-base/coil.request/-cache-policy/write-enabled/#writeenabled","text":"val writeEnabled: Boolean","title":"writeEnabled"},{"location":"api/coil-base/coil.request/-get-request/","text":"coil-base / coil.request / GetRequest GetRequest class GetRequest : Request A value object that represents a get image request. Instances can be created and executed ad hoc: val drawable = imageLoader.get( https://www.example.com/image.jpg ) { size(1080, 1920) } Or instances can be created separately from the call that executes them: val request = GetRequest(imageLoader.defaults) { data( https://www.example.com/image.jpg ) size(1080, 1920) } imageLoader.get(request) See Also GetRequestBuilder ImageLoader.get Properties Name Summary aliasKeys val aliasKeys: List String allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config colorSpace val colorSpace: ColorSpace ? data val data: Any decoder val decoder: Decoder ? diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? fallback val fallback: Drawable ? headers val headers: Headers key val key: String ? lifecycle val lifecycle: Lifecycle ? listener val listener: Listener? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy parameters val parameters: Parameters placeholder val placeholder: Drawable ? precision val precision: Precision scale val scale: Scale ? sizeResolver val sizeResolver: SizeResolver ? target val target: Target ? transformations val transformations: List Transformation transition val transition: Transition ? Functions Name Summary newBuilder Create a new GetRequestBuilder instance using this as a base. fun newBuilder(): GetRequestBuilder Companion Object Functions Name Summary invoke Create a new GetRequest instance. operator fun invoke(defaults: DefaultRequestOptions , builder: GetRequestBuilder .() - Unit = {}): GetRequest operator fun invoke(request: GetRequest , builder: GetRequestBuilder .() - Unit = {}): GetRequest","title":"Home"},{"location":"api/coil-base/coil.request/-get-request/#getrequest","text":"class GetRequest : Request A value object that represents a get image request. Instances can be created and executed ad hoc: val drawable = imageLoader.get( https://www.example.com/image.jpg ) { size(1080, 1920) } Or instances can be created separately from the call that executes them: val request = GetRequest(imageLoader.defaults) { data( https://www.example.com/image.jpg ) size(1080, 1920) } imageLoader.get(request) See Also GetRequestBuilder ImageLoader.get","title":"GetRequest"},{"location":"api/coil-base/coil.request/-get-request/#properties","text":"Name Summary aliasKeys val aliasKeys: List String allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config colorSpace val colorSpace: ColorSpace ? data val data: Any decoder val decoder: Decoder ? diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? fallback val fallback: Drawable ? headers val headers: Headers key val key: String ? lifecycle val lifecycle: Lifecycle ? listener val listener: Listener? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy parameters val parameters: Parameters placeholder val placeholder: Drawable ? precision val precision: Precision scale val scale: Scale ? sizeResolver val sizeResolver: SizeResolver ? target val target: Target ? transformations val transformations: List Transformation transition val transition: Transition ?","title":"Properties"},{"location":"api/coil-base/coil.request/-get-request/#functions","text":"Name Summary newBuilder Create a new GetRequestBuilder instance using this as a base. fun newBuilder(): GetRequestBuilder","title":"Functions"},{"location":"api/coil-base/coil.request/-get-request/#companion-object-functions","text":"Name Summary invoke Create a new GetRequest instance. operator fun invoke(defaults: DefaultRequestOptions , builder: GetRequestBuilder .() - Unit = {}): GetRequest operator fun invoke(request: GetRequest , builder: GetRequestBuilder .() - Unit = {}): GetRequest","title":"Companion Object Functions"},{"location":"api/coil-base/coil.request/-get-request/alias-keys/","text":"coil-base / coil.request / GetRequest / aliasKeys aliasKeys val aliasKeys: List String","title":"Alias keys"},{"location":"api/coil-base/coil.request/-get-request/alias-keys/#aliaskeys","text":"val aliasKeys: List String","title":"aliasKeys"},{"location":"api/coil-base/coil.request/-get-request/allow-hardware/","text":"coil-base / coil.request / GetRequest / allowHardware allowHardware val allowHardware: Boolean","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-get-request/allow-hardware/#allowhardware","text":"val allowHardware: Boolean","title":"allowHardware"},{"location":"api/coil-base/coil.request/-get-request/allow-rgb565/","text":"coil-base / coil.request / GetRequest / allowRgb565 allowRgb565 val allowRgb565: Boolean","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-get-request/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-get-request/bitmap-config/","text":"coil-base / coil.request / GetRequest / bitmapConfig bitmapConfig val bitmapConfig: Config","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-get-request/bitmap-config/#bitmapconfig","text":"val bitmapConfig: Config","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-get-request/color-space/","text":"coil-base / coil.request / GetRequest / colorSpace colorSpace val colorSpace: ColorSpace ?","title":"Color space"},{"location":"api/coil-base/coil.request/-get-request/color-space/#colorspace","text":"val colorSpace: ColorSpace ?","title":"colorSpace"},{"location":"api/coil-base/coil.request/-get-request/data/","text":"coil-base / coil.request / GetRequest / data data val data: Any","title":"Data"},{"location":"api/coil-base/coil.request/-get-request/data/#data","text":"val data: Any","title":"data"},{"location":"api/coil-base/coil.request/-get-request/decoder/","text":"coil-base / coil.request / GetRequest / decoder decoder val decoder: Decoder ?","title":"Decoder"},{"location":"api/coil-base/coil.request/-get-request/decoder/#decoder","text":"val decoder: Decoder ?","title":"decoder"},{"location":"api/coil-base/coil.request/-get-request/disk-cache-policy/","text":"coil-base / coil.request / GetRequest / diskCachePolicy diskCachePolicy val diskCachePolicy: CachePolicy","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-get-request/disk-cache-policy/#diskcachepolicy","text":"val diskCachePolicy: CachePolicy","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-get-request/dispatcher/","text":"coil-base / coil.request / GetRequest / dispatcher dispatcher val dispatcher: CoroutineDispatcher","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-get-request/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher","title":"dispatcher"},{"location":"api/coil-base/coil.request/-get-request/error/","text":"coil-base / coil.request / GetRequest / error error val error: Drawable ?","title":"Error"},{"location":"api/coil-base/coil.request/-get-request/error/#error","text":"val error: Drawable ?","title":"error"},{"location":"api/coil-base/coil.request/-get-request/fallback/","text":"coil-base / coil.request / GetRequest / fallback fallback val fallback: Drawable ?","title":"Fallback"},{"location":"api/coil-base/coil.request/-get-request/fallback/#fallback","text":"val fallback: Drawable ?","title":"fallback"},{"location":"api/coil-base/coil.request/-get-request/headers/","text":"coil-base / coil.request / GetRequest / headers headers val headers: Headers","title":"Headers"},{"location":"api/coil-base/coil.request/-get-request/headers/#headers","text":"val headers: Headers","title":"headers"},{"location":"api/coil-base/coil.request/-get-request/invoke/","text":"coil-base / coil.request / GetRequest / invoke invoke operator inline fun invoke(defaults: DefaultRequestOptions , builder: GetRequestBuilder .() - Unit = {}): GetRequest operator inline fun invoke(request: GetRequest , builder: GetRequestBuilder .() - Unit = {}): GetRequest Create a new GetRequest instance.","title":"Invoke"},{"location":"api/coil-base/coil.request/-get-request/invoke/#invoke","text":"operator inline fun invoke(defaults: DefaultRequestOptions , builder: GetRequestBuilder .() - Unit = {}): GetRequest operator inline fun invoke(request: GetRequest , builder: GetRequestBuilder .() - Unit = {}): GetRequest Create a new GetRequest instance.","title":"invoke"},{"location":"api/coil-base/coil.request/-get-request/key/","text":"coil-base / coil.request / GetRequest / key key val key: String ?","title":"Key"},{"location":"api/coil-base/coil.request/-get-request/key/#key","text":"val key: String ?","title":"key"},{"location":"api/coil-base/coil.request/-get-request/lifecycle/","text":"coil-base / coil.request / GetRequest / lifecycle lifecycle val lifecycle: Lifecycle ?","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-get-request/lifecycle/#lifecycle","text":"val lifecycle: Lifecycle ?","title":"lifecycle"},{"location":"api/coil-base/coil.request/-get-request/listener/","text":"coil-base / coil.request / GetRequest / listener listener val listener: Listener?","title":"Listener"},{"location":"api/coil-base/coil.request/-get-request/listener/#listener","text":"val listener: Listener?","title":"listener"},{"location":"api/coil-base/coil.request/-get-request/memory-cache-policy/","text":"coil-base / coil.request / GetRequest / memoryCachePolicy memoryCachePolicy val memoryCachePolicy: CachePolicy","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-get-request/memory-cache-policy/#memorycachepolicy","text":"val memoryCachePolicy: CachePolicy","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-get-request/network-cache-policy/","text":"coil-base / coil.request / GetRequest / networkCachePolicy networkCachePolicy val networkCachePolicy: CachePolicy","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-get-request/network-cache-policy/#networkcachepolicy","text":"val networkCachePolicy: CachePolicy","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-get-request/new-builder/","text":"coil-base / coil.request / GetRequest / newBuilder newBuilder fun newBuilder(): GetRequestBuilder Create a new GetRequestBuilder instance using this as a base.","title":"New builder"},{"location":"api/coil-base/coil.request/-get-request/new-builder/#newbuilder","text":"fun newBuilder(): GetRequestBuilder Create a new GetRequestBuilder instance using this as a base.","title":"newBuilder"},{"location":"api/coil-base/coil.request/-get-request/parameters/","text":"coil-base / coil.request / GetRequest / parameters parameters val parameters: Parameters","title":"Parameters"},{"location":"api/coil-base/coil.request/-get-request/parameters/#parameters","text":"val parameters: Parameters","title":"parameters"},{"location":"api/coil-base/coil.request/-get-request/placeholder/","text":"coil-base / coil.request / GetRequest / placeholder placeholder val placeholder: Drawable ?","title":"Placeholder"},{"location":"api/coil-base/coil.request/-get-request/placeholder/#placeholder","text":"val placeholder: Drawable ?","title":"placeholder"},{"location":"api/coil-base/coil.request/-get-request/precision/","text":"coil-base / coil.request / GetRequest / precision precision val precision: Precision","title":"Precision"},{"location":"api/coil-base/coil.request/-get-request/precision/#precision","text":"val precision: Precision","title":"precision"},{"location":"api/coil-base/coil.request/-get-request/scale/","text":"coil-base / coil.request / GetRequest / scale scale val scale: Scale ?","title":"Scale"},{"location":"api/coil-base/coil.request/-get-request/scale/#scale","text":"val scale: Scale ?","title":"scale"},{"location":"api/coil-base/coil.request/-get-request/size-resolver/","text":"coil-base / coil.request / GetRequest / sizeResolver sizeResolver val sizeResolver: SizeResolver ?","title":"Size resolver"},{"location":"api/coil-base/coil.request/-get-request/size-resolver/#sizeresolver","text":"val sizeResolver: SizeResolver ?","title":"sizeResolver"},{"location":"api/coil-base/coil.request/-get-request/target/","text":"coil-base / coil.request / GetRequest / target target val target: Target ?","title":"Target"},{"location":"api/coil-base/coil.request/-get-request/target/#target","text":"val target: Target ?","title":"target"},{"location":"api/coil-base/coil.request/-get-request/transformations/","text":"coil-base / coil.request / GetRequest / transformations transformations val transformations: List Transformation","title":"Transformations"},{"location":"api/coil-base/coil.request/-get-request/transformations/#transformations","text":"val transformations: List Transformation","title":"transformations"},{"location":"api/coil-base/coil.request/-get-request/transition/","text":"coil-base / coil.request / GetRequest / transition transition val transition: Transition ?","title":"Transition"},{"location":"api/coil-base/coil.request/-get-request/transition/#transition","text":"val transition: Transition ?","title":"transition"},{"location":"api/coil-base/coil.request/-get-request-builder/","text":"coil-base / coil.request / GetRequestBuilder GetRequestBuilder class GetRequestBuilder : RequestBuilder GetRequestBuilder Builder for a GetRequest . Constructors Name Summary init GetRequestBuilder(defaults: DefaultRequestOptions ) GetRequestBuilder(request: GetRequest ) Functions Name Summary build Create a new GetRequest instance. fun build(): GetRequest data Set the data to load. fun data(data: Any ): GetRequestBuilder","title":"Home"},{"location":"api/coil-base/coil.request/-get-request-builder/#getrequestbuilder","text":"class GetRequestBuilder : RequestBuilder GetRequestBuilder Builder for a GetRequest .","title":"GetRequestBuilder"},{"location":"api/coil-base/coil.request/-get-request-builder/#constructors","text":"Name Summary init GetRequestBuilder(defaults: DefaultRequestOptions ) GetRequestBuilder(request: GetRequest )","title":"Constructors"},{"location":"api/coil-base/coil.request/-get-request-builder/#functions","text":"Name Summary build Create a new GetRequest instance. fun build(): GetRequest data Set the data to load. fun data(data: Any ): GetRequestBuilder","title":"Functions"},{"location":"api/coil-base/coil.request/-get-request-builder/-init-/","text":"coil-base / coil.request / GetRequestBuilder / init init GetRequestBuilder(defaults: DefaultRequestOptions ) GetRequestBuilder(request: GetRequest )","title":" init "},{"location":"api/coil-base/coil.request/-get-request-builder/-init-/#init","text":"GetRequestBuilder(defaults: DefaultRequestOptions ) GetRequestBuilder(request: GetRequest )","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-get-request-builder/build/","text":"coil-base / coil.request / GetRequestBuilder / build build fun build(): GetRequest Create a new GetRequest instance.","title":"Build"},{"location":"api/coil-base/coil.request/-get-request-builder/build/#build","text":"fun build(): GetRequest Create a new GetRequest instance.","title":"build"},{"location":"api/coil-base/coil.request/-get-request-builder/data/","text":"coil-base / coil.request / GetRequestBuilder / data data fun data(data: Any ): GetRequestBuilder Set the data to load.","title":"Data"},{"location":"api/coil-base/coil.request/-get-request-builder/data/#data","text":"fun data(data: Any ): GetRequestBuilder Set the data to load.","title":"data"},{"location":"api/coil-base/coil.request/-load-request/","text":"coil-base / coil.request / LoadRequest LoadRequest class LoadRequest : Request A value object that represents a load image request. Instances can be created and executed ad hoc: imageLoader.load(context, https://www.example.com/image.jpg ) { crossfade(true) target(imageView) } Or instances can be created separately from the call that executes them: val request = LoadRequest(context, imageLoader.defaults) { data( https://www.example.com/image.jpg ) crossfade(true) target(imageView) } imageLoader.load(request) See Also LoadRequestBuilder ImageLoader.load Properties Name Summary aliasKeys val aliasKeys: List String allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config colorSpace val colorSpace: ColorSpace ? context val context: Context data val data: Any ? decoder val decoder: Decoder ? diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? fallback val fallback: Drawable ? headers val headers: Headers key val key: String ? lifecycle val lifecycle: Lifecycle ? listener val listener: Listener? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy parameters val parameters: Parameters placeholder val placeholder: Drawable ? precision val precision: Precision scale val scale: Scale ? sizeResolver val sizeResolver: SizeResolver ? target val target: Target ? transformations val transformations: List Transformation transition val transition: Transition ? Functions Name Summary newBuilder Create a new LoadRequestBuilder instance using this as a base. fun newBuilder(context: Context = this.context): LoadRequestBuilder Companion Object Functions Name Summary invoke Create a new LoadRequest instance. operator fun invoke(context: Context , defaults: DefaultRequestOptions , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest operator fun invoke(context: Context , request: LoadRequest , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest","title":"Home"},{"location":"api/coil-base/coil.request/-load-request/#loadrequest","text":"class LoadRequest : Request A value object that represents a load image request. Instances can be created and executed ad hoc: imageLoader.load(context, https://www.example.com/image.jpg ) { crossfade(true) target(imageView) } Or instances can be created separately from the call that executes them: val request = LoadRequest(context, imageLoader.defaults) { data( https://www.example.com/image.jpg ) crossfade(true) target(imageView) } imageLoader.load(request) See Also LoadRequestBuilder ImageLoader.load","title":"LoadRequest"},{"location":"api/coil-base/coil.request/-load-request/#properties","text":"Name Summary aliasKeys val aliasKeys: List String allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config colorSpace val colorSpace: ColorSpace ? context val context: Context data val data: Any ? decoder val decoder: Decoder ? diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? fallback val fallback: Drawable ? headers val headers: Headers key val key: String ? lifecycle val lifecycle: Lifecycle ? listener val listener: Listener? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy parameters val parameters: Parameters placeholder val placeholder: Drawable ? precision val precision: Precision scale val scale: Scale ? sizeResolver val sizeResolver: SizeResolver ? target val target: Target ? transformations val transformations: List Transformation transition val transition: Transition ?","title":"Properties"},{"location":"api/coil-base/coil.request/-load-request/#functions","text":"Name Summary newBuilder Create a new LoadRequestBuilder instance using this as a base. fun newBuilder(context: Context = this.context): LoadRequestBuilder","title":"Functions"},{"location":"api/coil-base/coil.request/-load-request/#companion-object-functions","text":"Name Summary invoke Create a new LoadRequest instance. operator fun invoke(context: Context , defaults: DefaultRequestOptions , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest operator fun invoke(context: Context , request: LoadRequest , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest","title":"Companion Object Functions"},{"location":"api/coil-base/coil.request/-load-request/alias-keys/","text":"coil-base / coil.request / LoadRequest / aliasKeys aliasKeys val aliasKeys: List String","title":"Alias keys"},{"location":"api/coil-base/coil.request/-load-request/alias-keys/#aliaskeys","text":"val aliasKeys: List String","title":"aliasKeys"},{"location":"api/coil-base/coil.request/-load-request/allow-hardware/","text":"coil-base / coil.request / LoadRequest / allowHardware allowHardware val allowHardware: Boolean","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-load-request/allow-hardware/#allowhardware","text":"val allowHardware: Boolean","title":"allowHardware"},{"location":"api/coil-base/coil.request/-load-request/allow-rgb565/","text":"coil-base / coil.request / LoadRequest / allowRgb565 allowRgb565 val allowRgb565: Boolean","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-load-request/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-load-request/bitmap-config/","text":"coil-base / coil.request / LoadRequest / bitmapConfig bitmapConfig val bitmapConfig: Config","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-load-request/bitmap-config/#bitmapconfig","text":"val bitmapConfig: Config","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-load-request/color-space/","text":"coil-base / coil.request / LoadRequest / colorSpace colorSpace val colorSpace: ColorSpace ?","title":"Color space"},{"location":"api/coil-base/coil.request/-load-request/color-space/#colorspace","text":"val colorSpace: ColorSpace ?","title":"colorSpace"},{"location":"api/coil-base/coil.request/-load-request/context/","text":"coil-base / coil.request / LoadRequest / context context val context: Context","title":"Context"},{"location":"api/coil-base/coil.request/-load-request/context/#context","text":"val context: Context","title":"context"},{"location":"api/coil-base/coil.request/-load-request/data/","text":"coil-base / coil.request / LoadRequest / data data val data: Any ?","title":"Data"},{"location":"api/coil-base/coil.request/-load-request/data/#data","text":"val data: Any ?","title":"data"},{"location":"api/coil-base/coil.request/-load-request/decoder/","text":"coil-base / coil.request / LoadRequest / decoder decoder val decoder: Decoder ?","title":"Decoder"},{"location":"api/coil-base/coil.request/-load-request/decoder/#decoder","text":"val decoder: Decoder ?","title":"decoder"},{"location":"api/coil-base/coil.request/-load-request/disk-cache-policy/","text":"coil-base / coil.request / LoadRequest / diskCachePolicy diskCachePolicy val diskCachePolicy: CachePolicy","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-load-request/disk-cache-policy/#diskcachepolicy","text":"val diskCachePolicy: CachePolicy","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-load-request/dispatcher/","text":"coil-base / coil.request / LoadRequest / dispatcher dispatcher val dispatcher: CoroutineDispatcher","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-load-request/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher","title":"dispatcher"},{"location":"api/coil-base/coil.request/-load-request/error/","text":"coil-base / coil.request / LoadRequest / error error val error: Drawable ?","title":"Error"},{"location":"api/coil-base/coil.request/-load-request/error/#error","text":"val error: Drawable ?","title":"error"},{"location":"api/coil-base/coil.request/-load-request/fallback/","text":"coil-base / coil.request / LoadRequest / fallback fallback val fallback: Drawable ?","title":"Fallback"},{"location":"api/coil-base/coil.request/-load-request/fallback/#fallback","text":"val fallback: Drawable ?","title":"fallback"},{"location":"api/coil-base/coil.request/-load-request/headers/","text":"coil-base / coil.request / LoadRequest / headers headers val headers: Headers","title":"Headers"},{"location":"api/coil-base/coil.request/-load-request/headers/#headers","text":"val headers: Headers","title":"headers"},{"location":"api/coil-base/coil.request/-load-request/invoke/","text":"coil-base / coil.request / LoadRequest / invoke invoke operator inline fun invoke(context: Context , defaults: DefaultRequestOptions , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest operator inline fun invoke(context: Context , request: LoadRequest , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest Create a new LoadRequest instance.","title":"Invoke"},{"location":"api/coil-base/coil.request/-load-request/invoke/#invoke","text":"operator inline fun invoke(context: Context , defaults: DefaultRequestOptions , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest operator inline fun invoke(context: Context , request: LoadRequest , builder: LoadRequestBuilder .() - Unit = {}): LoadRequest Create a new LoadRequest instance.","title":"invoke"},{"location":"api/coil-base/coil.request/-load-request/key/","text":"coil-base / coil.request / LoadRequest / key key val key: String ?","title":"Key"},{"location":"api/coil-base/coil.request/-load-request/key/#key","text":"val key: String ?","title":"key"},{"location":"api/coil-base/coil.request/-load-request/lifecycle/","text":"coil-base / coil.request / LoadRequest / lifecycle lifecycle val lifecycle: Lifecycle ?","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-load-request/lifecycle/#lifecycle","text":"val lifecycle: Lifecycle ?","title":"lifecycle"},{"location":"api/coil-base/coil.request/-load-request/listener/","text":"coil-base / coil.request / LoadRequest / listener listener val listener: Listener?","title":"Listener"},{"location":"api/coil-base/coil.request/-load-request/listener/#listener","text":"val listener: Listener?","title":"listener"},{"location":"api/coil-base/coil.request/-load-request/memory-cache-policy/","text":"coil-base / coil.request / LoadRequest / memoryCachePolicy memoryCachePolicy val memoryCachePolicy: CachePolicy","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-load-request/memory-cache-policy/#memorycachepolicy","text":"val memoryCachePolicy: CachePolicy","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-load-request/network-cache-policy/","text":"coil-base / coil.request / LoadRequest / networkCachePolicy networkCachePolicy val networkCachePolicy: CachePolicy","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-load-request/network-cache-policy/#networkcachepolicy","text":"val networkCachePolicy: CachePolicy","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-load-request/new-builder/","text":"coil-base / coil.request / LoadRequest / newBuilder newBuilder @JvmOverloads fun newBuilder(context: Context = this.context): LoadRequestBuilder Create a new LoadRequestBuilder instance using this as a base.","title":"New builder"},{"location":"api/coil-base/coil.request/-load-request/new-builder/#newbuilder","text":"@JvmOverloads fun newBuilder(context: Context = this.context): LoadRequestBuilder Create a new LoadRequestBuilder instance using this as a base.","title":"newBuilder"},{"location":"api/coil-base/coil.request/-load-request/parameters/","text":"coil-base / coil.request / LoadRequest / parameters parameters val parameters: Parameters","title":"Parameters"},{"location":"api/coil-base/coil.request/-load-request/parameters/#parameters","text":"val parameters: Parameters","title":"parameters"},{"location":"api/coil-base/coil.request/-load-request/placeholder/","text":"coil-base / coil.request / LoadRequest / placeholder placeholder val placeholder: Drawable ?","title":"Placeholder"},{"location":"api/coil-base/coil.request/-load-request/placeholder/#placeholder","text":"val placeholder: Drawable ?","title":"placeholder"},{"location":"api/coil-base/coil.request/-load-request/precision/","text":"coil-base / coil.request / LoadRequest / precision precision val precision: Precision","title":"Precision"},{"location":"api/coil-base/coil.request/-load-request/precision/#precision","text":"val precision: Precision","title":"precision"},{"location":"api/coil-base/coil.request/-load-request/scale/","text":"coil-base / coil.request / LoadRequest / scale scale val scale: Scale ?","title":"Scale"},{"location":"api/coil-base/coil.request/-load-request/scale/#scale","text":"val scale: Scale ?","title":"scale"},{"location":"api/coil-base/coil.request/-load-request/size-resolver/","text":"coil-base / coil.request / LoadRequest / sizeResolver sizeResolver val sizeResolver: SizeResolver ?","title":"Size resolver"},{"location":"api/coil-base/coil.request/-load-request/size-resolver/#sizeresolver","text":"val sizeResolver: SizeResolver ?","title":"sizeResolver"},{"location":"api/coil-base/coil.request/-load-request/target/","text":"coil-base / coil.request / LoadRequest / target target val target: Target ?","title":"Target"},{"location":"api/coil-base/coil.request/-load-request/target/#target","text":"val target: Target ?","title":"target"},{"location":"api/coil-base/coil.request/-load-request/transformations/","text":"coil-base / coil.request / LoadRequest / transformations transformations val transformations: List Transformation","title":"Transformations"},{"location":"api/coil-base/coil.request/-load-request/transformations/#transformations","text":"val transformations: List Transformation","title":"transformations"},{"location":"api/coil-base/coil.request/-load-request/transition/","text":"coil-base / coil.request / LoadRequest / transition transition val transition: Transition ?","title":"Transition"},{"location":"api/coil-base/coil.request/-load-request/transition/#transition","text":"val transition: Transition ?","title":"transition"},{"location":"api/coil-base/coil.request/-load-request-builder/","text":"coil-base / coil.request / LoadRequestBuilder LoadRequestBuilder class LoadRequestBuilder : RequestBuilder LoadRequestBuilder Builder for a LoadRequest . Constructors Name Summary init LoadRequestBuilder(context: Context , defaults: DefaultRequestOptions ) LoadRequestBuilder(context: Context , request: LoadRequest ) Functions Name Summary build Create a new LoadRequest instance. fun build(): LoadRequest crossfade See: ImageLoaderBuilder.crossfade fun crossfade(enable: Boolean ): LoadRequestBuilder fun crossfade(durationMillis: Int ): LoadRequestBuilder data Set the data to load. fun data(data: Any ?): LoadRequestBuilder error Set the error drawable to use if the request fails. fun error(drawableResId: Int ): LoadRequestBuilder fun error(drawable: Drawable ?): LoadRequestBuilder fallback Set the fallback drawable to use if data is null. fun fallback(drawableResId: Int ): LoadRequestBuilder fun fallback(drawable: Drawable ?): LoadRequestBuilder lifecycle Set the Lifecycle for this request. fun lifecycle(owner: LifecycleOwner ?): LoadRequestBuilder fun lifecycle(lifecycle: Lifecycle ?): LoadRequestBuilder placeholder Set the placeholder drawable to use when the request starts. fun placeholder(drawableResId: Int ): LoadRequestBuilder fun placeholder(drawable: Drawable ?): LoadRequestBuilder target Convenience function to set imageView as the Target . fun target(imageView: ImageView ): LoadRequestBuilder Convenience function to create and set the Target . fun target(onStart: (placeholder: Drawable ?) - Unit = {}, onError: (error: Drawable ?) - Unit = {}, onSuccess: (result: Drawable ) - Unit = {}): LoadRequestBuilder Set the Target . If the target is null, this request will preload the image into memory. fun target(target: Target ?): LoadRequestBuilder transition See: ImageLoaderBuilder.transition fun transition(transition: Transition ?): LoadRequestBuilder","title":"Home"},{"location":"api/coil-base/coil.request/-load-request-builder/#loadrequestbuilder","text":"class LoadRequestBuilder : RequestBuilder LoadRequestBuilder Builder for a LoadRequest .","title":"LoadRequestBuilder"},{"location":"api/coil-base/coil.request/-load-request-builder/#constructors","text":"Name Summary init LoadRequestBuilder(context: Context , defaults: DefaultRequestOptions ) LoadRequestBuilder(context: Context , request: LoadRequest )","title":"Constructors"},{"location":"api/coil-base/coil.request/-load-request-builder/#functions","text":"Name Summary build Create a new LoadRequest instance. fun build(): LoadRequest crossfade See: ImageLoaderBuilder.crossfade fun crossfade(enable: Boolean ): LoadRequestBuilder fun crossfade(durationMillis: Int ): LoadRequestBuilder data Set the data to load. fun data(data: Any ?): LoadRequestBuilder error Set the error drawable to use if the request fails. fun error(drawableResId: Int ): LoadRequestBuilder fun error(drawable: Drawable ?): LoadRequestBuilder fallback Set the fallback drawable to use if data is null. fun fallback(drawableResId: Int ): LoadRequestBuilder fun fallback(drawable: Drawable ?): LoadRequestBuilder lifecycle Set the Lifecycle for this request. fun lifecycle(owner: LifecycleOwner ?): LoadRequestBuilder fun lifecycle(lifecycle: Lifecycle ?): LoadRequestBuilder placeholder Set the placeholder drawable to use when the request starts. fun placeholder(drawableResId: Int ): LoadRequestBuilder fun placeholder(drawable: Drawable ?): LoadRequestBuilder target Convenience function to set imageView as the Target . fun target(imageView: ImageView ): LoadRequestBuilder Convenience function to create and set the Target . fun target(onStart: (placeholder: Drawable ?) - Unit = {}, onError: (error: Drawable ?) - Unit = {}, onSuccess: (result: Drawable ) - Unit = {}): LoadRequestBuilder Set the Target . If the target is null, this request will preload the image into memory. fun target(target: Target ?): LoadRequestBuilder transition See: ImageLoaderBuilder.transition fun transition(transition: Transition ?): LoadRequestBuilder","title":"Functions"},{"location":"api/coil-base/coil.request/-load-request-builder/-init-/","text":"coil-base / coil.request / LoadRequestBuilder / init init LoadRequestBuilder(context: Context , defaults: DefaultRequestOptions ) LoadRequestBuilder(context: Context , request: LoadRequest )","title":" init "},{"location":"api/coil-base/coil.request/-load-request-builder/-init-/#init","text":"LoadRequestBuilder(context: Context , defaults: DefaultRequestOptions ) LoadRequestBuilder(context: Context , request: LoadRequest )","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-load-request-builder/build/","text":"coil-base / coil.request / LoadRequestBuilder / build build fun build(): LoadRequest Create a new LoadRequest instance.","title":"Build"},{"location":"api/coil-base/coil.request/-load-request-builder/build/#build","text":"fun build(): LoadRequest Create a new LoadRequest instance.","title":"build"},{"location":"api/coil-base/coil.request/-load-request-builder/crossfade/","text":"coil-base / coil.request / LoadRequestBuilder / crossfade crossfade fun crossfade(enable: Boolean ): LoadRequestBuilder fun crossfade(durationMillis: Int ): LoadRequestBuilder See: ImageLoaderBuilder.crossfade","title":"Crossfade"},{"location":"api/coil-base/coil.request/-load-request-builder/crossfade/#crossfade","text":"fun crossfade(enable: Boolean ): LoadRequestBuilder fun crossfade(durationMillis: Int ): LoadRequestBuilder See: ImageLoaderBuilder.crossfade","title":"crossfade"},{"location":"api/coil-base/coil.request/-load-request-builder/data/","text":"coil-base / coil.request / LoadRequestBuilder / data data fun data(data: Any ?): LoadRequestBuilder Set the data to load.","title":"Data"},{"location":"api/coil-base/coil.request/-load-request-builder/data/#data","text":"fun data(data: Any ?): LoadRequestBuilder Set the data to load.","title":"data"},{"location":"api/coil-base/coil.request/-load-request-builder/error/","text":"coil-base / coil.request / LoadRequestBuilder / error error fun error(@DrawableRes drawableResId: Int ): LoadRequestBuilder fun error(drawable: Drawable ?): LoadRequestBuilder Set the error drawable to use if the request fails.","title":"Error"},{"location":"api/coil-base/coil.request/-load-request-builder/error/#error","text":"fun error(@DrawableRes drawableResId: Int ): LoadRequestBuilder fun error(drawable: Drawable ?): LoadRequestBuilder Set the error drawable to use if the request fails.","title":"error"},{"location":"api/coil-base/coil.request/-load-request-builder/fallback/","text":"coil-base / coil.request / LoadRequestBuilder / fallback fallback fun fallback(@DrawableRes drawableResId: Int ): LoadRequestBuilder fun fallback(drawable: Drawable ?): LoadRequestBuilder Set the fallback drawable to use if data is null.","title":"Fallback"},{"location":"api/coil-base/coil.request/-load-request-builder/fallback/#fallback","text":"fun fallback(@DrawableRes drawableResId: Int ): LoadRequestBuilder fun fallback(drawable: Drawable ?): LoadRequestBuilder Set the fallback drawable to use if data is null.","title":"fallback"},{"location":"api/coil-base/coil.request/-load-request-builder/lifecycle/","text":"coil-base / coil.request / LoadRequestBuilder / lifecycle lifecycle fun lifecycle(owner: LifecycleOwner ?): LoadRequestBuilder Set the Lifecycle for this request. fun lifecycle(lifecycle: Lifecycle ?): LoadRequestBuilder Set the Lifecycle for this request. Requests are queued while the lifecycle is not at least Lifecycle.State.STARTED . Requests are cancelled when the lifecycle reaches Lifecycle.State.DESTROYED . If this isn't set, Coil will attempt to find the lifecycle for this request using the logic in RequestService.lifecycleInfo .","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-load-request-builder/lifecycle/#lifecycle","text":"fun lifecycle(owner: LifecycleOwner ?): LoadRequestBuilder Set the Lifecycle for this request. fun lifecycle(lifecycle: Lifecycle ?): LoadRequestBuilder Set the Lifecycle for this request. Requests are queued while the lifecycle is not at least Lifecycle.State.STARTED . Requests are cancelled when the lifecycle reaches Lifecycle.State.DESTROYED . If this isn't set, Coil will attempt to find the lifecycle for this request using the logic in RequestService.lifecycleInfo .","title":"lifecycle"},{"location":"api/coil-base/coil.request/-load-request-builder/placeholder/","text":"coil-base / coil.request / LoadRequestBuilder / placeholder placeholder fun placeholder(@DrawableRes drawableResId: Int ): LoadRequestBuilder fun placeholder(drawable: Drawable ?): LoadRequestBuilder Set the placeholder drawable to use when the request starts.","title":"Placeholder"},{"location":"api/coil-base/coil.request/-load-request-builder/placeholder/#placeholder","text":"fun placeholder(@DrawableRes drawableResId: Int ): LoadRequestBuilder fun placeholder(drawable: Drawable ?): LoadRequestBuilder Set the placeholder drawable to use when the request starts.","title":"placeholder"},{"location":"api/coil-base/coil.request/-load-request-builder/target/","text":"coil-base / coil.request / LoadRequestBuilder / target target fun target(imageView: ImageView ): LoadRequestBuilder Convenience function to set imageView as the Target . inline fun target(crossinline onStart: (placeholder: Drawable ?) - Unit = {}, crossinline onError: (error: Drawable ?) - Unit = {}, crossinline onSuccess: (result: Drawable ) - Unit = {}): LoadRequestBuilder Convenience function to create and set the Target . fun target(target: Target ?): LoadRequestBuilder Set the Target . If the target is null, this request will preload the image into memory.","title":"Target"},{"location":"api/coil-base/coil.request/-load-request-builder/target/#target","text":"fun target(imageView: ImageView ): LoadRequestBuilder Convenience function to set imageView as the Target . inline fun target(crossinline onStart: (placeholder: Drawable ?) - Unit = {}, crossinline onError: (error: Drawable ?) - Unit = {}, crossinline onSuccess: (result: Drawable ) - Unit = {}): LoadRequestBuilder Convenience function to create and set the Target . fun target(target: Target ?): LoadRequestBuilder Set the Target . If the target is null, this request will preload the image into memory.","title":"target"},{"location":"api/coil-base/coil.request/-load-request-builder/transition/","text":"coil-base / coil.request / LoadRequestBuilder / transition transition @ExperimentalCoil fun transition(transition: Transition ?): LoadRequestBuilder See: ImageLoaderBuilder.transition","title":"Transition"},{"location":"api/coil-base/coil.request/-load-request-builder/transition/#transition","text":"@ExperimentalCoil fun transition(transition: Transition ?): LoadRequestBuilder See: ImageLoaderBuilder.transition","title":"transition"},{"location":"api/coil-base/coil.request/-null-request-data-exception/","text":"coil-base / coil.request / NullRequestDataException NullRequestDataException class NullRequestDataException : RuntimeException Exception for when null Request.data is passed to ImageLoader.load . See Also Request.fallback Constructors Name Summary init Exception for when null Request.data is passed to ImageLoader.load . NullRequestDataException()","title":"Home"},{"location":"api/coil-base/coil.request/-null-request-data-exception/#nullrequestdataexception","text":"class NullRequestDataException : RuntimeException Exception for when null Request.data is passed to ImageLoader.load . See Also Request.fallback","title":"NullRequestDataException"},{"location":"api/coil-base/coil.request/-null-request-data-exception/#constructors","text":"Name Summary init Exception for when null Request.data is passed to ImageLoader.load . NullRequestDataException()","title":"Constructors"},{"location":"api/coil-base/coil.request/-null-request-data-exception/-init-/","text":"coil-base / coil.request / NullRequestDataException / init init NullRequestDataException() Exception for when null Request.data is passed to ImageLoader.load . See Also Request.fallback","title":" init "},{"location":"api/coil-base/coil.request/-null-request-data-exception/-init-/#init","text":"NullRequestDataException() Exception for when null Request.data is passed to ImageLoader.load . See Also Request.fallback","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-parameters/","text":"coil-base / coil.request / Parameters Parameters class Parameters : Iterable Pair String , Entry A map of generic values that can be used to pass custom data to Fetcher s and Decoder s. Types Name Summary Builder class Builder Entry data class Entry Functions Name Summary cacheKey Returns the cache key associated with key or null if key has no mapping. fun cacheKey(key: String ): String ? count Returns the number of parameters in this object. fun count(): Int entry Returns the entry associated with key or null if key has no mapping. fun entry(key: String ): Entry? equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int isEmpty Returns true if this object has no parameters. fun isEmpty(): Boolean iterator Returns an Iterator over the entries in the Parameters . Iteration order is deterministic. operator fun iterator(): Iterator Pair String , Entry newBuilder fun newBuilder(): Builder toString fun toString(): String value Returns the value associated with key or null if key has no mapping. fun value(key: String ): Any ? Companion Object Properties Name Summary EMPTY val EMPTY: Parameters Companion Object Functions Name Summary invoke Create a new Parameters instance. operator fun invoke(builder: Builder.() - Unit = {}): Parameters Extension Functions Name Summary get operator fun Parameters .get(key: String ): Any ? isNotEmpty fun Parameters .isNotEmpty(): Boolean","title":"Home"},{"location":"api/coil-base/coil.request/-parameters/#parameters","text":"class Parameters : Iterable Pair String , Entry A map of generic values that can be used to pass custom data to Fetcher s and Decoder s.","title":"Parameters"},{"location":"api/coil-base/coil.request/-parameters/#types","text":"Name Summary Builder class Builder Entry data class Entry","title":"Types"},{"location":"api/coil-base/coil.request/-parameters/#functions","text":"Name Summary cacheKey Returns the cache key associated with key or null if key has no mapping. fun cacheKey(key: String ): String ? count Returns the number of parameters in this object. fun count(): Int entry Returns the entry associated with key or null if key has no mapping. fun entry(key: String ): Entry? equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int isEmpty Returns true if this object has no parameters. fun isEmpty(): Boolean iterator Returns an Iterator over the entries in the Parameters . Iteration order is deterministic. operator fun iterator(): Iterator Pair String , Entry newBuilder fun newBuilder(): Builder toString fun toString(): String value Returns the value associated with key or null if key has no mapping. fun value(key: String ): Any ?","title":"Functions"},{"location":"api/coil-base/coil.request/-parameters/#companion-object-properties","text":"Name Summary EMPTY val EMPTY: Parameters","title":"Companion Object Properties"},{"location":"api/coil-base/coil.request/-parameters/#companion-object-functions","text":"Name Summary invoke Create a new Parameters instance. operator fun invoke(builder: Builder.() - Unit = {}): Parameters","title":"Companion Object Functions"},{"location":"api/coil-base/coil.request/-parameters/#extension-functions","text":"Name Summary get operator fun Parameters .get(key: String ): Any ? isNotEmpty fun Parameters .isNotEmpty(): Boolean","title":"Extension Functions"},{"location":"api/coil-base/coil.request/-parameters/-e-m-p-t-y/","text":"coil-base / coil.request / Parameters / EMPTY EMPTY val EMPTY: Parameters","title":" e m p t y"},{"location":"api/coil-base/coil.request/-parameters/-e-m-p-t-y/#empty","text":"val EMPTY: Parameters","title":"EMPTY"},{"location":"api/coil-base/coil.request/-parameters/cache-key/","text":"coil-base / coil.request / Parameters / cacheKey cacheKey fun cacheKey(key: String ): String ? Returns the cache key associated with key or null if key has no mapping.","title":"Cache key"},{"location":"api/coil-base/coil.request/-parameters/cache-key/#cachekey","text":"fun cacheKey(key: String ): String ? Returns the cache key associated with key or null if key has no mapping.","title":"cacheKey"},{"location":"api/coil-base/coil.request/-parameters/count/","text":"coil-base / coil.request / Parameters / count count fun count(): Int Returns the number of parameters in this object.","title":"Count"},{"location":"api/coil-base/coil.request/-parameters/count/#count","text":"fun count(): Int Returns the number of parameters in this object.","title":"count"},{"location":"api/coil-base/coil.request/-parameters/entry/","text":"coil-base / coil.request / Parameters / entry entry fun entry(key: String ): Entry? Returns the entry associated with key or null if key has no mapping.","title":"Entry"},{"location":"api/coil-base/coil.request/-parameters/entry/#entry","text":"fun entry(key: String ): Entry? Returns the entry associated with key or null if key has no mapping.","title":"entry"},{"location":"api/coil-base/coil.request/-parameters/equals/","text":"coil-base / coil.request / Parameters / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.request/-parameters/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.request/-parameters/hash-code/","text":"coil-base / coil.request / Parameters / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.request/-parameters/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.request/-parameters/invoke/","text":"coil-base / coil.request / Parameters / invoke invoke operator inline fun invoke(builder: Builder.() - Unit = {}): Parameters Create a new Parameters instance.","title":"Invoke"},{"location":"api/coil-base/coil.request/-parameters/invoke/#invoke","text":"operator inline fun invoke(builder: Builder.() - Unit = {}): Parameters Create a new Parameters instance.","title":"invoke"},{"location":"api/coil-base/coil.request/-parameters/is-empty/","text":"coil-base / coil.request / Parameters / isEmpty isEmpty fun isEmpty(): Boolean Returns true if this object has no parameters.","title":"Is empty"},{"location":"api/coil-base/coil.request/-parameters/is-empty/#isempty","text":"fun isEmpty(): Boolean Returns true if this object has no parameters.","title":"isEmpty"},{"location":"api/coil-base/coil.request/-parameters/iterator/","text":"coil-base / coil.request / Parameters / iterator iterator operator fun iterator(): Iterator Pair String , Entry Returns an Iterator over the entries in the Parameters . Iteration order is deterministic.","title":"Iterator"},{"location":"api/coil-base/coil.request/-parameters/iterator/#iterator","text":"operator fun iterator(): Iterator Pair String , Entry Returns an Iterator over the entries in the Parameters . Iteration order is deterministic.","title":"iterator"},{"location":"api/coil-base/coil.request/-parameters/new-builder/","text":"coil-base / coil.request / Parameters / newBuilder newBuilder fun newBuilder(): Builder","title":"New builder"},{"location":"api/coil-base/coil.request/-parameters/new-builder/#newbuilder","text":"fun newBuilder(): Builder","title":"newBuilder"},{"location":"api/coil-base/coil.request/-parameters/to-string/","text":"coil-base / coil.request / Parameters / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.request/-parameters/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.request/-parameters/value/","text":"coil-base / coil.request / Parameters / value value fun value(key: String ): Any ? Returns the value associated with key or null if key has no mapping.","title":"Value"},{"location":"api/coil-base/coil.request/-parameters/value/#value","text":"fun value(key: String ): Any ? Returns the value associated with key or null if key has no mapping.","title":"value"},{"location":"api/coil-base/coil.request/-parameters/-builder/","text":"coil-base / coil.request / Parameters / Builder Builder class Builder Constructors Name Summary init Builder() Builder(parameters: Parameters ) Functions Name Summary build Create a new Parameters instance. fun build(): Parameters remove Remove a parameter. fun remove(key: String ): Builder set Set a parameter. fun set(key: String , value: Any ?, cacheKey: String ? = null): Builder","title":"Home"},{"location":"api/coil-base/coil.request/-parameters/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/coil-base/coil.request/-parameters/-builder/#constructors","text":"Name Summary init Builder() Builder(parameters: Parameters )","title":"Constructors"},{"location":"api/coil-base/coil.request/-parameters/-builder/#functions","text":"Name Summary build Create a new Parameters instance. fun build(): Parameters remove Remove a parameter. fun remove(key: String ): Builder set Set a parameter. fun set(key: String , value: Any ?, cacheKey: String ? = null): Builder","title":"Functions"},{"location":"api/coil-base/coil.request/-parameters/-builder/-init-/","text":"coil-base / coil.request / Parameters / Builder / init init Builder() Builder(parameters: Parameters )","title":" init "},{"location":"api/coil-base/coil.request/-parameters/-builder/-init-/#init","text":"Builder() Builder(parameters: Parameters )","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-parameters/-builder/build/","text":"coil-base / coil.request / Parameters / Builder / build build fun build(): Parameters Create a new Parameters instance.","title":"Build"},{"location":"api/coil-base/coil.request/-parameters/-builder/build/#build","text":"fun build(): Parameters Create a new Parameters instance.","title":"build"},{"location":"api/coil-base/coil.request/-parameters/-builder/remove/","text":"coil-base / coil.request / Parameters / Builder / remove remove fun remove(key: String ): Builder Remove a parameter. Parameters key - The parameter's key.","title":"Remove"},{"location":"api/coil-base/coil.request/-parameters/-builder/remove/#remove","text":"fun remove(key: String ): Builder Remove a parameter.","title":"remove"},{"location":"api/coil-base/coil.request/-parameters/-builder/remove/#parameters","text":"key - The parameter's key.","title":"Parameters"},{"location":"api/coil-base/coil.request/-parameters/-builder/set/","text":"coil-base / coil.request / Parameters / Builder / set set @JvmOverloads fun set(key: String , value: Any ?, cacheKey: String ? = null): Builder Set a parameter. Parameters key - The parameter's key. value - The parameter's value. cacheKey - The parameter's cache key. If not null, this value will be added to a request's cache key.","title":"Set"},{"location":"api/coil-base/coil.request/-parameters/-builder/set/#set","text":"@JvmOverloads fun set(key: String , value: Any ?, cacheKey: String ? = null): Builder Set a parameter.","title":"set"},{"location":"api/coil-base/coil.request/-parameters/-builder/set/#parameters","text":"key - The parameter's key. value - The parameter's value. cacheKey - The parameter's cache key. If not null, this value will be added to a request's cache key.","title":"Parameters"},{"location":"api/coil-base/coil.request/-parameters/-entry/","text":"coil-base / coil.request / Parameters / Entry Entry data class Entry Constructors Name Summary init Entry(value: Any ?, cacheKey: String ?) Properties Name Summary cacheKey val cacheKey: String ? value val value: Any ?","title":"Home"},{"location":"api/coil-base/coil.request/-parameters/-entry/#entry","text":"data class Entry","title":"Entry"},{"location":"api/coil-base/coil.request/-parameters/-entry/#constructors","text":"Name Summary init Entry(value: Any ?, cacheKey: String ?)","title":"Constructors"},{"location":"api/coil-base/coil.request/-parameters/-entry/#properties","text":"Name Summary cacheKey val cacheKey: String ? value val value: Any ?","title":"Properties"},{"location":"api/coil-base/coil.request/-parameters/-entry/-init-/","text":"coil-base / coil.request / Parameters / Entry / init init Entry(value: Any ?, cacheKey: String ?)","title":" init "},{"location":"api/coil-base/coil.request/-parameters/-entry/-init-/#init","text":"Entry(value: Any ?, cacheKey: String ?)","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-parameters/-entry/cache-key/","text":"coil-base / coil.request / Parameters / Entry / cacheKey cacheKey val cacheKey: String ?","title":"Cache key"},{"location":"api/coil-base/coil.request/-parameters/-entry/cache-key/#cachekey","text":"val cacheKey: String ?","title":"cacheKey"},{"location":"api/coil-base/coil.request/-parameters/-entry/value/","text":"coil-base / coil.request / Parameters / Entry / value value val value: Any ?","title":"Value"},{"location":"api/coil-base/coil.request/-parameters/-entry/value/#value","text":"val value: Any ?","title":"value"},{"location":"api/coil-base/coil.request/-request/","text":"coil-base / coil.request / Request Request sealed class Request A value object that represents an image request. See Also LoadRequest GetRequest Types Name Summary Listener A set of callbacks for a Request . interface Listener Properties Name Summary aliasKeys abstract val aliasKeys: List String allowHardware abstract val allowHardware: Boolean allowRgb565 abstract val allowRgb565: Boolean bitmapConfig abstract val bitmapConfig: Config colorSpace abstract val colorSpace: ColorSpace ? data abstract val data: Any ? decoder abstract val decoder: Decoder ? diskCachePolicy abstract val diskCachePolicy: CachePolicy dispatcher abstract val dispatcher: CoroutineDispatcher error abstract val error: Drawable ? fallback abstract val fallback: Drawable ? headers abstract val headers: Headers key abstract val key: String ? lifecycle abstract val lifecycle: Lifecycle ? listener abstract val listener: Listener? memoryCachePolicy abstract val memoryCachePolicy: CachePolicy networkCachePolicy abstract val networkCachePolicy: CachePolicy parameters abstract val parameters: Parameters placeholder abstract val placeholder: Drawable ? precision abstract val precision: Precision scale abstract val scale: Scale ? sizeResolver abstract val sizeResolver: SizeResolver ? target abstract val target: Target ? transformations abstract val transformations: List Transformation transition abstract val transition: Transition ? Inheritors Name Summary GetRequest A value object that represents a get image request. class GetRequest : Request LoadRequest A value object that represents a load image request. class LoadRequest : Request","title":"Home"},{"location":"api/coil-base/coil.request/-request/#request","text":"sealed class Request A value object that represents an image request. See Also LoadRequest GetRequest","title":"Request"},{"location":"api/coil-base/coil.request/-request/#types","text":"Name Summary Listener A set of callbacks for a Request . interface Listener","title":"Types"},{"location":"api/coil-base/coil.request/-request/#properties","text":"Name Summary aliasKeys abstract val aliasKeys: List String allowHardware abstract val allowHardware: Boolean allowRgb565 abstract val allowRgb565: Boolean bitmapConfig abstract val bitmapConfig: Config colorSpace abstract val colorSpace: ColorSpace ? data abstract val data: Any ? decoder abstract val decoder: Decoder ? diskCachePolicy abstract val diskCachePolicy: CachePolicy dispatcher abstract val dispatcher: CoroutineDispatcher error abstract val error: Drawable ? fallback abstract val fallback: Drawable ? headers abstract val headers: Headers key abstract val key: String ? lifecycle abstract val lifecycle: Lifecycle ? listener abstract val listener: Listener? memoryCachePolicy abstract val memoryCachePolicy: CachePolicy networkCachePolicy abstract val networkCachePolicy: CachePolicy parameters abstract val parameters: Parameters placeholder abstract val placeholder: Drawable ? precision abstract val precision: Precision scale abstract val scale: Scale ? sizeResolver abstract val sizeResolver: SizeResolver ? target abstract val target: Target ? transformations abstract val transformations: List Transformation transition abstract val transition: Transition ?","title":"Properties"},{"location":"api/coil-base/coil.request/-request/#inheritors","text":"Name Summary GetRequest A value object that represents a get image request. class GetRequest : Request LoadRequest A value object that represents a load image request. class LoadRequest : Request","title":"Inheritors"},{"location":"api/coil-base/coil.request/-request/alias-keys/","text":"coil-base / coil.request / Request / aliasKeys aliasKeys abstract val aliasKeys: List String","title":"Alias keys"},{"location":"api/coil-base/coil.request/-request/alias-keys/#aliaskeys","text":"abstract val aliasKeys: List String","title":"aliasKeys"},{"location":"api/coil-base/coil.request/-request/allow-hardware/","text":"coil-base / coil.request / Request / allowHardware allowHardware abstract val allowHardware: Boolean","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-request/allow-hardware/#allowhardware","text":"abstract val allowHardware: Boolean","title":"allowHardware"},{"location":"api/coil-base/coil.request/-request/allow-rgb565/","text":"coil-base / coil.request / Request / allowRgb565 allowRgb565 abstract val allowRgb565: Boolean","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-request/allow-rgb565/#allowrgb565","text":"abstract val allowRgb565: Boolean","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-request/bitmap-config/","text":"coil-base / coil.request / Request / bitmapConfig bitmapConfig abstract val bitmapConfig: Config","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-request/bitmap-config/#bitmapconfig","text":"abstract val bitmapConfig: Config","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-request/color-space/","text":"coil-base / coil.request / Request / colorSpace colorSpace abstract val colorSpace: ColorSpace ?","title":"Color space"},{"location":"api/coil-base/coil.request/-request/color-space/#colorspace","text":"abstract val colorSpace: ColorSpace ?","title":"colorSpace"},{"location":"api/coil-base/coil.request/-request/data/","text":"coil-base / coil.request / Request / data data abstract val data: Any ?","title":"Data"},{"location":"api/coil-base/coil.request/-request/data/#data","text":"abstract val data: Any ?","title":"data"},{"location":"api/coil-base/coil.request/-request/decoder/","text":"coil-base / coil.request / Request / decoder decoder abstract val decoder: Decoder ?","title":"Decoder"},{"location":"api/coil-base/coil.request/-request/decoder/#decoder","text":"abstract val decoder: Decoder ?","title":"decoder"},{"location":"api/coil-base/coil.request/-request/disk-cache-policy/","text":"coil-base / coil.request / Request / diskCachePolicy diskCachePolicy abstract val diskCachePolicy: CachePolicy","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-request/disk-cache-policy/#diskcachepolicy","text":"abstract val diskCachePolicy: CachePolicy","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-request/dispatcher/","text":"coil-base / coil.request / Request / dispatcher dispatcher abstract val dispatcher: CoroutineDispatcher","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-request/dispatcher/#dispatcher","text":"abstract val dispatcher: CoroutineDispatcher","title":"dispatcher"},{"location":"api/coil-base/coil.request/-request/error/","text":"coil-base / coil.request / Request / error error abstract val error: Drawable ?","title":"Error"},{"location":"api/coil-base/coil.request/-request/error/#error","text":"abstract val error: Drawable ?","title":"error"},{"location":"api/coil-base/coil.request/-request/fallback/","text":"coil-base / coil.request / Request / fallback fallback abstract val fallback: Drawable ?","title":"Fallback"},{"location":"api/coil-base/coil.request/-request/fallback/#fallback","text":"abstract val fallback: Drawable ?","title":"fallback"},{"location":"api/coil-base/coil.request/-request/headers/","text":"coil-base / coil.request / Request / headers headers abstract val headers: Headers","title":"Headers"},{"location":"api/coil-base/coil.request/-request/headers/#headers","text":"abstract val headers: Headers","title":"headers"},{"location":"api/coil-base/coil.request/-request/key/","text":"coil-base / coil.request / Request / key key abstract val key: String ?","title":"Key"},{"location":"api/coil-base/coil.request/-request/key/#key","text":"abstract val key: String ?","title":"key"},{"location":"api/coil-base/coil.request/-request/lifecycle/","text":"coil-base / coil.request / Request / lifecycle lifecycle abstract val lifecycle: Lifecycle ?","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-request/lifecycle/#lifecycle","text":"abstract val lifecycle: Lifecycle ?","title":"lifecycle"},{"location":"api/coil-base/coil.request/-request/listener/","text":"coil-base / coil.request / Request / listener listener abstract val listener: Listener?","title":"Listener"},{"location":"api/coil-base/coil.request/-request/listener/#listener","text":"abstract val listener: Listener?","title":"listener"},{"location":"api/coil-base/coil.request/-request/memory-cache-policy/","text":"coil-base / coil.request / Request / memoryCachePolicy memoryCachePolicy abstract val memoryCachePolicy: CachePolicy","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-request/memory-cache-policy/#memorycachepolicy","text":"abstract val memoryCachePolicy: CachePolicy","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-request/network-cache-policy/","text":"coil-base / coil.request / Request / networkCachePolicy networkCachePolicy abstract val networkCachePolicy: CachePolicy","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-request/network-cache-policy/#networkcachepolicy","text":"abstract val networkCachePolicy: CachePolicy","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-request/parameters/","text":"coil-base / coil.request / Request / parameters parameters abstract val parameters: Parameters","title":"Parameters"},{"location":"api/coil-base/coil.request/-request/parameters/#parameters","text":"abstract val parameters: Parameters","title":"parameters"},{"location":"api/coil-base/coil.request/-request/placeholder/","text":"coil-base / coil.request / Request / placeholder placeholder abstract val placeholder: Drawable ?","title":"Placeholder"},{"location":"api/coil-base/coil.request/-request/placeholder/#placeholder","text":"abstract val placeholder: Drawable ?","title":"placeholder"},{"location":"api/coil-base/coil.request/-request/precision/","text":"coil-base / coil.request / Request / precision precision abstract val precision: Precision","title":"Precision"},{"location":"api/coil-base/coil.request/-request/precision/#precision","text":"abstract val precision: Precision","title":"precision"},{"location":"api/coil-base/coil.request/-request/scale/","text":"coil-base / coil.request / Request / scale scale abstract val scale: Scale ?","title":"Scale"},{"location":"api/coil-base/coil.request/-request/scale/#scale","text":"abstract val scale: Scale ?","title":"scale"},{"location":"api/coil-base/coil.request/-request/size-resolver/","text":"coil-base / coil.request / Request / sizeResolver sizeResolver abstract val sizeResolver: SizeResolver ?","title":"Size resolver"},{"location":"api/coil-base/coil.request/-request/size-resolver/#sizeresolver","text":"abstract val sizeResolver: SizeResolver ?","title":"sizeResolver"},{"location":"api/coil-base/coil.request/-request/target/","text":"coil-base / coil.request / Request / target target abstract val target: Target ?","title":"Target"},{"location":"api/coil-base/coil.request/-request/target/#target","text":"abstract val target: Target ?","title":"target"},{"location":"api/coil-base/coil.request/-request/transformations/","text":"coil-base / coil.request / Request / transformations transformations abstract val transformations: List Transformation","title":"Transformations"},{"location":"api/coil-base/coil.request/-request/transformations/#transformations","text":"abstract val transformations: List Transformation","title":"transformations"},{"location":"api/coil-base/coil.request/-request/transition/","text":"coil-base / coil.request / Request / transition transition abstract val transition: Transition ?","title":"Transition"},{"location":"api/coil-base/coil.request/-request/transition/#transition","text":"abstract val transition: Transition ?","title":"transition"},{"location":"api/coil-base/coil.request/-request/-listener/","text":"coil-base / coil.request / Request / Listener Listener interface Listener A set of callbacks for a Request . Functions Name Summary onCancel Called when the request is cancelled. open fun onCancel(data: Any ?): Unit onError Called when the request fails to load the image. open fun onError(data: Any ?, throwable: Throwable ): Unit onStart Called when the request is dispatched and starts loading the image. open fun onStart(data: Any ): Unit onSuccess Called when the request successfully loads the image. open fun onSuccess(data: Any , source: DataSource ): Unit","title":"Home"},{"location":"api/coil-base/coil.request/-request/-listener/#listener","text":"interface Listener A set of callbacks for a Request .","title":"Listener"},{"location":"api/coil-base/coil.request/-request/-listener/#functions","text":"Name Summary onCancel Called when the request is cancelled. open fun onCancel(data: Any ?): Unit onError Called when the request fails to load the image. open fun onError(data: Any ?, throwable: Throwable ): Unit onStart Called when the request is dispatched and starts loading the image. open fun onStart(data: Any ): Unit onSuccess Called when the request successfully loads the image. open fun onSuccess(data: Any , source: DataSource ): Unit","title":"Functions"},{"location":"api/coil-base/coil.request/-request/-listener/on-cancel/","text":"coil-base / coil.request / Request / Listener / onCancel onCancel @MainThread open fun onCancel(data: Any ?): Unit Called when the request is cancelled.","title":"On cancel"},{"location":"api/coil-base/coil.request/-request/-listener/on-cancel/#oncancel","text":"@MainThread open fun onCancel(data: Any ?): Unit Called when the request is cancelled.","title":"onCancel"},{"location":"api/coil-base/coil.request/-request/-listener/on-error/","text":"coil-base / coil.request / Request / Listener / onError onError @MainThread open fun onError(data: Any ?, throwable: Throwable ): Unit Called when the request fails to load the image.","title":"On error"},{"location":"api/coil-base/coil.request/-request/-listener/on-error/#onerror","text":"@MainThread open fun onError(data: Any ?, throwable: Throwable ): Unit Called when the request fails to load the image.","title":"onError"},{"location":"api/coil-base/coil.request/-request/-listener/on-start/","text":"coil-base / coil.request / Request / Listener / onStart onStart @MainThread open fun onStart(data: Any ): Unit Called when the request is dispatched and starts loading the image.","title":"On start"},{"location":"api/coil-base/coil.request/-request/-listener/on-start/#onstart","text":"@MainThread open fun onStart(data: Any ): Unit Called when the request is dispatched and starts loading the image.","title":"onStart"},{"location":"api/coil-base/coil.request/-request/-listener/on-success/","text":"coil-base / coil.request / Request / Listener / onSuccess onSuccess @MainThread open fun onSuccess(data: Any , source: DataSource ): Unit Called when the request successfully loads the image.","title":"On success"},{"location":"api/coil-base/coil.request/-request/-listener/on-success/#onsuccess","text":"@MainThread open fun onSuccess(data: Any , source: DataSource ): Unit Called when the request successfully loads the image.","title":"onSuccess"},{"location":"api/coil-base/coil.request/-request-builder/","text":"coil-base / coil.request / RequestBuilder RequestBuilder @BuilderMarker sealed class RequestBuilder T : RequestBuilder T Base class for LoadRequestBuilder and GetRequestBuilder . Properties Name Summary aliasKeys var aliasKeys: List String allowHardware var allowHardware: Boolean allowRgb565 var allowRgb565: Boolean bitmapConfig var bitmapConfig: Config colorSpace var colorSpace: ColorSpace ? data var data: Any ? decoder var decoder: Decoder ? diskCachePolicy var diskCachePolicy: CachePolicy dispatcher var dispatcher: CoroutineDispatcher headers var headers: Builder ? key var key: String ? listener var listener: Listener? memoryCachePolicy var memoryCachePolicy: CachePolicy networkCachePolicy var networkCachePolicy: CachePolicy parameters var parameters: Builder? precision var precision: Precision scale var scale: Scale ? sizeResolver var sizeResolver: SizeResolver ? transformations var transformations: List Transformation Functions Name Summary addHeader Add a header for any network operations performed by this request. fun addHeader(name: String , value: String ): T aliasKeys Set a list of supplementary cache keys that are used to check if this request is cached in the memory cache. fun aliasKeys(vararg aliasKeys: String ): T fun aliasKeys(aliasKeys: List String ): T allowHardware Enable/disable the use of Bitmap.Config.HARDWARE for this request. fun allowHardware(enable: Boolean ): T allowRgb565 See: ImageLoaderBuilder.allowRgb565 fun allowRgb565(enable: Boolean ): T bitmapConfig Set the preferred Bitmap.Config . fun bitmapConfig(bitmapConfig: Config ): T colorSpace Set the preferred ColorSpace . fun colorSpace(colorSpace: ColorSpace ): T decoder Set the Decoder to handle decoding any image data. fun decoder(decoder: Decoder ): T diskCachePolicy Enable/disable reading/writing from/to the disk cache. fun diskCachePolicy(policy: CachePolicy ): T dispatcher Set the CoroutineDispatcher to run the fetching, decoding, and transforming work on. fun dispatcher(dispatcher: CoroutineDispatcher ): T headers Set the Headers for any network operations performed by this request. fun headers(headers: Headers ): T key Set the cache key for this request. fun key(key: String ?): T listener Convenience function to create and set the Request.Listener . fun listener(onStart: (data: Any ) - Unit = {}, onCancel: (data: Any ?) - Unit = {}, onError: (data: Any ?, throwable: Throwable ) - Unit = { _, _ - }, onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Set the Request.Listener . fun listener(listener: Listener?): T memoryCachePolicy Enable/disable reading/writing from/to the memory cache. fun memoryCachePolicy(policy: CachePolicy ): T networkCachePolicy Enable/disable reading from the network. fun networkCachePolicy(policy: CachePolicy ): T parameters Set the parameters for this request. fun parameters(parameters: Parameters ): Unit precision Set the required precision for the size of the loaded image. fun precision(precision: Precision ): T removeHeader Remove all network headers with the key name . fun removeHeader(name: String ): T removeParameter Remove a parameter from this request. fun removeParameter(key: String ): T scale Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . fun scale(scale: Scale ): T setHeader Set a header for any network operations performed by this request. fun setHeader(name: String , value: String ): T setParameter Set a parameter for this request. fun setParameter(key: String , value: Any ?, cacheKey: String ? = null): T size Set the requested width/height. fun size(size: Int ): T fun size(width: Int , height: Int ): T fun size(size: Size ): T Set the SizeResolver for this request. It will be used to determine the requested width/height for this request. fun size(resolver: SizeResolver ): T transformations Set the list of Transformation s to be applied to this request. fun transformations(vararg transformations: Transformation ): T fun transformations(transformations: List Transformation ): T Inheritors Name Summary GetRequestBuilder Builder for a GetRequest . class GetRequestBuilder : RequestBuilder GetRequestBuilder LoadRequestBuilder Builder for a LoadRequest . class LoadRequestBuilder : RequestBuilder LoadRequestBuilder","title":"Home"},{"location":"api/coil-base/coil.request/-request-builder/#requestbuilder","text":"@BuilderMarker sealed class RequestBuilder T : RequestBuilder T Base class for LoadRequestBuilder and GetRequestBuilder .","title":"RequestBuilder"},{"location":"api/coil-base/coil.request/-request-builder/#properties","text":"Name Summary aliasKeys var aliasKeys: List String allowHardware var allowHardware: Boolean allowRgb565 var allowRgb565: Boolean bitmapConfig var bitmapConfig: Config colorSpace var colorSpace: ColorSpace ? data var data: Any ? decoder var decoder: Decoder ? diskCachePolicy var diskCachePolicy: CachePolicy dispatcher var dispatcher: CoroutineDispatcher headers var headers: Builder ? key var key: String ? listener var listener: Listener? memoryCachePolicy var memoryCachePolicy: CachePolicy networkCachePolicy var networkCachePolicy: CachePolicy parameters var parameters: Builder? precision var precision: Precision scale var scale: Scale ? sizeResolver var sizeResolver: SizeResolver ? transformations var transformations: List Transformation","title":"Properties"},{"location":"api/coil-base/coil.request/-request-builder/#functions","text":"Name Summary addHeader Add a header for any network operations performed by this request. fun addHeader(name: String , value: String ): T aliasKeys Set a list of supplementary cache keys that are used to check if this request is cached in the memory cache. fun aliasKeys(vararg aliasKeys: String ): T fun aliasKeys(aliasKeys: List String ): T allowHardware Enable/disable the use of Bitmap.Config.HARDWARE for this request. fun allowHardware(enable: Boolean ): T allowRgb565 See: ImageLoaderBuilder.allowRgb565 fun allowRgb565(enable: Boolean ): T bitmapConfig Set the preferred Bitmap.Config . fun bitmapConfig(bitmapConfig: Config ): T colorSpace Set the preferred ColorSpace . fun colorSpace(colorSpace: ColorSpace ): T decoder Set the Decoder to handle decoding any image data. fun decoder(decoder: Decoder ): T diskCachePolicy Enable/disable reading/writing from/to the disk cache. fun diskCachePolicy(policy: CachePolicy ): T dispatcher Set the CoroutineDispatcher to run the fetching, decoding, and transforming work on. fun dispatcher(dispatcher: CoroutineDispatcher ): T headers Set the Headers for any network operations performed by this request. fun headers(headers: Headers ): T key Set the cache key for this request. fun key(key: String ?): T listener Convenience function to create and set the Request.Listener . fun listener(onStart: (data: Any ) - Unit = {}, onCancel: (data: Any ?) - Unit = {}, onError: (data: Any ?, throwable: Throwable ) - Unit = { _, _ - }, onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Set the Request.Listener . fun listener(listener: Listener?): T memoryCachePolicy Enable/disable reading/writing from/to the memory cache. fun memoryCachePolicy(policy: CachePolicy ): T networkCachePolicy Enable/disable reading from the network. fun networkCachePolicy(policy: CachePolicy ): T parameters Set the parameters for this request. fun parameters(parameters: Parameters ): Unit precision Set the required precision for the size of the loaded image. fun precision(precision: Precision ): T removeHeader Remove all network headers with the key name . fun removeHeader(name: String ): T removeParameter Remove a parameter from this request. fun removeParameter(key: String ): T scale Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . fun scale(scale: Scale ): T setHeader Set a header for any network operations performed by this request. fun setHeader(name: String , value: String ): T setParameter Set a parameter for this request. fun setParameter(key: String , value: Any ?, cacheKey: String ? = null): T size Set the requested width/height. fun size(size: Int ): T fun size(width: Int , height: Int ): T fun size(size: Size ): T Set the SizeResolver for this request. It will be used to determine the requested width/height for this request. fun size(resolver: SizeResolver ): T transformations Set the list of Transformation s to be applied to this request. fun transformations(vararg transformations: Transformation ): T fun transformations(transformations: List Transformation ): T","title":"Functions"},{"location":"api/coil-base/coil.request/-request-builder/#inheritors","text":"Name Summary GetRequestBuilder Builder for a GetRequest . class GetRequestBuilder : RequestBuilder GetRequestBuilder LoadRequestBuilder Builder for a LoadRequest . class LoadRequestBuilder : RequestBuilder LoadRequestBuilder","title":"Inheritors"},{"location":"api/coil-base/coil.request/-request-builder/add-header/","text":"coil-base / coil.request / RequestBuilder / addHeader addHeader fun addHeader(name: String , value: String ): T Add a header for any network operations performed by this request. See Also Headers.Builder.add","title":"Add header"},{"location":"api/coil-base/coil.request/-request-builder/add-header/#addheader","text":"fun addHeader(name: String , value: String ): T Add a header for any network operations performed by this request. See Also Headers.Builder.add","title":"addHeader"},{"location":"api/coil-base/coil.request/-request-builder/alias-keys/","text":"coil-base / coil.request / RequestBuilder / aliasKeys aliasKeys protected var aliasKeys: List String ``fun aliasKeys(vararg aliasKeys: String ): T fun aliasKeys(aliasKeys: List String ): T Set a list of supplementary cache keys that are used to check if this request is cached in the memory cache. Requests are still written to the memory cache as key .","title":"Alias keys"},{"location":"api/coil-base/coil.request/-request-builder/alias-keys/#aliaskeys","text":"protected var aliasKeys: List String ``fun aliasKeys(vararg aliasKeys: String ): T fun aliasKeys(aliasKeys: List String ): T Set a list of supplementary cache keys that are used to check if this request is cached in the memory cache. Requests are still written to the memory cache as key .","title":"aliasKeys"},{"location":"api/coil-base/coil.request/-request-builder/allow-hardware/","text":"coil-base / coil.request / RequestBuilder / allowHardware allowHardware protected var allowHardware: Boolean fun allowHardware(enable: Boolean ): T Enable/disable the use of Bitmap.Config.HARDWARE for this request. If false, any use of Bitmap.Config.HARDWARE will be treated as Bitmap.Config.ARGB_8888 . This is useful for shared element transitions, which do not support hardware bitmaps.","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-request-builder/allow-hardware/#allowhardware","text":"protected var allowHardware: Boolean fun allowHardware(enable: Boolean ): T Enable/disable the use of Bitmap.Config.HARDWARE for this request. If false, any use of Bitmap.Config.HARDWARE will be treated as Bitmap.Config.ARGB_8888 . This is useful for shared element transitions, which do not support hardware bitmaps.","title":"allowHardware"},{"location":"api/coil-base/coil.request/-request-builder/allow-rgb565/","text":"coil-base / coil.request / RequestBuilder / allowRgb565 allowRgb565 protected var allowRgb565: Boolean fun allowRgb565(enable: Boolean ): T See: ImageLoaderBuilder.allowRgb565","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-request-builder/allow-rgb565/#allowrgb565","text":"protected var allowRgb565: Boolean fun allowRgb565(enable: Boolean ): T See: ImageLoaderBuilder.allowRgb565","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-request-builder/bitmap-config/","text":"coil-base / coil.request / RequestBuilder / bitmapConfig bitmapConfig protected var bitmapConfig: Config fun bitmapConfig(bitmapConfig: Config ): T Set the preferred Bitmap.Config . This is not guaranteed and a different config may be used in some situations.","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-request-builder/bitmap-config/#bitmapconfig","text":"protected var bitmapConfig: Config fun bitmapConfig(bitmapConfig: Config ): T Set the preferred Bitmap.Config . This is not guaranteed and a different config may be used in some situations.","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-request-builder/color-space/","text":"coil-base / coil.request / RequestBuilder / colorSpace colorSpace protected var colorSpace: ColorSpace ?``fun colorSpace(colorSpace: ColorSpace ): T Set the preferred ColorSpace .","title":"Color space"},{"location":"api/coil-base/coil.request/-request-builder/color-space/#colorspace","text":"protected var colorSpace: ColorSpace ?``fun colorSpace(colorSpace: ColorSpace ): T Set the preferred ColorSpace .","title":"colorSpace"},{"location":"api/coil-base/coil.request/-request-builder/data/","text":"coil-base / coil.request / RequestBuilder / data data protected var data: Any ?","title":"Data"},{"location":"api/coil-base/coil.request/-request-builder/data/#data","text":"protected var data: Any ?","title":"data"},{"location":"api/coil-base/coil.request/-request-builder/decoder/","text":"coil-base / coil.request / RequestBuilder / decoder decoder protected var decoder: Decoder ?``fun decoder(decoder: Decoder ): T Set the Decoder to handle decoding any image data. Use this to force the given Decoder to handle decoding any BufferedSource s returned by Fetcher.fetch . If this isn't set, the ImageLoader will find an applicable Decoder that's registered in its ComponentRegistry . NOTE: This skips calling Decoder.handles for decoder .","title":"Decoder"},{"location":"api/coil-base/coil.request/-request-builder/decoder/#decoder","text":"protected var decoder: Decoder ?``fun decoder(decoder: Decoder ): T Set the Decoder to handle decoding any image data. Use this to force the given Decoder to handle decoding any BufferedSource s returned by Fetcher.fetch . If this isn't set, the ImageLoader will find an applicable Decoder that's registered in its ComponentRegistry . NOTE: This skips calling Decoder.handles for decoder .","title":"decoder"},{"location":"api/coil-base/coil.request/-request-builder/disk-cache-policy/","text":"coil-base / coil.request / RequestBuilder / diskCachePolicy diskCachePolicy protected var diskCachePolicy: CachePolicy fun diskCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the disk cache.","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-request-builder/disk-cache-policy/#diskcachepolicy","text":"protected var diskCachePolicy: CachePolicy fun diskCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the disk cache.","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-request-builder/dispatcher/","text":"coil-base / coil.request / RequestBuilder / dispatcher dispatcher protected var dispatcher: CoroutineDispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): T Set the CoroutineDispatcher to run the fetching, decoding, and transforming work on.","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-request-builder/dispatcher/#dispatcher","text":"protected var dispatcher: CoroutineDispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): T Set the CoroutineDispatcher to run the fetching, decoding, and transforming work on.","title":"dispatcher"},{"location":"api/coil-base/coil.request/-request-builder/headers/","text":"coil-base / coil.request / RequestBuilder / headers headers protected var headers: Builder ?``fun headers(headers: Headers ): T Set the Headers for any network operations performed by this request.","title":"Headers"},{"location":"api/coil-base/coil.request/-request-builder/headers/#headers","text":"protected var headers: Builder ?``fun headers(headers: Headers ): T Set the Headers for any network operations performed by this request.","title":"headers"},{"location":"api/coil-base/coil.request/-request-builder/key/","text":"coil-base / coil.request / RequestBuilder / key key protected var key: String ?``fun key(key: String ?): T Set the cache key for this request. By default, the cache key is computed by the Fetcher , any Parameters , and any Transformation s.","title":"Key"},{"location":"api/coil-base/coil.request/-request-builder/key/#key","text":"protected var key: String ?``fun key(key: String ?): T Set the cache key for this request. By default, the cache key is computed by the Fetcher , any Parameters , and any Transformation s.","title":"key"},{"location":"api/coil-base/coil.request/-request-builder/listener/","text":"coil-base / coil.request / RequestBuilder / listener listener protected var listener: Listener?``inline fun listener(crossinline onStart: (data: Any ) - Unit = {}, crossinline onCancel: (data: Any ?) - Unit = {}, crossinline onError: (data: Any ?, throwable: Throwable ) - Unit = { _, _ - }, crossinline onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Convenience function to create and set the Request.Listener . fun listener(listener: Listener?): T Set the Request.Listener .","title":"Listener"},{"location":"api/coil-base/coil.request/-request-builder/listener/#listener","text":"protected var listener: Listener?``inline fun listener(crossinline onStart: (data: Any ) - Unit = {}, crossinline onCancel: (data: Any ?) - Unit = {}, crossinline onError: (data: Any ?, throwable: Throwable ) - Unit = { _, _ - }, crossinline onSuccess: (data: Any , source: DataSource ) - Unit = { _, _ - }): T Convenience function to create and set the Request.Listener . fun listener(listener: Listener?): T Set the Request.Listener .","title":"listener"},{"location":"api/coil-base/coil.request/-request-builder/memory-cache-policy/","text":"coil-base / coil.request / RequestBuilder / memoryCachePolicy memoryCachePolicy protected var memoryCachePolicy: CachePolicy fun memoryCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the memory cache.","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-request-builder/memory-cache-policy/#memorycachepolicy","text":"protected var memoryCachePolicy: CachePolicy fun memoryCachePolicy(policy: CachePolicy ): T Enable/disable reading/writing from/to the memory cache.","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-request-builder/network-cache-policy/","text":"coil-base / coil.request / RequestBuilder / networkCachePolicy networkCachePolicy protected var networkCachePolicy: CachePolicy fun networkCachePolicy(policy: CachePolicy ): T Enable/disable reading from the network. NOTE: Disabling writes has no effect.","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-request-builder/network-cache-policy/#networkcachepolicy","text":"protected var networkCachePolicy: CachePolicy fun networkCachePolicy(policy: CachePolicy ): T Enable/disable reading from the network. NOTE: Disabling writes has no effect.","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-request-builder/parameters/","text":"coil-base / coil.request / RequestBuilder / parameters parameters protected var parameters: Builder?``fun parameters(parameters: Parameters ): Unit Set the parameters for this request.","title":"Parameters"},{"location":"api/coil-base/coil.request/-request-builder/parameters/#parameters","text":"protected var parameters: Builder?``fun parameters(parameters: Parameters ): Unit Set the parameters for this request.","title":"parameters"},{"location":"api/coil-base/coil.request/-request-builder/precision/","text":"coil-base / coil.request / RequestBuilder / precision precision protected var precision: Precision fun precision(precision: Precision ): T Set the required precision for the size of the loaded image. The default value is Precision.AUTOMATIC , which uses the logic in RequestService.allowInexactSize to determine if output image's dimensions must match the input size and scale exactly. NOTE: If size is OriginalSize , image's dimensions will always be equal to or greater than the image's original dimensions. See Also Precision","title":"Precision"},{"location":"api/coil-base/coil.request/-request-builder/precision/#precision","text":"protected var precision: Precision fun precision(precision: Precision ): T Set the required precision for the size of the loaded image. The default value is Precision.AUTOMATIC , which uses the logic in RequestService.allowInexactSize to determine if output image's dimensions must match the input size and scale exactly. NOTE: If size is OriginalSize , image's dimensions will always be equal to or greater than the image's original dimensions. See Also Precision","title":"precision"},{"location":"api/coil-base/coil.request/-request-builder/remove-header/","text":"coil-base / coil.request / RequestBuilder / removeHeader removeHeader fun removeHeader(name: String ): T Remove all network headers with the key name .","title":"Remove header"},{"location":"api/coil-base/coil.request/-request-builder/remove-header/#removeheader","text":"fun removeHeader(name: String ): T Remove all network headers with the key name .","title":"removeHeader"},{"location":"api/coil-base/coil.request/-request-builder/remove-parameter/","text":"coil-base / coil.request / RequestBuilder / removeParameter removeParameter fun removeParameter(key: String ): T Remove a parameter from this request. See Also Parameters.Builder.remove","title":"Remove parameter"},{"location":"api/coil-base/coil.request/-request-builder/remove-parameter/#removeparameter","text":"fun removeParameter(key: String ): T Remove a parameter from this request. See Also Parameters.Builder.remove","title":"removeParameter"},{"location":"api/coil-base/coil.request/-request-builder/scale/","text":"coil-base / coil.request / RequestBuilder / scale scale protected var scale: Scale ?``fun scale(scale: Scale ): T Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . If this isn't set, Coil will attempt to determine the scale of the request using the logic in RequestService.scale . NOTE: If scale is not set, it is automatically computed for ImageView targets.","title":"Scale"},{"location":"api/coil-base/coil.request/-request-builder/scale/#scale","text":"protected var scale: Scale ?``fun scale(scale: Scale ): T Set the scaling algorithm that will be used to fit/fill the image into the dimensions provided by sizeResolver . If this isn't set, Coil will attempt to determine the scale of the request using the logic in RequestService.scale . NOTE: If scale is not set, it is automatically computed for ImageView targets.","title":"scale"},{"location":"api/coil-base/coil.request/-request-builder/set-header/","text":"coil-base / coil.request / RequestBuilder / setHeader setHeader fun setHeader(name: String , value: String ): T Set a header for any network operations performed by this request. See Also Headers.Builder.set","title":"Set header"},{"location":"api/coil-base/coil.request/-request-builder/set-header/#setheader","text":"fun setHeader(name: String , value: String ): T Set a header for any network operations performed by this request. See Also Headers.Builder.set","title":"setHeader"},{"location":"api/coil-base/coil.request/-request-builder/set-parameter/","text":"coil-base / coil.request / RequestBuilder / setParameter setParameter @JvmOverloads fun setParameter(key: String , value: Any ?, cacheKey: String ? = null): T Set a parameter for this request. See Also Parameters.Builder.set","title":"Set parameter"},{"location":"api/coil-base/coil.request/-request-builder/set-parameter/#setparameter","text":"@JvmOverloads fun setParameter(key: String , value: Any ?, cacheKey: String ? = null): T Set a parameter for this request. See Also Parameters.Builder.set","title":"setParameter"},{"location":"api/coil-base/coil.request/-request-builder/size-resolver/","text":"coil-base / coil.request / RequestBuilder / sizeResolver sizeResolver protected var sizeResolver: SizeResolver ?","title":"Size resolver"},{"location":"api/coil-base/coil.request/-request-builder/size-resolver/#sizeresolver","text":"protected var sizeResolver: SizeResolver ?","title":"sizeResolver"},{"location":"api/coil-base/coil.request/-request-builder/size/","text":"coil-base / coil.request / RequestBuilder / size size fun size(@Px size: Int ): T fun size(@Px width: Int , @Px height: Int ): T fun size(size: Size ): T Set the requested width/height. fun size(resolver: SizeResolver ): T Set the SizeResolver for this request. It will be used to determine the requested width/height for this request. If this isn't set, Coil will attempt to determine the size of the request using the logic in RequestService.sizeResolver .","title":"Size"},{"location":"api/coil-base/coil.request/-request-builder/size/#size","text":"fun size(@Px size: Int ): T fun size(@Px width: Int , @Px height: Int ): T fun size(size: Size ): T Set the requested width/height. fun size(resolver: SizeResolver ): T Set the SizeResolver for this request. It will be used to determine the requested width/height for this request. If this isn't set, Coil will attempt to determine the size of the request using the logic in RequestService.sizeResolver .","title":"size"},{"location":"api/coil-base/coil.request/-request-builder/transformations/","text":"coil-base / coil.request / RequestBuilder / transformations transformations protected var transformations: List Transformation ``fun transformations(vararg transformations: Transformation ): T fun transformations(transformations: List Transformation ): T Set the list of Transformation s to be applied to this request.","title":"Transformations"},{"location":"api/coil-base/coil.request/-request-builder/transformations/#transformations","text":"protected var transformations: List Transformation ``fun transformations(vararg transformations: Transformation ): T fun transformations(transformations: List Transformation ): T Set the list of Transformation s to be applied to this request.","title":"transformations"},{"location":"api/coil-base/coil.request/-request-disposable/","text":"coil-base / coil.request / RequestDisposable RequestDisposable interface RequestDisposable Represents the work of an ImageLoader.load request. Properties Name Summary isDisposed Returns true if the request is complete or cancelling. abstract val isDisposed: Boolean Functions Name Summary await Suspends until any in progress work completes. abstract suspend fun await(): Unit dispose Cancels any in progress work and frees any resources associated with this request. This method is idempotent. abstract fun dispose(): Unit","title":"Home"},{"location":"api/coil-base/coil.request/-request-disposable/#requestdisposable","text":"interface RequestDisposable Represents the work of an ImageLoader.load request.","title":"RequestDisposable"},{"location":"api/coil-base/coil.request/-request-disposable/#properties","text":"Name Summary isDisposed Returns true if the request is complete or cancelling. abstract val isDisposed: Boolean","title":"Properties"},{"location":"api/coil-base/coil.request/-request-disposable/#functions","text":"Name Summary await Suspends until any in progress work completes. abstract suspend fun await(): Unit dispose Cancels any in progress work and frees any resources associated with this request. This method is idempotent. abstract fun dispose(): Unit","title":"Functions"},{"location":"api/coil-base/coil.request/-request-disposable/await/","text":"coil-base / coil.request / RequestDisposable / await await @ExperimentalCoil abstract suspend fun await(): Unit Suspends until any in progress work completes.","title":"Await"},{"location":"api/coil-base/coil.request/-request-disposable/await/#await","text":"@ExperimentalCoil abstract suspend fun await(): Unit Suspends until any in progress work completes.","title":"await"},{"location":"api/coil-base/coil.request/-request-disposable/dispose/","text":"coil-base / coil.request / RequestDisposable / dispose dispose abstract fun dispose(): Unit Cancels any in progress work and frees any resources associated with this request. This method is idempotent.","title":"Dispose"},{"location":"api/coil-base/coil.request/-request-disposable/dispose/#dispose","text":"abstract fun dispose(): Unit Cancels any in progress work and frees any resources associated with this request. This method is idempotent.","title":"dispose"},{"location":"api/coil-base/coil.request/-request-disposable/is-disposed/","text":"coil-base / coil.request / RequestDisposable / isDisposed isDisposed abstract val isDisposed: Boolean Returns true if the request is complete or cancelling.","title":"Is disposed"},{"location":"api/coil-base/coil.request/-request-disposable/is-disposed/#isdisposed","text":"abstract val isDisposed: Boolean Returns true if the request is complete or cancelling.","title":"isDisposed"},{"location":"api/coil-base/coil.size/","text":"coil-base / coil.size Package coil.size Types Name Summary DisplaySizeResolver A SizeResolver that constrains a Target to the size of the display. class DisplaySizeResolver : SizeResolver OriginalSize Represents the width and height of the source image. object OriginalSize : Size PixelSize A positive width and height in pixels. data class PixelSize : Size Precision Represents the required precision for the size of an image in an image request. enum class Precision Scale Represents a scaling policy. enum class Scale Size Represents the target size of an image request. sealed class Size SizeResolver An interface for measuring the target size for an image request. interface SizeResolver ViewSizeResolver A SizeResolver that measures the size of a View . interface ViewSizeResolver T : View : SizeResolver","title":"Home"},{"location":"api/coil-base/coil.size/#package-coilsize","text":"","title":"Package coil.size"},{"location":"api/coil-base/coil.size/#types","text":"Name Summary DisplaySizeResolver A SizeResolver that constrains a Target to the size of the display. class DisplaySizeResolver : SizeResolver OriginalSize Represents the width and height of the source image. object OriginalSize : Size PixelSize A positive width and height in pixels. data class PixelSize : Size Precision Represents the required precision for the size of an image in an image request. enum class Precision Scale Represents a scaling policy. enum class Scale Size Represents the target size of an image request. sealed class Size SizeResolver An interface for measuring the target size for an image request. interface SizeResolver ViewSizeResolver A SizeResolver that measures the size of a View . interface ViewSizeResolver T : View : SizeResolver","title":"Types"},{"location":"api/coil-base/coil.size/-size/","text":"coil-base / coil.size / Size Size sealed class Size Represents the target size of an image request. See Also RequestBuilder.size SizeResolver.size Inheritors Name Summary OriginalSize Represents the width and height of the source image. object OriginalSize : Size PixelSize A positive width and height in pixels. data class PixelSize : Size","title":" size"},{"location":"api/coil-base/coil.size/-size/#size","text":"sealed class Size Represents the target size of an image request. See Also RequestBuilder.size SizeResolver.size","title":"Size"},{"location":"api/coil-base/coil.size/-size/#inheritors","text":"Name Summary OriginalSize Represents the width and height of the source image. object OriginalSize : Size PixelSize A positive width and height in pixels. data class PixelSize : Size","title":"Inheritors"},{"location":"api/coil-base/coil.size/-display-size-resolver/","text":"coil-base / coil.size / DisplaySizeResolver DisplaySizeResolver class DisplaySizeResolver : SizeResolver A SizeResolver that constrains a Target to the size of the display. This is used as the fallback SizeResolver for Request s. Constructors Name Summary init A SizeResolver that constrains a Target to the size of the display. DisplaySizeResolver(context: Context ) Functions Name Summary size Return the Size that the image should be loaded at. suspend fun size(): Size","title":"Home"},{"location":"api/coil-base/coil.size/-display-size-resolver/#displaysizeresolver","text":"class DisplaySizeResolver : SizeResolver A SizeResolver that constrains a Target to the size of the display. This is used as the fallback SizeResolver for Request s.","title":"DisplaySizeResolver"},{"location":"api/coil-base/coil.size/-display-size-resolver/#constructors","text":"Name Summary init A SizeResolver that constrains a Target to the size of the display. DisplaySizeResolver(context: Context )","title":"Constructors"},{"location":"api/coil-base/coil.size/-display-size-resolver/#functions","text":"Name Summary size Return the Size that the image should be loaded at. suspend fun size(): Size","title":"Functions"},{"location":"api/coil-base/coil.size/-display-size-resolver/-init-/","text":"coil-base / coil.size / DisplaySizeResolver / init init DisplaySizeResolver(context: Context ) A SizeResolver that constrains a Target to the size of the display. This is used as the fallback SizeResolver for Request s.","title":" init "},{"location":"api/coil-base/coil.size/-display-size-resolver/-init-/#init","text":"DisplaySizeResolver(context: Context ) A SizeResolver that constrains a Target to the size of the display. This is used as the fallback SizeResolver for Request s.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.size/-display-size-resolver/size/","text":"coil-base / coil.size / DisplaySizeResolver / size size suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Size"},{"location":"api/coil-base/coil.size/-display-size-resolver/size/#size","text":"suspend fun size(): Size Return the Size that the image should be loaded at.","title":"size"},{"location":"api/coil-base/coil.size/-original-size/","text":"coil-base / coil.size / OriginalSize OriginalSize object OriginalSize : Size Represents the width and height of the source image. Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/coil-base/coil.size/-original-size/#originalsize","text":"object OriginalSize : Size Represents the width and height of the source image.","title":"OriginalSize"},{"location":"api/coil-base/coil.size/-original-size/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/coil-base/coil.size/-original-size/to-string/","text":"coil-base / coil.size / OriginalSize / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.size/-original-size/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.size/-pixel-size/","text":"coil-base / coil.size / PixelSize PixelSize data class PixelSize : Size A positive width and height in pixels. Constructors Name Summary init A positive width and height in pixels. PixelSize(width: Int , height: Int ) Properties Name Summary height val height: Int width val width: Int","title":"Home"},{"location":"api/coil-base/coil.size/-pixel-size/#pixelsize","text":"data class PixelSize : Size A positive width and height in pixels.","title":"PixelSize"},{"location":"api/coil-base/coil.size/-pixel-size/#constructors","text":"Name Summary init A positive width and height in pixels. PixelSize(width: Int , height: Int )","title":"Constructors"},{"location":"api/coil-base/coil.size/-pixel-size/#properties","text":"Name Summary height val height: Int width val width: Int","title":"Properties"},{"location":"api/coil-base/coil.size/-pixel-size/-init-/","text":"coil-base / coil.size / PixelSize / init init PixelSize(@Px width: Int , @Px height: Int ) A positive width and height in pixels.","title":" init "},{"location":"api/coil-base/coil.size/-pixel-size/-init-/#init","text":"PixelSize(@Px width: Int , @Px height: Int ) A positive width and height in pixels.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.size/-pixel-size/height/","text":"coil-base / coil.size / PixelSize / height height val height: Int","title":"Height"},{"location":"api/coil-base/coil.size/-pixel-size/height/#height","text":"val height: Int","title":"height"},{"location":"api/coil-base/coil.size/-pixel-size/width/","text":"coil-base / coil.size / PixelSize / width width val width: Int","title":"Width"},{"location":"api/coil-base/coil.size/-pixel-size/width/#width","text":"val width: Int","title":"width"},{"location":"api/coil-base/coil.size/-precision/","text":"coil-base / coil.size / Precision Precision enum class Precision Represents the required precision for the size of an image in an image request. See Also RequestBuilder.precision Enum Values Name Summary EXACT Require that the loaded image's dimensions match the request's size and scale exactly. INEXACT Allow the size of the loaded image to not match the requested dimensions exactly. This enables several optimizations: AUTOMATIC Allow Coil to automatically determine if the size needs to be exact for this request using the logic in RequestService.allowInexactSize .","title":"Home"},{"location":"api/coil-base/coil.size/-precision/#precision","text":"enum class Precision Represents the required precision for the size of an image in an image request. See Also RequestBuilder.precision","title":"Precision"},{"location":"api/coil-base/coil.size/-precision/#enum-values","text":"Name Summary EXACT Require that the loaded image's dimensions match the request's size and scale exactly. INEXACT Allow the size of the loaded image to not match the requested dimensions exactly. This enables several optimizations: AUTOMATIC Allow Coil to automatically determine if the size needs to be exact for this request using the logic in RequestService.allowInexactSize .","title":"Enum Values"},{"location":"api/coil-base/coil.size/-precision/-a-u-t-o-m-a-t-i-c/","text":"coil-base / coil.size / Precision / AUTOMATIC AUTOMATIC AUTOMATIC Allow Coil to automatically determine if the size needs to be exact for this request using the logic in RequestService.allowInexactSize .","title":" a u t o m a t i c"},{"location":"api/coil-base/coil.size/-precision/-a-u-t-o-m-a-t-i-c/#automatic","text":"AUTOMATIC Allow Coil to automatically determine if the size needs to be exact for this request using the logic in RequestService.allowInexactSize .","title":"AUTOMATIC"},{"location":"api/coil-base/coil.size/-precision/-e-x-a-c-t/","text":"coil-base / coil.size / Precision / EXACT EXACT EXACT Require that the loaded image's dimensions match the request's size and scale exactly.","title":" e x a c t"},{"location":"api/coil-base/coil.size/-precision/-e-x-a-c-t/#exact","text":"EXACT Require that the loaded image's dimensions match the request's size and scale exactly.","title":"EXACT"},{"location":"api/coil-base/coil.size/-precision/-i-n-e-x-a-c-t/","text":"coil-base / coil.size / Precision / INEXACT INEXACT INEXACT Allow the size of the loaded image to not match the requested dimensions exactly. This enables several optimizations: If the requested dimensions are larger than the original size of the image, it will be loaded using its original dimensions. This uses less memory. If the image is present in the memory cache at a larger size than the request's dimensions, it will be returned. This increases the hit rate of the memory cache. Prefer this option if your target can scale the loaded image (e.g. ImageView ).","title":" i n e x a c t"},{"location":"api/coil-base/coil.size/-precision/-i-n-e-x-a-c-t/#inexact","text":"INEXACT Allow the size of the loaded image to not match the requested dimensions exactly. This enables several optimizations: If the requested dimensions are larger than the original size of the image, it will be loaded using its original dimensions. This uses less memory. If the image is present in the memory cache at a larger size than the request's dimensions, it will be returned. This increases the hit rate of the memory cache. Prefer this option if your target can scale the loaded image (e.g. ImageView ).","title":"INEXACT"},{"location":"api/coil-base/coil.size/-scale/","text":"coil-base / coil.size / Scale Scale enum class Scale Represents a scaling policy. Conceptually, you can think of this as ImageView.ScaleType without any knowledge of an image's gravity in the view. See Also RequestBuilder.scale Enum Values Name Summary FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view. FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view.","title":"Home"},{"location":"api/coil-base/coil.size/-scale/#scale","text":"enum class Scale Represents a scaling policy. Conceptually, you can think of this as ImageView.ScaleType without any knowledge of an image's gravity in the view. See Also RequestBuilder.scale","title":"Scale"},{"location":"api/coil-base/coil.size/-scale/#enum-values","text":"Name Summary FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view. FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view.","title":"Enum Values"},{"location":"api/coil-base/coil.size/-scale/-f-i-l-l/","text":"coil-base / coil.size / Scale / FILL FILL FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view.","title":" f i l l"},{"location":"api/coil-base/coil.size/-scale/-f-i-l-l/#fill","text":"FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view.","title":"FILL"},{"location":"api/coil-base/coil.size/-scale/-f-i-t/","text":"coil-base / coil.size / Scale / FIT FIT FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view.","title":" f i t"},{"location":"api/coil-base/coil.size/-scale/-f-i-t/#fit","text":"FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view.","title":"FIT"},{"location":"api/coil-base/coil.size/-size-resolver/","text":"coil-base / coil.size / SizeResolver SizeResolver interface SizeResolver An interface for measuring the target size for an image request. See Also RequestBuilder.size Functions Name Summary size Return the Size that the image should be loaded at. abstract suspend fun size(): Size Companion Object Functions Name Summary invoke Construct a SizeResolver instance with a fixed size . operator fun invoke(size: Size ): SizeResolver Inheritors Name Summary DisplaySizeResolver A SizeResolver that constrains a Target to the size of the display. class DisplaySizeResolver : SizeResolver ViewSizeResolver A SizeResolver that measures the size of a View . interface ViewSizeResolver T : View : SizeResolver","title":"Home"},{"location":"api/coil-base/coil.size/-size-resolver/#sizeresolver","text":"interface SizeResolver An interface for measuring the target size for an image request. See Also RequestBuilder.size","title":"SizeResolver"},{"location":"api/coil-base/coil.size/-size-resolver/#functions","text":"Name Summary size Return the Size that the image should be loaded at. abstract suspend fun size(): Size","title":"Functions"},{"location":"api/coil-base/coil.size/-size-resolver/#companion-object-functions","text":"Name Summary invoke Construct a SizeResolver instance with a fixed size . operator fun invoke(size: Size ): SizeResolver","title":"Companion Object Functions"},{"location":"api/coil-base/coil.size/-size-resolver/#inheritors","text":"Name Summary DisplaySizeResolver A SizeResolver that constrains a Target to the size of the display. class DisplaySizeResolver : SizeResolver ViewSizeResolver A SizeResolver that measures the size of a View . interface ViewSizeResolver T : View : SizeResolver","title":"Inheritors"},{"location":"api/coil-base/coil.size/-size-resolver/invoke/","text":"coil-base / coil.size / SizeResolver / invoke invoke operator fun invoke(size: Size ): SizeResolver Construct a SizeResolver instance with a fixed size .","title":"Invoke"},{"location":"api/coil-base/coil.size/-size-resolver/invoke/#invoke","text":"operator fun invoke(size: Size ): SizeResolver Construct a SizeResolver instance with a fixed size .","title":"invoke"},{"location":"api/coil-base/coil.size/-size-resolver/size/","text":"coil-base / coil.size / SizeResolver / size size @MainThread abstract suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Size"},{"location":"api/coil-base/coil.size/-size-resolver/size/#size","text":"@MainThread abstract suspend fun size(): Size Return the Size that the image should be loaded at.","title":"size"},{"location":"api/coil-base/coil.size/-view-size-resolver/","text":"coil-base / coil.size / ViewSizeResolver ViewSizeResolver interface ViewSizeResolver T : View : SizeResolver A SizeResolver that measures the size of a View . Properties Name Summary subtractPadding If true, the view 's padding will be subtracted from its size. open val subtractPadding: Boolean view The View to measure. abstract val view: T Functions Name Summary size Return the Size that the image should be loaded at. open suspend fun size(): Size Companion Object Functions Name Summary invoke Construct a ViewSizeResolver instance using the default View measurement implementation. operator fun T : View invoke(view: T, subtractPadding: Boolean = true): ViewSizeResolver T","title":"Home"},{"location":"api/coil-base/coil.size/-view-size-resolver/#viewsizeresolver","text":"interface ViewSizeResolver T : View : SizeResolver A SizeResolver that measures the size of a View .","title":"ViewSizeResolver"},{"location":"api/coil-base/coil.size/-view-size-resolver/#properties","text":"Name Summary subtractPadding If true, the view 's padding will be subtracted from its size. open val subtractPadding: Boolean view The View to measure. abstract val view: T","title":"Properties"},{"location":"api/coil-base/coil.size/-view-size-resolver/#functions","text":"Name Summary size Return the Size that the image should be loaded at. open suspend fun size(): Size","title":"Functions"},{"location":"api/coil-base/coil.size/-view-size-resolver/#companion-object-functions","text":"Name Summary invoke Construct a ViewSizeResolver instance using the default View measurement implementation. operator fun T : View invoke(view: T, subtractPadding: Boolean = true): ViewSizeResolver T","title":"Companion Object Functions"},{"location":"api/coil-base/coil.size/-view-size-resolver/invoke/","text":"coil-base / coil.size / ViewSizeResolver / invoke invoke operator fun T : View invoke(view: T, subtractPadding: Boolean = true): ViewSizeResolver T Construct a ViewSizeResolver instance using the default View measurement implementation. Parameters view - The View to measure. subtractPadding - If true, the view 's padding will be subtracted from its size.","title":"Invoke"},{"location":"api/coil-base/coil.size/-view-size-resolver/invoke/#invoke","text":"operator fun T : View invoke(view: T, subtractPadding: Boolean = true): ViewSizeResolver T Construct a ViewSizeResolver instance using the default View measurement implementation.","title":"invoke"},{"location":"api/coil-base/coil.size/-view-size-resolver/invoke/#parameters","text":"view - The View to measure. subtractPadding - If true, the view 's padding will be subtracted from its size.","title":"Parameters"},{"location":"api/coil-base/coil.size/-view-size-resolver/size/","text":"coil-base / coil.size / ViewSizeResolver / size size open suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Size"},{"location":"api/coil-base/coil.size/-view-size-resolver/size/#size","text":"open suspend fun size(): Size Return the Size that the image should be loaded at.","title":"size"},{"location":"api/coil-base/coil.size/-view-size-resolver/subtract-padding/","text":"coil-base / coil.size / ViewSizeResolver / subtractPadding subtractPadding open val subtractPadding: Boolean If true, the view 's padding will be subtracted from its size.","title":"Subtract padding"},{"location":"api/coil-base/coil.size/-view-size-resolver/subtract-padding/#subtractpadding","text":"open val subtractPadding: Boolean If true, the view 's padding will be subtracted from its size.","title":"subtractPadding"},{"location":"api/coil-base/coil.size/-view-size-resolver/view/","text":"coil-base / coil.size / ViewSizeResolver / view view abstract val view: T The View to measure.","title":"View"},{"location":"api/coil-base/coil.size/-view-size-resolver/view/#view","text":"abstract val view: T The View to measure.","title":"view"},{"location":"api/coil-base/coil.target/","text":"coil-base / coil.target Package coil.target Types Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget ImageView , DefaultLifecycleObserver PoolableViewTarget A ViewTarget that supports Bitmap pooling. interface PoolableViewTarget T : View : ViewTarget T Target A listener that accepts the result of an image load. interface Target ViewTarget A Target with an associated View . interface ViewTarget T : View : Target","title":"Home"},{"location":"api/coil-base/coil.target/#package-coiltarget","text":"","title":"Package coil.target"},{"location":"api/coil-base/coil.target/#types","text":"Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget ImageView , DefaultLifecycleObserver PoolableViewTarget A ViewTarget that supports Bitmap pooling. interface PoolableViewTarget T : View : ViewTarget T Target A listener that accepts the result of an image load. interface Target ViewTarget A Target with an associated View . interface ViewTarget T : View : Target","title":"Types"},{"location":"api/coil-base/coil.target/-image-view-target/","text":"coil-base / coil.target / ImageViewTarget ImageViewTarget open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget ImageView , DefaultLifecycleObserver A Target that handles setting images on an ImageView . Constructors Name Summary init A Target that handles setting images on an ImageView . ImageViewTarget(view: ImageView ) Properties Name Summary drawable The view 's current Drawable . open val drawable: Drawable ? view The View used by this Target . open val view: ImageView Functions Name Summary onClear Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. open fun onClear(): Unit onError Called if the image request fails. open fun onError(error: Drawable ?): Unit onStart Called when the image request starts. open fun onStart(placeholder: Drawable ?): Unit open fun onStart(owner: LifecycleOwner ): Unit onStop open fun onStop(owner: LifecycleOwner ): Unit onSuccess Called if the image request is successful. open fun onSuccess(result: Drawable ): Unit setDrawable Replace the ImageView 's current drawable with drawable . open fun setDrawable(drawable: Drawable ?): Unit updateAnimation Start/stop the current Drawable 's animation based on the current lifecycle state. open fun updateAnimation(): Unit","title":"Home"},{"location":"api/coil-base/coil.target/-image-view-target/#imageviewtarget","text":"open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget ImageView , DefaultLifecycleObserver A Target that handles setting images on an ImageView .","title":"ImageViewTarget"},{"location":"api/coil-base/coil.target/-image-view-target/#constructors","text":"Name Summary init A Target that handles setting images on an ImageView . ImageViewTarget(view: ImageView )","title":"Constructors"},{"location":"api/coil-base/coil.target/-image-view-target/#properties","text":"Name Summary drawable The view 's current Drawable . open val drawable: Drawable ? view The View used by this Target . open val view: ImageView","title":"Properties"},{"location":"api/coil-base/coil.target/-image-view-target/#functions","text":"Name Summary onClear Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. open fun onClear(): Unit onError Called if the image request fails. open fun onError(error: Drawable ?): Unit onStart Called when the image request starts. open fun onStart(placeholder: Drawable ?): Unit open fun onStart(owner: LifecycleOwner ): Unit onStop open fun onStop(owner: LifecycleOwner ): Unit onSuccess Called if the image request is successful. open fun onSuccess(result: Drawable ): Unit setDrawable Replace the ImageView 's current drawable with drawable . open fun setDrawable(drawable: Drawable ?): Unit updateAnimation Start/stop the current Drawable 's animation based on the current lifecycle state. open fun updateAnimation(): Unit","title":"Functions"},{"location":"api/coil-base/coil.target/-image-view-target/-init-/","text":"coil-base / coil.target / ImageViewTarget / init init ImageViewTarget(view: ImageView ) A Target that handles setting images on an ImageView .","title":" init "},{"location":"api/coil-base/coil.target/-image-view-target/-init-/#init","text":"ImageViewTarget(view: ImageView ) A Target that handles setting images on an ImageView .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.target/-image-view-target/drawable/","text":"coil-base / coil.target / ImageViewTarget / drawable drawable open val drawable: Drawable ? The view 's current Drawable .","title":"Drawable"},{"location":"api/coil-base/coil.target/-image-view-target/drawable/#drawable","text":"open val drawable: Drawable ? The view 's current Drawable .","title":"drawable"},{"location":"api/coil-base/coil.target/-image-view-target/on-clear/","text":"coil-base / coil.target / ImageViewTarget / onClear onClear open fun onClear(): Unit Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"On clear"},{"location":"api/coil-base/coil.target/-image-view-target/on-clear/#onclear","text":"open fun onClear(): Unit Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"onClear"},{"location":"api/coil-base/coil.target/-image-view-target/on-error/","text":"coil-base / coil.target / ImageViewTarget / onError onError open fun onError(error: Drawable ?): Unit Called if the image request fails.","title":"On error"},{"location":"api/coil-base/coil.target/-image-view-target/on-error/#onerror","text":"open fun onError(error: Drawable ?): Unit Called if the image request fails.","title":"onError"},{"location":"api/coil-base/coil.target/-image-view-target/on-start/","text":"coil-base / coil.target / ImageViewTarget / onStart onStart open fun onStart(placeholder: Drawable ?): Unit Called when the image request starts. open fun onStart(owner: LifecycleOwner ): Unit","title":"On start"},{"location":"api/coil-base/coil.target/-image-view-target/on-start/#onstart","text":"open fun onStart(placeholder: Drawable ?): Unit Called when the image request starts. open fun onStart(owner: LifecycleOwner ): Unit","title":"onStart"},{"location":"api/coil-base/coil.target/-image-view-target/on-stop/","text":"coil-base / coil.target / ImageViewTarget / onStop onStop open fun onStop(owner: LifecycleOwner ): Unit","title":"On stop"},{"location":"api/coil-base/coil.target/-image-view-target/on-stop/#onstop","text":"open fun onStop(owner: LifecycleOwner ): Unit","title":"onStop"},{"location":"api/coil-base/coil.target/-image-view-target/on-success/","text":"coil-base / coil.target / ImageViewTarget / onSuccess onSuccess open fun onSuccess(result: Drawable ): Unit Called if the image request is successful.","title":"On success"},{"location":"api/coil-base/coil.target/-image-view-target/on-success/#onsuccess","text":"open fun onSuccess(result: Drawable ): Unit Called if the image request is successful.","title":"onSuccess"},{"location":"api/coil-base/coil.target/-image-view-target/set-drawable/","text":"coil-base / coil.target / ImageViewTarget / setDrawable setDrawable protected open fun setDrawable(drawable: Drawable ?): Unit Replace the ImageView 's current drawable with drawable .","title":"Set drawable"},{"location":"api/coil-base/coil.target/-image-view-target/set-drawable/#setdrawable","text":"protected open fun setDrawable(drawable: Drawable ?): Unit Replace the ImageView 's current drawable with drawable .","title":"setDrawable"},{"location":"api/coil-base/coil.target/-image-view-target/update-animation/","text":"coil-base / coil.target / ImageViewTarget / updateAnimation updateAnimation protected open fun updateAnimation(): Unit Start/stop the current Drawable 's animation based on the current lifecycle state.","title":"Update animation"},{"location":"api/coil-base/coil.target/-image-view-target/update-animation/#updateanimation","text":"protected open fun updateAnimation(): Unit Start/stop the current Drawable 's animation based on the current lifecycle state.","title":"updateAnimation"},{"location":"api/coil-base/coil.target/-image-view-target/view/","text":"coil-base / coil.target / ImageViewTarget / view view open val view: ImageView The View used by this Target .","title":"View"},{"location":"api/coil-base/coil.target/-image-view-target/view/#view","text":"open val view: ImageView The View used by this Target .","title":"view"},{"location":"api/coil-base/coil.target/-poolable-view-target/","text":"coil-base / coil.target / PoolableViewTarget PoolableViewTarget interface PoolableViewTarget T : View : ViewTarget T A ViewTarget that supports Bitmap pooling. Implementing PoolableViewTarget opts this target into bitmap pooling. This allows Coil to re-use Bitmap s given to this target, which improves performance. To opt out of bitmap pooling, implement ViewTarget instead. Implementing PoolableViewTarget requires that you must stop using the previous Drawable as soon as the next PoolableViewTarget lifecycle method is called; one of: Target.onStart , Target.onSuccess , Target.onError , PoolableViewTarget.onClear . For example, a PoolableViewTarget must stop using the placeholder drawable from Target.onStart as soon as Target.onSuccess is called. Continuing to use the previous Drawable after the next lifecycle method is called can cause rendering issues and/or throw exceptions. See Also ViewTarget ImageViewTarget Functions Name Summary onClear Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. abstract fun onClear(): Unit Inheritors Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget ImageView , DefaultLifecycleObserver","title":"Home"},{"location":"api/coil-base/coil.target/-poolable-view-target/#poolableviewtarget","text":"interface PoolableViewTarget T : View : ViewTarget T A ViewTarget that supports Bitmap pooling. Implementing PoolableViewTarget opts this target into bitmap pooling. This allows Coil to re-use Bitmap s given to this target, which improves performance. To opt out of bitmap pooling, implement ViewTarget instead. Implementing PoolableViewTarget requires that you must stop using the previous Drawable as soon as the next PoolableViewTarget lifecycle method is called; one of: Target.onStart , Target.onSuccess , Target.onError , PoolableViewTarget.onClear . For example, a PoolableViewTarget must stop using the placeholder drawable from Target.onStart as soon as Target.onSuccess is called. Continuing to use the previous Drawable after the next lifecycle method is called can cause rendering issues and/or throw exceptions. See Also ViewTarget ImageViewTarget","title":"PoolableViewTarget"},{"location":"api/coil-base/coil.target/-poolable-view-target/#functions","text":"Name Summary onClear Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. abstract fun onClear(): Unit","title":"Functions"},{"location":"api/coil-base/coil.target/-poolable-view-target/#inheritors","text":"Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget ImageView , DefaultLifecycleObserver","title":"Inheritors"},{"location":"api/coil-base/coil.target/-poolable-view-target/on-clear/","text":"coil-base / coil.target / PoolableViewTarget / onClear onClear @MainThread abstract fun onClear(): Unit Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"On clear"},{"location":"api/coil-base/coil.target/-poolable-view-target/on-clear/#onclear","text":"@MainThread abstract fun onClear(): Unit Called when the current Drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"onClear"},{"location":"api/coil-base/coil.target/-target/","text":"coil-base / coil.target / Target Target interface Target A listener that accepts the result of an image load. Each lifecycle method is called at most once. onSuccess and onError are mutually exclusive. Functions Name Summary onError Called if the image request fails. open fun onError(error: Drawable ?): Unit onStart Called when the image request starts. open fun onStart(placeholder: Drawable ?): Unit onSuccess Called if the image request is successful. open fun onSuccess(result: Drawable ): Unit Inheritors Name Summary ViewTarget A Target with an associated View . interface ViewTarget T : View : Target","title":"Home"},{"location":"api/coil-base/coil.target/-target/#target","text":"interface Target A listener that accepts the result of an image load. Each lifecycle method is called at most once. onSuccess and onError are mutually exclusive.","title":"Target"},{"location":"api/coil-base/coil.target/-target/#functions","text":"Name Summary onError Called if the image request fails. open fun onError(error: Drawable ?): Unit onStart Called when the image request starts. open fun onStart(placeholder: Drawable ?): Unit onSuccess Called if the image request is successful. open fun onSuccess(result: Drawable ): Unit","title":"Functions"},{"location":"api/coil-base/coil.target/-target/#inheritors","text":"Name Summary ViewTarget A Target with an associated View . interface ViewTarget T : View : Target","title":"Inheritors"},{"location":"api/coil-base/coil.target/-target/on-error/","text":"coil-base / coil.target / Target / onError onError @MainThread open fun onError(error: Drawable ?): Unit Called if the image request fails.","title":"On error"},{"location":"api/coil-base/coil.target/-target/on-error/#onerror","text":"@MainThread open fun onError(error: Drawable ?): Unit Called if the image request fails.","title":"onError"},{"location":"api/coil-base/coil.target/-target/on-start/","text":"coil-base / coil.target / Target / onStart onStart @MainThread open fun onStart(placeholder: Drawable ?): Unit Called when the image request starts.","title":"On start"},{"location":"api/coil-base/coil.target/-target/on-start/#onstart","text":"@MainThread open fun onStart(placeholder: Drawable ?): Unit Called when the image request starts.","title":"onStart"},{"location":"api/coil-base/coil.target/-target/on-success/","text":"coil-base / coil.target / Target / onSuccess onSuccess @MainThread open fun onSuccess(result: Drawable ): Unit Called if the image request is successful.","title":"On success"},{"location":"api/coil-base/coil.target/-target/on-success/#onsuccess","text":"@MainThread open fun onSuccess(result: Drawable ): Unit Called if the image request is successful.","title":"onSuccess"},{"location":"api/coil-base/coil.target/-view-target/","text":"coil-base / coil.target / ViewTarget ViewTarget interface ViewTarget T : View : Target A Target with an associated View . If the loaded Drawable will only be used with one View , prefer this to Target . Unlike Target s, ViewTarget s can have their lifecycle methods called multiple times. Optionally, a ViewTarget can be declared as a LifecycleObserver . It is automatically registered when the request starts and unregistered when the request is disposed. Properties Name Summary view The View used by this Target . abstract val view: T Inheritors Name Summary PoolableViewTarget A ViewTarget that supports Bitmap pooling. interface PoolableViewTarget T : View : ViewTarget T TransitionTarget A Target that supports applying Transition s. interface TransitionTarget T : View : ViewTarget T","title":"Home"},{"location":"api/coil-base/coil.target/-view-target/#viewtarget","text":"interface ViewTarget T : View : Target A Target with an associated View . If the loaded Drawable will only be used with one View , prefer this to Target . Unlike Target s, ViewTarget s can have their lifecycle methods called multiple times. Optionally, a ViewTarget can be declared as a LifecycleObserver . It is automatically registered when the request starts and unregistered when the request is disposed.","title":"ViewTarget"},{"location":"api/coil-base/coil.target/-view-target/#properties","text":"Name Summary view The View used by this Target . abstract val view: T","title":"Properties"},{"location":"api/coil-base/coil.target/-view-target/#inheritors","text":"Name Summary PoolableViewTarget A ViewTarget that supports Bitmap pooling. interface PoolableViewTarget T : View : ViewTarget T TransitionTarget A Target that supports applying Transition s. interface TransitionTarget T : View : ViewTarget T","title":"Inheritors"},{"location":"api/coil-base/coil.target/-view-target/view/","text":"coil-base / coil.target / ViewTarget / view view abstract val view: T The View used by this Target .","title":"View"},{"location":"api/coil-base/coil.target/-view-target/view/#view","text":"abstract val view: T The View used by this Target .","title":"view"},{"location":"api/coil-base/coil.transform/","text":"coil-base / coil.transform Package coil.transform Types Name Summary BlurTransformation A Transformation that applies a Gaussian blur to an image. class BlurTransformation : Transformation CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. class CircleCropTransformation : Transformation GrayscaleTransformation A Transformation that converts an image to shades of gray. class GrayscaleTransformation : Transformation RoundedCornersTransformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. class RoundedCornersTransformation : Transformation Transformation An interface for making transformations to an image's pixel data. interface Transformation","title":"Home"},{"location":"api/coil-base/coil.transform/#package-coiltransform","text":"","title":"Package coil.transform"},{"location":"api/coil-base/coil.transform/#types","text":"Name Summary BlurTransformation A Transformation that applies a Gaussian blur to an image. class BlurTransformation : Transformation CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. class CircleCropTransformation : Transformation GrayscaleTransformation A Transformation that converts an image to shades of gray. class GrayscaleTransformation : Transformation RoundedCornersTransformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. class RoundedCornersTransformation : Transformation Transformation An interface for making transformations to an image's pixel data. interface Transformation","title":"Types"},{"location":"api/coil-base/coil.transform/-blur-transformation/","text":"coil-base / coil.transform / BlurTransformation BlurTransformation class BlurTransformation : Transformation A Transformation that applies a Gaussian blur to an image. Parameters context - The Context used to create a RenderScript instance. radius - The radius of the blur. sampling - The sampling multiplier used to scale the image. Values 1 will downscale the image. Values between 0 and 1 will upscale the image. Constructors Name Summary init A Transformation that applies a Gaussian blur to an image. BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING) Functions Name Summary key Return a unique key for this transformation. fun key(): String transform Apply the transformation to input . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Home"},{"location":"api/coil-base/coil.transform/-blur-transformation/#blurtransformation","text":"class BlurTransformation : Transformation A Transformation that applies a Gaussian blur to an image.","title":"BlurTransformation"},{"location":"api/coil-base/coil.transform/-blur-transformation/#parameters","text":"context - The Context used to create a RenderScript instance. radius - The radius of the blur. sampling - The sampling multiplier used to scale the image. Values 1 will downscale the image. Values between 0 and 1 will upscale the image.","title":"Parameters"},{"location":"api/coil-base/coil.transform/-blur-transformation/#constructors","text":"Name Summary init A Transformation that applies a Gaussian blur to an image. BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING)","title":"Constructors"},{"location":"api/coil-base/coil.transform/-blur-transformation/#functions","text":"Name Summary key Return a unique key for this transformation. fun key(): String transform Apply the transformation to input . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Functions"},{"location":"api/coil-base/coil.transform/-blur-transformation/-init-/","text":"coil-base / coil.transform / BlurTransformation / init init BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING) A Transformation that applies a Gaussian blur to an image. Parameters context - The Context used to create a RenderScript instance. radius - The radius of the blur. sampling - The sampling multiplier used to scale the image. Values 1 will downscale the image. Values between 0 and 1 will upscale the image.","title":" init "},{"location":"api/coil-base/coil.transform/-blur-transformation/-init-/#init","text":"BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING) A Transformation that applies a Gaussian blur to an image.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-blur-transformation/-init-/#parameters","text":"context - The Context used to create a RenderScript instance. radius - The radius of the blur. sampling - The sampling multiplier used to scale the image. Values 1 will downscale the image. Values between 0 and 1 will upscale the image.","title":"Parameters"},{"location":"api/coil-base/coil.transform/-blur-transformation/key/","text":"coil-base / coil.transform / BlurTransformation / key key fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-blur-transformation/key/#key","text":"fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-blur-transformation/transform/","text":"coil-base / coil.transform / BlurTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every bitmap except the output bitmap to pool so that they can be reused. Parameters pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. See Also BitmapPool.get BitmapPool.put","title":"Transform"},{"location":"api/coil-base/coil.transform/-blur-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every bitmap except the output bitmap to pool so that they can be reused.","title":"transform"},{"location":"api/coil-base/coil.transform/-blur-transformation/transform/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. See Also BitmapPool.get BitmapPool.put","title":"Parameters"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/","text":"coil-base / coil.transform / CircleCropTransformation CircleCropTransformation class CircleCropTransformation : Transformation A Transformation that crops an image using a centered circle as the mask. Constructors Name Summary init A Transformation that crops an image using a centered circle as the mask. CircleCropTransformation() Functions Name Summary key Return a unique key for this transformation. fun key(): String transform Apply the transformation to input . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Home"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/#circlecroptransformation","text":"class CircleCropTransformation : Transformation A Transformation that crops an image using a centered circle as the mask.","title":"CircleCropTransformation"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/#constructors","text":"Name Summary init A Transformation that crops an image using a centered circle as the mask. CircleCropTransformation()","title":"Constructors"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/#functions","text":"Name Summary key Return a unique key for this transformation. fun key(): String transform Apply the transformation to input . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Functions"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/-init-/","text":"coil-base / coil.transform / CircleCropTransformation / init init CircleCropTransformation() A Transformation that crops an image using a centered circle as the mask.","title":" init "},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/-init-/#init","text":"CircleCropTransformation() A Transformation that crops an image using a centered circle as the mask.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/key/","text":"coil-base / coil.transform / CircleCropTransformation / key key fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/key/#key","text":"fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/transform/","text":"coil-base / coil.transform / CircleCropTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every bitmap except the output bitmap to pool so that they can be reused. Parameters pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. See Also BitmapPool.get BitmapPool.put","title":"Transform"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every bitmap except the output bitmap to pool so that they can be reused.","title":"transform"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/transform/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. See Also BitmapPool.get BitmapPool.put","title":"Parameters"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/","text":"coil-base / coil.transform / GrayscaleTransformation GrayscaleTransformation class GrayscaleTransformation : Transformation A Transformation that converts an image to shades of gray. Constructors Name Summary init A Transformation that converts an image to shades of gray. GrayscaleTransformation() Functions Name Summary key Return a unique key for this transformation. fun key(): String transform Apply the transformation to input . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Home"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/#grayscaletransformation","text":"class GrayscaleTransformation : Transformation A Transformation that converts an image to shades of gray.","title":"GrayscaleTransformation"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/#constructors","text":"Name Summary init A Transformation that converts an image to shades of gray. GrayscaleTransformation()","title":"Constructors"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/#functions","text":"Name Summary key Return a unique key for this transformation. fun key(): String transform Apply the transformation to input . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Functions"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/-init-/","text":"coil-base / coil.transform / GrayscaleTransformation / init init GrayscaleTransformation() A Transformation that converts an image to shades of gray.","title":" init "},{"location":"api/coil-base/coil.transform/-grayscale-transformation/-init-/#init","text":"GrayscaleTransformation() A Transformation that converts an image to shades of gray.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/key/","text":"coil-base / coil.transform / GrayscaleTransformation / key key fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/key/#key","text":"fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/transform/","text":"coil-base / coil.transform / GrayscaleTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every bitmap except the output bitmap to pool so that they can be reused. Parameters pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. See Also BitmapPool.get BitmapPool.put","title":"Transform"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every bitmap except the output bitmap to pool so that they can be reused.","title":"transform"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/transform/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. See Also BitmapPool.get BitmapPool.put","title":"Parameters"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/","text":"coil-base / coil.transform / RoundedCornersTransformation RoundedCornersTransformation class RoundedCornersTransformation : Transformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. Parameters topLeft - The radius for the top left corner. topRight - The radius for the top right corner. bottomLeft - The radius for the bottom left corner. bottomRight - The radius for the bottom right corner. Constructors Name Summary init RoundedCornersTransformation(radius: Float ) A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. RoundedCornersTransformation(topLeft: Float = 0f, topRight: Float = 0f, bottomLeft: Float = 0f, bottomRight: Float = 0f) Functions Name Summary key Return a unique key for this transformation. fun key(): String transform Apply the transformation to input . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Home"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#roundedcornerstransformation","text":"class RoundedCornersTransformation : Transformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image.","title":"RoundedCornersTransformation"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#parameters","text":"topLeft - The radius for the top left corner. topRight - The radius for the top right corner. bottomLeft - The radius for the bottom left corner. bottomRight - The radius for the bottom right corner.","title":"Parameters"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#constructors","text":"Name Summary init RoundedCornersTransformation(radius: Float ) A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. RoundedCornersTransformation(topLeft: Float = 0f, topRight: Float = 0f, bottomLeft: Float = 0f, bottomRight: Float = 0f)","title":"Constructors"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#functions","text":"Name Summary key Return a unique key for this transformation. fun key(): String transform Apply the transformation to input . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Functions"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/-init-/","text":"coil-base / coil.transform / RoundedCornersTransformation / init init RoundedCornersTransformation(@Px radius: Float )``RoundedCornersTransformation(@Px topLeft: Float = 0f, @Px topRight: Float = 0f, @Px bottomLeft: Float = 0f, @Px bottomRight: Float = 0f) A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. Parameters topLeft - The radius for the top left corner. topRight - The radius for the top right corner. bottomLeft - The radius for the bottom left corner. bottomRight - The radius for the bottom right corner.","title":" init "},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/-init-/#init","text":"RoundedCornersTransformation(@Px radius: Float )``RoundedCornersTransformation(@Px topLeft: Float = 0f, @Px topRight: Float = 0f, @Px bottomLeft: Float = 0f, @Px bottomRight: Float = 0f) A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/-init-/#parameters","text":"topLeft - The radius for the top left corner. topRight - The radius for the top right corner. bottomLeft - The radius for the bottom left corner. bottomRight - The radius for the bottom right corner.","title":"Parameters"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/key/","text":"coil-base / coil.transform / RoundedCornersTransformation / key key fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/key/#key","text":"fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/transform/","text":"coil-base / coil.transform / RoundedCornersTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every bitmap except the output bitmap to pool so that they can be reused. Parameters pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. See Also BitmapPool.get BitmapPool.put","title":"Transform"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every bitmap except the output bitmap to pool so that they can be reused.","title":"transform"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/transform/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. See Also BitmapPool.get BitmapPool.put","title":"Parameters"},{"location":"api/coil-base/coil.transform/-transformation/","text":"coil-base / coil.transform / Transformation Transformation interface Transformation An interface for making transformations to an image's pixel data. NOTE: If DrawableResult.drawable or DecodeResult.drawable is not a BitmapDrawable , it will be converted to one. This will cause animated drawables to only draw the first frame of their animation. See Also RequestBuilder.transformations Functions Name Summary key Return a unique key for this transformation. abstract fun key(): String transform Apply the transformation to input . abstract suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Inheritors Name Summary BlurTransformation A Transformation that applies a Gaussian blur to an image. class BlurTransformation : Transformation CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. class CircleCropTransformation : Transformation GrayscaleTransformation A Transformation that converts an image to shades of gray. class GrayscaleTransformation : Transformation RoundedCornersTransformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. class RoundedCornersTransformation : Transformation","title":"Home"},{"location":"api/coil-base/coil.transform/-transformation/#transformation","text":"interface Transformation An interface for making transformations to an image's pixel data. NOTE: If DrawableResult.drawable or DecodeResult.drawable is not a BitmapDrawable , it will be converted to one. This will cause animated drawables to only draw the first frame of their animation. See Also RequestBuilder.transformations","title":"Transformation"},{"location":"api/coil-base/coil.transform/-transformation/#functions","text":"Name Summary key Return a unique key for this transformation. abstract fun key(): String transform Apply the transformation to input . abstract suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Functions"},{"location":"api/coil-base/coil.transform/-transformation/#inheritors","text":"Name Summary BlurTransformation A Transformation that applies a Gaussian blur to an image. class BlurTransformation : Transformation CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. class CircleCropTransformation : Transformation GrayscaleTransformation A Transformation that converts an image to shades of gray. class GrayscaleTransformation : Transformation RoundedCornersTransformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. class RoundedCornersTransformation : Transformation","title":"Inheritors"},{"location":"api/coil-base/coil.transform/-transformation/key/","text":"coil-base / coil.transform / Transformation / key key abstract fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-transformation/key/#key","text":"abstract fun key(): String Return a unique key for this transformation. The key should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-transformation/transform/","text":"coil-base / coil.transform / Transformation / transform transform abstract suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every bitmap except the output bitmap to pool so that they can be reused. Parameters pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. See Also BitmapPool.get BitmapPool.put","title":"Transform"},{"location":"api/coil-base/coil.transform/-transformation/transform/#transform","text":"abstract suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input . For optimal performance, do not use Bitmap.createBitmap inside this method. Instead, use the provided BitmapPool to get new Bitmap s. Also, you should return every bitmap except the output bitmap to pool so that they can be reused.","title":"transform"},{"location":"api/coil-base/coil.transform/-transformation/transform/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. See Also BitmapPool.get BitmapPool.put","title":"Parameters"},{"location":"api/coil-base/coil.transition/","text":"coil-base / coil.transition Package coil.transition Types Name Summary CrossfadeTransition A Transition that crossfades from the current drawable to a new one. class CrossfadeTransition : Transition Transition A class to animate between a Target 's current drawable and the result of an image request. interface Transition TransitionResult Represents the result of an image request. sealed class TransitionResult TransitionTarget A Target that supports applying Transition s. interface TransitionTarget T : View : ViewTarget T","title":"Home"},{"location":"api/coil-base/coil.transition/#package-coiltransition","text":"","title":"Package coil.transition"},{"location":"api/coil-base/coil.transition/#types","text":"Name Summary CrossfadeTransition A Transition that crossfades from the current drawable to a new one. class CrossfadeTransition : Transition Transition A class to animate between a Target 's current drawable and the result of an image request. interface Transition TransitionResult Represents the result of an image request. sealed class TransitionResult TransitionTarget A Target that supports applying Transition s. interface TransitionTarget T : View : ViewTarget T","title":"Types"},{"location":"api/coil-base/coil.transition/-crossfade-transition/","text":"coil-base / coil.transition / CrossfadeTransition CrossfadeTransition @ExperimentalCoil class CrossfadeTransition : Transition A Transition that crossfades from the current drawable to a new one. Constructors Name Summary init A Transition that crossfades from the current drawable to a new one. CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION) Properties Name Summary durationMillis val durationMillis: Int Functions Name Summary transition Start the transition animation and suspend until it completes or is cancelled. suspend fun transition(target: TransitionTarget * , result: TransitionResult ): Unit","title":"Home"},{"location":"api/coil-base/coil.transition/-crossfade-transition/#crossfadetransition","text":"@ExperimentalCoil class CrossfadeTransition : Transition A Transition that crossfades from the current drawable to a new one.","title":"CrossfadeTransition"},{"location":"api/coil-base/coil.transition/-crossfade-transition/#constructors","text":"Name Summary init A Transition that crossfades from the current drawable to a new one. CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION)","title":"Constructors"},{"location":"api/coil-base/coil.transition/-crossfade-transition/#properties","text":"Name Summary durationMillis val durationMillis: Int","title":"Properties"},{"location":"api/coil-base/coil.transition/-crossfade-transition/#functions","text":"Name Summary transition Start the transition animation and suspend until it completes or is cancelled. suspend fun transition(target: TransitionTarget * , result: TransitionResult ): Unit","title":"Functions"},{"location":"api/coil-base/coil.transition/-crossfade-transition/-init-/","text":"coil-base / coil.transition / CrossfadeTransition / init init CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION) A Transition that crossfades from the current drawable to a new one.","title":" init "},{"location":"api/coil-base/coil.transition/-crossfade-transition/-init-/#init","text":"CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION) A Transition that crossfades from the current drawable to a new one.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transition/-crossfade-transition/duration-millis/","text":"coil-base / coil.transition / CrossfadeTransition / durationMillis durationMillis val durationMillis: Int","title":"Duration millis"},{"location":"api/coil-base/coil.transition/-crossfade-transition/duration-millis/#durationmillis","text":"val durationMillis: Int","title":"durationMillis"},{"location":"api/coil-base/coil.transition/-crossfade-transition/transition/","text":"coil-base / coil.transition / CrossfadeTransition / transition transition suspend fun transition(target: TransitionTarget * , result: TransitionResult ): Unit Start the transition animation and suspend until it completes or is cancelled. Failure to suspend until the animation is complete can cause the drawable 's Bitmap (if any) to be pooled while it is still in use. NOTE: Implementations are responsible for calling the correct Target lifecycle callback. See CrossfadeTransition for an example. Parameters target - The target to apply this transition to. result - The result of the image request.","title":"Transition"},{"location":"api/coil-base/coil.transition/-crossfade-transition/transition/#transition","text":"suspend fun transition(target: TransitionTarget * , result: TransitionResult ): Unit Start the transition animation and suspend until it completes or is cancelled. Failure to suspend until the animation is complete can cause the drawable 's Bitmap (if any) to be pooled while it is still in use. NOTE: Implementations are responsible for calling the correct Target lifecycle callback. See CrossfadeTransition for an example.","title":"transition"},{"location":"api/coil-base/coil.transition/-crossfade-transition/transition/#parameters","text":"target - The target to apply this transition to. result - The result of the image request.","title":"Parameters"},{"location":"api/coil-base/coil.transition/-transition/","text":"coil-base / coil.transition / Transition Transition @ExperimentalCoil interface Transition A class to animate between a Target 's current drawable and the result of an image request. NOTE: A Target must implement TransitionTarget to support applying Transition s. If the Target does not implement TransitionTarget , any Transition s will be ignored. Functions Name Summary transition Start the transition animation and suspend until it completes or is cancelled. abstract suspend fun transition(target: TransitionTarget * , result: TransitionResult ): Unit Inheritors Name Summary CrossfadeTransition A Transition that crossfades from the current drawable to a new one. class CrossfadeTransition : Transition","title":"Home"},{"location":"api/coil-base/coil.transition/-transition/#transition","text":"@ExperimentalCoil interface Transition A class to animate between a Target 's current drawable and the result of an image request. NOTE: A Target must implement TransitionTarget to support applying Transition s. If the Target does not implement TransitionTarget , any Transition s will be ignored.","title":"Transition"},{"location":"api/coil-base/coil.transition/-transition/#functions","text":"Name Summary transition Start the transition animation and suspend until it completes or is cancelled. abstract suspend fun transition(target: TransitionTarget * , result: TransitionResult ): Unit","title":"Functions"},{"location":"api/coil-base/coil.transition/-transition/#inheritors","text":"Name Summary CrossfadeTransition A Transition that crossfades from the current drawable to a new one. class CrossfadeTransition : Transition","title":"Inheritors"},{"location":"api/coil-base/coil.transition/-transition/transition/","text":"coil-base / coil.transition / Transition / transition transition @MainThread abstract suspend fun transition(target: TransitionTarget * , result: TransitionResult ): Unit Start the transition animation and suspend until it completes or is cancelled. Failure to suspend until the animation is complete can cause the drawable 's Bitmap (if any) to be pooled while it is still in use. NOTE: Implementations are responsible for calling the correct Target lifecycle callback. See CrossfadeTransition for an example. Parameters target - The target to apply this transition to. result - The result of the image request.","title":"Transition"},{"location":"api/coil-base/coil.transition/-transition/transition/#transition","text":"@MainThread abstract suspend fun transition(target: TransitionTarget * , result: TransitionResult ): Unit Start the transition animation and suspend until it completes or is cancelled. Failure to suspend until the animation is complete can cause the drawable 's Bitmap (if any) to be pooled while it is still in use. NOTE: Implementations are responsible for calling the correct Target lifecycle callback. See CrossfadeTransition for an example.","title":"transition"},{"location":"api/coil-base/coil.transition/-transition/transition/#parameters","text":"target - The target to apply this transition to. result - The result of the image request.","title":"Parameters"},{"location":"api/coil-base/coil.transition/-transition-result/","text":"coil-base / coil.transition / TransitionResult TransitionResult @ExperimentalCoil sealed class TransitionResult Represents the result of an image request. Types Name Summary Error Represents a failed image request. class Error : TransitionResult Success Represents a successful image request. class Success : TransitionResult","title":"Home"},{"location":"api/coil-base/coil.transition/-transition-result/#transitionresult","text":"@ExperimentalCoil sealed class TransitionResult Represents the result of an image request.","title":"TransitionResult"},{"location":"api/coil-base/coil.transition/-transition-result/#types","text":"Name Summary Error Represents a failed image request. class Error : TransitionResult Success Represents a successful image request. class Success : TransitionResult","title":"Types"},{"location":"api/coil-base/coil.transition/-transition-result/-error/","text":"coil-base / coil.transition / TransitionResult / Error Error class Error : TransitionResult Represents a failed image request. When passed to Transition.transition , implementations should call Target.onError exactly once. Parameters drawable - The Drawable to transition to. Constructors Name Summary init Represents a failed image request. Error(drawable: Drawable ?) Properties Name Summary drawable The Drawable to transition to. val drawable: Drawable ?","title":"Home"},{"location":"api/coil-base/coil.transition/-transition-result/-error/#error","text":"class Error : TransitionResult Represents a failed image request. When passed to Transition.transition , implementations should call Target.onError exactly once.","title":"Error"},{"location":"api/coil-base/coil.transition/-transition-result/-error/#parameters","text":"drawable - The Drawable to transition to.","title":"Parameters"},{"location":"api/coil-base/coil.transition/-transition-result/-error/#constructors","text":"Name Summary init Represents a failed image request. Error(drawable: Drawable ?)","title":"Constructors"},{"location":"api/coil-base/coil.transition/-transition-result/-error/#properties","text":"Name Summary drawable The Drawable to transition to. val drawable: Drawable ?","title":"Properties"},{"location":"api/coil-base/coil.transition/-transition-result/-error/-init-/","text":"coil-base / coil.transition / TransitionResult / Error / init init Error(drawable: Drawable ?) Represents a failed image request. When passed to Transition.transition , implementations should call Target.onError exactly once. Parameters drawable - The Drawable to transition to.","title":" init "},{"location":"api/coil-base/coil.transition/-transition-result/-error/-init-/#init","text":"Error(drawable: Drawable ?) Represents a failed image request. When passed to Transition.transition , implementations should call Target.onError exactly once.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transition/-transition-result/-error/-init-/#parameters","text":"drawable - The Drawable to transition to.","title":"Parameters"},{"location":"api/coil-base/coil.transition/-transition-result/-error/drawable/","text":"coil-base / coil.transition / TransitionResult / Error / drawable drawable val drawable: Drawable ? The Drawable to transition to.","title":"Drawable"},{"location":"api/coil-base/coil.transition/-transition-result/-error/drawable/#drawable","text":"val drawable: Drawable ? The Drawable to transition to.","title":"drawable"},{"location":"api/coil-base/coil.transition/-transition-result/-success/","text":"coil-base / coil.transition / TransitionResult / Success Success class Success : TransitionResult Represents a successful image request. When passed to Transition.transition , implementations should call Target.onSuccess exactly once. Parameters drawable - The Drawable to transition to. isMemoryCache - True if the request was fulfilled from the memory cache. Constructors Name Summary init Represents a successful image request. Success(drawable: Drawable , isMemoryCache: Boolean ) Properties Name Summary drawable The Drawable to transition to. val drawable: Drawable isMemoryCache True if the request was fulfilled from the memory cache. val isMemoryCache: Boolean","title":"Home"},{"location":"api/coil-base/coil.transition/-transition-result/-success/#success","text":"class Success : TransitionResult Represents a successful image request. When passed to Transition.transition , implementations should call Target.onSuccess exactly once.","title":"Success"},{"location":"api/coil-base/coil.transition/-transition-result/-success/#parameters","text":"drawable - The Drawable to transition to. isMemoryCache - True if the request was fulfilled from the memory cache.","title":"Parameters"},{"location":"api/coil-base/coil.transition/-transition-result/-success/#constructors","text":"Name Summary init Represents a successful image request. Success(drawable: Drawable , isMemoryCache: Boolean )","title":"Constructors"},{"location":"api/coil-base/coil.transition/-transition-result/-success/#properties","text":"Name Summary drawable The Drawable to transition to. val drawable: Drawable isMemoryCache True if the request was fulfilled from the memory cache. val isMemoryCache: Boolean","title":"Properties"},{"location":"api/coil-base/coil.transition/-transition-result/-success/-init-/","text":"coil-base / coil.transition / TransitionResult / Success / init init Success(drawable: Drawable , isMemoryCache: Boolean ) Represents a successful image request. When passed to Transition.transition , implementations should call Target.onSuccess exactly once. Parameters drawable - The Drawable to transition to. isMemoryCache - True if the request was fulfilled from the memory cache.","title":" init "},{"location":"api/coil-base/coil.transition/-transition-result/-success/-init-/#init","text":"Success(drawable: Drawable , isMemoryCache: Boolean ) Represents a successful image request. When passed to Transition.transition , implementations should call Target.onSuccess exactly once.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transition/-transition-result/-success/-init-/#parameters","text":"drawable - The Drawable to transition to. isMemoryCache - True if the request was fulfilled from the memory cache.","title":"Parameters"},{"location":"api/coil-base/coil.transition/-transition-result/-success/drawable/","text":"coil-base / coil.transition / TransitionResult / Success / drawable drawable val drawable: Drawable The Drawable to transition to.","title":"Drawable"},{"location":"api/coil-base/coil.transition/-transition-result/-success/drawable/#drawable","text":"val drawable: Drawable The Drawable to transition to.","title":"drawable"},{"location":"api/coil-base/coil.transition/-transition-result/-success/is-memory-cache/","text":"coil-base / coil.transition / TransitionResult / Success / isMemoryCache isMemoryCache val isMemoryCache: Boolean True if the request was fulfilled from the memory cache.","title":"Is memory cache"},{"location":"api/coil-base/coil.transition/-transition-result/-success/is-memory-cache/#ismemorycache","text":"val isMemoryCache: Boolean True if the request was fulfilled from the memory cache.","title":"isMemoryCache"},{"location":"api/coil-base/coil.transition/-transition-target/","text":"coil-base / coil.transition / TransitionTarget TransitionTarget @ExperimentalCoil interface TransitionTarget T : View : ViewTarget T A Target that supports applying Transition s. Properties Name Summary drawable The view 's current Drawable . abstract val drawable: Drawable ? Inheritors Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget ImageView , DefaultLifecycleObserver","title":"Home"},{"location":"api/coil-base/coil.transition/-transition-target/#transitiontarget","text":"@ExperimentalCoil interface TransitionTarget T : View : ViewTarget T A Target that supports applying Transition s.","title":"TransitionTarget"},{"location":"api/coil-base/coil.transition/-transition-target/#properties","text":"Name Summary drawable The view 's current Drawable . abstract val drawable: Drawable ?","title":"Properties"},{"location":"api/coil-base/coil.transition/-transition-target/#inheritors","text":"Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget ImageView , DefaultLifecycleObserver","title":"Inheritors"},{"location":"api/coil-base/coil.transition/-transition-target/drawable/","text":"coil-base / coil.transition / TransitionTarget / drawable drawable abstract val drawable: Drawable ? The view 's current Drawable .","title":"Drawable"},{"location":"api/coil-base/coil.transition/-transition-target/drawable/#drawable","text":"abstract val drawable: Drawable ? The view 's current Drawable .","title":"drawable"},{"location":"api/coil-base/coil.util/","text":"coil-base / coil.util Package coil.util Types Name Summary CoilLogger A singleton that enables/disables logging to Log . object CoilLogger CoilUtils Public utility methods for Coil. object CoilUtils","title":"Home"},{"location":"api/coil-base/coil.util/#package-coilutil","text":"","title":"Package coil.util"},{"location":"api/coil-base/coil.util/#types","text":"Name Summary CoilLogger A singleton that enables/disables logging to Log . object CoilLogger CoilUtils Public utility methods for Coil. object CoilUtils","title":"Types"},{"location":"api/coil-base/coil.util/-coil-logger/","text":"coil-base / coil.util / CoilLogger CoilLogger object CoilLogger A singleton that enables/disables logging to Log . Functions Name Summary setEnabled Enable/disable logging. fun setEnabled(enabled: Boolean ): Unit setLevel Set the minimum importance for Coil to log. fun setLevel(level: Int ): Unit","title":"Home"},{"location":"api/coil-base/coil.util/-coil-logger/#coillogger","text":"object CoilLogger A singleton that enables/disables logging to Log .","title":"CoilLogger"},{"location":"api/coil-base/coil.util/-coil-logger/#functions","text":"Name Summary setEnabled Enable/disable logging. fun setEnabled(enabled: Boolean ): Unit setLevel Set the minimum importance for Coil to log. fun setLevel(level: Int ): Unit","title":"Functions"},{"location":"api/coil-base/coil.util/-coil-logger/set-enabled/","text":"coil-base / coil.util / CoilLogger / setEnabled setEnabled @JvmStatic fun setEnabled(enabled: Boolean ): Unit Enable/disable logging. NOTE: Enabling this reduces performance. Additionally, this will log URLs which can contain PII . You should not enable this in release builds.","title":"Set enabled"},{"location":"api/coil-base/coil.util/-coil-logger/set-enabled/#setenabled","text":"@JvmStatic fun setEnabled(enabled: Boolean ): Unit Enable/disable logging. NOTE: Enabling this reduces performance. Additionally, this will log URLs which can contain PII . You should not enable this in release builds.","title":"setEnabled"},{"location":"api/coil-base/coil.util/-coil-logger/set-level/","text":"coil-base / coil.util / CoilLogger / setLevel setLevel @JvmStatic fun setLevel(level: Int ): Unit Set the minimum importance for Coil to log. See Also Log","title":"Set level"},{"location":"api/coil-base/coil.util/-coil-logger/set-level/#setlevel","text":"@JvmStatic fun setLevel(level: Int ): Unit Set the minimum importance for Coil to log. See Also Log","title":"setLevel"},{"location":"api/coil-base/coil.util/-coil-utils/","text":"coil-base / coil.util / CoilUtils CoilUtils object CoilUtils Public utility methods for Coil. Functions Name Summary clear Cancel any in progress requests attached to view and clear any associated resources. fun clear(view: View ): Unit createDefaultCache Create an OkHttp disk cache with a reasonable default size and location. fun createDefaultCache(context: Context ): Cache","title":"Home"},{"location":"api/coil-base/coil.util/-coil-utils/#coilutils","text":"object CoilUtils Public utility methods for Coil.","title":"CoilUtils"},{"location":"api/coil-base/coil.util/-coil-utils/#functions","text":"Name Summary clear Cancel any in progress requests attached to view and clear any associated resources. fun clear(view: View ): Unit createDefaultCache Create an OkHttp disk cache with a reasonable default size and location. fun createDefaultCache(context: Context ): Cache","title":"Functions"},{"location":"api/coil-base/coil.util/-coil-utils/clear/","text":"coil-base / coil.util / CoilUtils / clear clear @ExperimentalCoil @JvmStatic fun clear(view: View ): Unit Cancel any in progress requests attached to view and clear any associated resources.","title":"Clear"},{"location":"api/coil-base/coil.util/-coil-utils/clear/#clear","text":"@ExperimentalCoil @JvmStatic fun clear(view: View ): Unit Cancel any in progress requests attached to view and clear any associated resources.","title":"clear"},{"location":"api/coil-base/coil.util/-coil-utils/create-default-cache/","text":"coil-base / coil.util / CoilUtils / createDefaultCache createDefaultCache @JvmStatic fun createDefaultCache(context: Context ): Cache Create an OkHttp disk cache with a reasonable default size and location.","title":"Create default cache"},{"location":"api/coil-base/coil.util/-coil-utils/create-default-cache/#createdefaultcache","text":"@JvmStatic fun createDefaultCache(context: Context ): Cache Create an OkHttp disk cache with a reasonable default size and location.","title":"createDefaultCache"},{"location":"api/coil-default/","text":"coil-default Packages Name Summary coil coil.api coil.util Index All Types","title":"coil"},{"location":"api/coil-default/#packages","text":"Name Summary coil coil.api coil.util","title":"Packages"},{"location":"api/coil-default/#index","text":"All Types","title":"Index"},{"location":"api/coil-default/alltypes/","text":"All Types Name Summary coil.Coil A singleton that holds the default ImageLoader instance. | coil.util.CoilContentProvider A ContentProvider whose Context is used to initialize the Coil singleton. | (extensions in package coil.api) android.widget.ImageView","title":"Home"},{"location":"api/coil-default/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/coil-default/alltypes/#coilcoil","text":"A singleton that holds the default ImageLoader instance. |","title":"coil.Coil"},{"location":"api/coil-default/alltypes/#coilutilcoilcontentprovider","text":"A ContentProvider whose Context is used to initialize the Coil singleton. | (extensions in package coil.api)","title":"coil.util.CoilContentProvider"},{"location":"api/coil-default/alltypes/#androidwidgetimageview","text":"","title":"android.widget.ImageView"},{"location":"api/coil-default/coil/","text":"coil-default / coil Package coil Types Name Summary Coil A singleton that holds the default ImageLoader instance. object Coil","title":"Home"},{"location":"api/coil-default/coil/#package-coil","text":"","title":"Package coil"},{"location":"api/coil-default/coil/#types","text":"Name Summary Coil A singleton that holds the default ImageLoader instance. object Coil","title":"Types"},{"location":"api/coil-default/coil/-coil/","text":"coil-default / coil / Coil Coil object Coil A singleton that holds the default ImageLoader instance. Functions Name Summary loader Get the default ImageLoader instance. Creates a new instance if none has been set. fun loader(): ImageLoader setDefaultImageLoader Set the default ImageLoader instance. Shutdown the current instance. fun setDefaultImageLoader(loader: ImageLoader ): Unit Set a lazy callback to create the default ImageLoader instance. Shutdown the current instance. fun setDefaultImageLoader(initializer: () - ImageLoader ): Unit Extension Functions Name Summary get suspend fun Coil .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun Coil .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun Coil .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Home"},{"location":"api/coil-default/coil/-coil/#coil","text":"object Coil A singleton that holds the default ImageLoader instance.","title":"Coil"},{"location":"api/coil-default/coil/-coil/#functions","text":"Name Summary loader Get the default ImageLoader instance. Creates a new instance if none has been set. fun loader(): ImageLoader setDefaultImageLoader Set the default ImageLoader instance. Shutdown the current instance. fun setDefaultImageLoader(loader: ImageLoader ): Unit Set a lazy callback to create the default ImageLoader instance. Shutdown the current instance. fun setDefaultImageLoader(initializer: () - ImageLoader ): Unit","title":"Functions"},{"location":"api/coil-default/coil/-coil/#extension-functions","text":"Name Summary get suspend fun Coil .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun Coil .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun Coil .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Extension Functions"},{"location":"api/coil-default/coil/-coil/loader/","text":"coil-default / coil / Coil / loader loader @JvmStatic fun loader(): ImageLoader Get the default ImageLoader instance. Creates a new instance if none has been set.","title":"Loader"},{"location":"api/coil-default/coil/-coil/loader/#loader","text":"@JvmStatic fun loader(): ImageLoader Get the default ImageLoader instance. Creates a new instance if none has been set.","title":"loader"},{"location":"api/coil-default/coil/-coil/set-default-image-loader/","text":"coil-default / coil / Coil / setDefaultImageLoader setDefaultImageLoader @JvmStatic fun setDefaultImageLoader(loader: ImageLoader ): Unit Set the default ImageLoader instance. Shutdown the current instance. @JvmStatic fun setDefaultImageLoader(initializer: () - ImageLoader ): Unit Set a lazy callback to create the default ImageLoader instance. Shutdown the current instance. The initializer is guaranteed to only be called once. This enables lazy instantiation of the default ImageLoader .","title":"Set default image loader"},{"location":"api/coil-default/coil/-coil/set-default-image-loader/#setdefaultimageloader","text":"@JvmStatic fun setDefaultImageLoader(loader: ImageLoader ): Unit Set the default ImageLoader instance. Shutdown the current instance. @JvmStatic fun setDefaultImageLoader(initializer: () - ImageLoader ): Unit Set a lazy callback to create the default ImageLoader instance. Shutdown the current instance. The initializer is guaranteed to only be called once. This enables lazy instantiation of the default ImageLoader .","title":"setDefaultImageLoader"},{"location":"api/coil-default/coil.api/","text":"coil-default / coil.api Package coil.api Extensions for External Classes Name Summary android.widget.ImageView Functions Name Summary get suspend fun Coil .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun Coil .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun Coil .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Home"},{"location":"api/coil-default/coil.api/#package-coilapi","text":"","title":"Package coil.api"},{"location":"api/coil-default/coil.api/#extensions-for-external-classes","text":"Name Summary android.widget.ImageView","title":"Extensions for External Classes"},{"location":"api/coil-default/coil.api/#functions","text":"Name Summary get suspend fun Coil .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable getAny suspend fun Coil .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable load fun Coil .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Functions"},{"location":"api/coil-default/coil.api/get-any/","text":"coil-default / coil.api / getAny getAny suspend inline fun Coil .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"Get any"},{"location":"api/coil-default/coil.api/get-any/#getany","text":"suspend inline fun Coil .getAny(data: Any , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"getAny"},{"location":"api/coil-default/coil.api/get/","text":"coil-default / coil.api / get get suspend inline fun Coil .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(@DrawableRes drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"Get"},{"location":"api/coil-default/coil.api/get/#get","text":"suspend inline fun Coil .get(uri: String , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(url: HttpUrl , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(uri: Uri , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(file: File , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(@DrawableRes drawableRes: Int , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(drawable: Drawable , builder: GetRequestBuilder .() - Unit = {}): Drawable suspend inline fun Coil .get(bitmap: Bitmap , builder: GetRequestBuilder .() - Unit = {}): Drawable","title":"get"},{"location":"api/coil-default/coil.api/load-any/","text":"coil-default / coil.api / loadAny loadAny inline fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Load any"},{"location":"api/coil-default/coil.api/load-any/#loadany","text":"inline fun Coil .loadAny(context: Context , data: Any ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"loadAny"},{"location":"api/coil-default/coil.api/load/","text":"coil-default / coil.api / load load inline fun Coil .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , @DrawableRes drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Load"},{"location":"api/coil-default/coil.api/load/#load","text":"inline fun Coil .load(context: Context , uri: String ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , url: HttpUrl ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , uri: Uri ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , file: File ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , @DrawableRes drawableRes: Int , builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , drawable: Drawable ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun Coil .load(context: Context , bitmap: Bitmap ?, builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"load"},{"location":"api/coil-default/coil.api/android.widget.-image-view/","text":"coil-default / coil.api / android.widget.ImageView Extensions for android.widget.ImageView Name Summary clear Cancel any in progress requests and clear any resources associated with this ImageView . fun ImageView .clear(): Unit load fun ImageView .load(uri: String ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(file: File ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(drawableRes: Int , imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Home"},{"location":"api/coil-default/coil.api/android.widget.-image-view/#extensions-for-androidwidgetimageview","text":"Name Summary clear Cancel any in progress requests and clear any resources associated with this ImageView . fun ImageView .clear(): Unit load fun ImageView .load(uri: String ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(file: File ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(drawableRes: Int , imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable loadAny fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Extensions for android.widget.ImageView"},{"location":"api/coil-default/coil.api/android.widget.-image-view/clear/","text":"coil-default / coil.api / android.widget.ImageView / clear clear fun ImageView .clear(): Unit Cancel any in progress requests and clear any resources associated with this ImageView .","title":"Clear"},{"location":"api/coil-default/coil.api/android.widget.-image-view/clear/#clear","text":"fun ImageView .clear(): Unit Cancel any in progress requests and clear any resources associated with this ImageView .","title":"clear"},{"location":"api/coil-default/coil.api/android.widget.-image-view/load-any/","text":"coil-default / coil.api / android.widget.ImageView / loadAny loadAny inline fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Load any"},{"location":"api/coil-default/coil.api/android.widget.-image-view/load-any/#loadany","text":"inline fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"loadAny"},{"location":"api/coil-default/coil.api/android.widget.-image-view/load/","text":"coil-default / coil.api / android.widget.ImageView / load load inline fun ImageView .load(uri: String ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(file: File ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(@DrawableRes drawableRes: Int , imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"Load"},{"location":"api/coil-default/coil.api/android.widget.-image-view/load/#load","text":"inline fun ImageView .load(uri: String ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(file: File ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(@DrawableRes drawableRes: Int , imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable inline fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = Coil.loader(), builder: LoadRequestBuilder .() - Unit = {}): RequestDisposable","title":"load"},{"location":"api/coil-default/coil.util/","text":"coil-default / coil.util Package coil.util Types Name Summary CoilContentProvider A ContentProvider whose Context is used to initialize the Coil singleton. class CoilContentProvider : ContentProvider","title":"Home"},{"location":"api/coil-default/coil.util/#package-coilutil","text":"","title":"Package coil.util"},{"location":"api/coil-default/coil.util/#types","text":"Name Summary CoilContentProvider A ContentProvider whose Context is used to initialize the Coil singleton. class CoilContentProvider : ContentProvider","title":"Types"},{"location":"api/coil-default/coil.util/-coil-content-provider/","text":"coil-default / coil.util / CoilContentProvider CoilContentProvider class CoilContentProvider : ContentProvider A ContentProvider whose Context is used to initialize the Coil singleton. Constructors Name Summary init A ContentProvider whose Context is used to initialize the Coil singleton. CoilContentProvider() Functions Name Summary delete fun delete(uri: Uri , selection: String ?, selectionArgs: Array String ?): Int getType fun getType(uri: Uri ): String ? insert fun insert(uri: Uri , values: ContentValues ?): Uri ? onCreate fun onCreate(): Boolean query fun query(uri: Uri , projection: Array String ?, selection: String ?, selectionArgs: Array String ?, sortOrder: String ?): Cursor ? update fun update(uri: Uri , values: ContentValues ?, selection: String ?, selectionArgs: Array String ?): Int","title":"Home"},{"location":"api/coil-default/coil.util/-coil-content-provider/#coilcontentprovider","text":"class CoilContentProvider : ContentProvider A ContentProvider whose Context is used to initialize the Coil singleton.","title":"CoilContentProvider"},{"location":"api/coil-default/coil.util/-coil-content-provider/#constructors","text":"Name Summary init A ContentProvider whose Context is used to initialize the Coil singleton. CoilContentProvider()","title":"Constructors"},{"location":"api/coil-default/coil.util/-coil-content-provider/#functions","text":"Name Summary delete fun delete(uri: Uri , selection: String ?, selectionArgs: Array String ?): Int getType fun getType(uri: Uri ): String ? insert fun insert(uri: Uri , values: ContentValues ?): Uri ? onCreate fun onCreate(): Boolean query fun query(uri: Uri , projection: Array String ?, selection: String ?, selectionArgs: Array String ?, sortOrder: String ?): Cursor ? update fun update(uri: Uri , values: ContentValues ?, selection: String ?, selectionArgs: Array String ?): Int","title":"Functions"},{"location":"api/coil-default/coil.util/-coil-content-provider/-init-/","text":"coil-default / coil.util / CoilContentProvider / init init CoilContentProvider() A ContentProvider whose Context is used to initialize the Coil singleton.","title":" init "},{"location":"api/coil-default/coil.util/-coil-content-provider/-init-/#init","text":"CoilContentProvider() A ContentProvider whose Context is used to initialize the Coil singleton.","title":"&lt;init&gt;"},{"location":"api/coil-default/coil.util/-coil-content-provider/delete/","text":"coil-default / coil.util / CoilContentProvider / delete delete fun delete(uri: Uri , selection: String ?, selectionArgs: Array String ?): Int","title":"Delete"},{"location":"api/coil-default/coil.util/-coil-content-provider/delete/#delete","text":"fun delete(uri: Uri , selection: String ?, selectionArgs: Array String ?): Int","title":"delete"},{"location":"api/coil-default/coil.util/-coil-content-provider/get-type/","text":"coil-default / coil.util / CoilContentProvider / getType getType fun getType(uri: Uri ): String ?","title":"Get type"},{"location":"api/coil-default/coil.util/-coil-content-provider/get-type/#gettype","text":"fun getType(uri: Uri ): String ?","title":"getType"},{"location":"api/coil-default/coil.util/-coil-content-provider/insert/","text":"coil-default / coil.util / CoilContentProvider / insert insert fun insert(uri: Uri , values: ContentValues ?): Uri ?","title":"Insert"},{"location":"api/coil-default/coil.util/-coil-content-provider/insert/#insert","text":"fun insert(uri: Uri , values: ContentValues ?): Uri ?","title":"insert"},{"location":"api/coil-default/coil.util/-coil-content-provider/on-create/","text":"coil-default / coil.util / CoilContentProvider / onCreate onCreate fun onCreate(): Boolean","title":"On create"},{"location":"api/coil-default/coil.util/-coil-content-provider/on-create/#oncreate","text":"fun onCreate(): Boolean","title":"onCreate"},{"location":"api/coil-default/coil.util/-coil-content-provider/query/","text":"coil-default / coil.util / CoilContentProvider / query query fun query(uri: Uri , projection: Array String ?, selection: String ?, selectionArgs: Array String ?, sortOrder: String ?): Cursor ?","title":"Query"},{"location":"api/coil-default/coil.util/-coil-content-provider/query/#query","text":"fun query(uri: Uri , projection: Array String ?, selection: String ?, selectionArgs: Array String ?, sortOrder: String ?): Cursor ?","title":"query"},{"location":"api/coil-default/coil.util/-coil-content-provider/update/","text":"coil-default / coil.util / CoilContentProvider / update update fun update(uri: Uri , values: ContentValues ?, selection: String ?, selectionArgs: Array String ?): Int","title":"Update"},{"location":"api/coil-default/coil.util/-coil-content-provider/update/#update","text":"fun update(uri: Uri , values: ContentValues ?, selection: String ?, selectionArgs: Array String ?): Int","title":"update"},{"location":"api/coil-gif/","text":"coil-gif Packages Name Summary coil.decode coil.drawable coil.extension Index All Types","title":"coil-gif"},{"location":"api/coil-gif/#packages","text":"Name Summary coil.decode coil.drawable coil.extension","title":"Packages"},{"location":"api/coil-gif/#index","text":"All Types","title":"Index"},{"location":"api/coil-gif/alltypes/","text":"All Types Name Summary coil.decode.GifDecoder A Decoder that uses Movie to decode GIFs. | coil.decode.ImageDecoderDecoder A Decoder that uses ImageDecoder to decode GIFs and animated WebPs on Android P and above. | coil.drawable.MovieDrawable A Drawable that supports rendering Movie s (i.e. GIFs). | (extensions in package coil.extension) coil.request.Parameters | (extensions in package coil.extension) coil.request.RequestBuilder | coil.drawable.ScaleDrawable A Drawable that centers and scales its child to fill its bounds.","title":"Home"},{"location":"api/coil-gif/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/coil-gif/alltypes/#coildecodegifdecoder","text":"A Decoder that uses Movie to decode GIFs. |","title":"coil.decode.GifDecoder"},{"location":"api/coil-gif/alltypes/#coildecodeimagedecoderdecoder","text":"A Decoder that uses ImageDecoder to decode GIFs and animated WebPs on Android P and above. |","title":"coil.decode.ImageDecoderDecoder"},{"location":"api/coil-gif/alltypes/#coildrawablemoviedrawable","text":"A Drawable that supports rendering Movie s (i.e. GIFs). | (extensions in package coil.extension)","title":"coil.drawable.MovieDrawable"},{"location":"api/coil-gif/alltypes/#coilrequestparameters","text":"| (extensions in package coil.extension)","title":"coil.request.Parameters"},{"location":"api/coil-gif/alltypes/#coilrequestrequestbuilder","text":"|","title":"coil.request.RequestBuilder"},{"location":"api/coil-gif/alltypes/#coildrawablescaledrawable","text":"A Drawable that centers and scales its child to fill its bounds.","title":"coil.drawable.ScaleDrawable"},{"location":"api/coil-gif/coil.decode/","text":"coil-gif / coil.decode Package coil.decode Types Name Summary GifDecoder A Decoder that uses Movie to decode GIFs. class GifDecoder : Decoder ImageDecoderDecoder A Decoder that uses ImageDecoder to decode GIFs and animated WebPs on Android P and above. class ImageDecoderDecoder : Decoder","title":"Home"},{"location":"api/coil-gif/coil.decode/#package-coildecode","text":"","title":"Package coil.decode"},{"location":"api/coil-gif/coil.decode/#types","text":"Name Summary GifDecoder A Decoder that uses Movie to decode GIFs. class GifDecoder : Decoder ImageDecoderDecoder A Decoder that uses ImageDecoder to decode GIFs and animated WebPs on Android P and above. class ImageDecoderDecoder : Decoder","title":"Types"},{"location":"api/coil-gif/coil.decode/-gif-decoder/","text":"coil-gif / coil.decode / GifDecoder GifDecoder class GifDecoder : Decoder A Decoder that uses Movie to decode GIFs. NOTE: Prefer using ImageDecoderDecoder on Android P and above. Constructors Name Summary init A Decoder that uses Movie to decode GIFs. GifDecoder() Functions Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean Companion Object Properties Name Summary REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":"Home"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#gifdecoder","text":"class GifDecoder : Decoder A Decoder that uses Movie to decode GIFs. NOTE: Prefer using ImageDecoderDecoder on Android P and above.","title":"GifDecoder"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#constructors","text":"Name Summary init A Decoder that uses Movie to decode GIFs. GifDecoder()","title":"Constructors"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#functions","text":"Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#companion-object-properties","text":"Name Summary REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":"Companion Object Properties"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-init-/","text":"coil-gif / coil.decode / GifDecoder / init init GifDecoder() A Decoder that uses Movie to decode GIFs. NOTE: Prefer using ImageDecoderDecoder on Android P and above.","title":" init "},{"location":"api/coil-gif/coil.decode/-gif-decoder/-init-/#init","text":"GifDecoder() A Decoder that uses Movie to decode GIFs. NOTE: Prefer using ImageDecoderDecoder on Android P and above.","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-r-e-p-e-a-t_-c-o-u-n-t_-k-e-y/","text":"coil-gif / coil.decode / GifDecoder / REPEAT_COUNT_KEY REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":" r e p e a t  c o u n t  k e y"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-r-e-p-e-a-t_-c-o-u-n-t_-k-e-y/#repeat_count_key","text":"const val REPEAT_COUNT_KEY: String","title":"REPEAT_COUNT_KEY"},{"location":"api/coil-gif/coil.decode/-gif-decoder/decode/","text":"coil-gif / coil.decode / GifDecoder / decode decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"Decode"},{"location":"api/coil-gif/coil.decode/-gif-decoder/decode/#decode","text":"suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"decode"},{"location":"api/coil-gif/coil.decode/-gif-decoder/handles/","text":"coil-gif / coil.decode / GifDecoder / handles handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Handles"},{"location":"api/coil-gif/coil.decode/-gif-decoder/handles/#handles","text":"fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"handles"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/","text":"coil-gif / coil.decode / ImageDecoderDecoder ImageDecoderDecoder class ImageDecoderDecoder : Decoder A Decoder that uses ImageDecoder to decode GIFs and animated WebPs on Android P and above. Constructors Name Summary init A Decoder that uses ImageDecoder to decode GIFs and animated WebPs on Android P and above. ImageDecoderDecoder() Functions Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean Companion Object Properties Name Summary REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":"Home"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#imagedecoderdecoder","text":"class ImageDecoderDecoder : Decoder A Decoder that uses ImageDecoder to decode GIFs and animated WebPs on Android P and above.","title":"ImageDecoderDecoder"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#constructors","text":"Name Summary init A Decoder that uses ImageDecoder to decode GIFs and animated WebPs on Android P and above. ImageDecoderDecoder()","title":"Constructors"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#functions","text":"Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#companion-object-properties","text":"Name Summary REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":"Companion Object Properties"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-init-/","text":"coil-gif / coil.decode / ImageDecoderDecoder / init init ImageDecoderDecoder() A Decoder that uses ImageDecoder to decode GIFs and animated WebPs on Android P and above.","title":" init "},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-init-/#init","text":"ImageDecoderDecoder() A Decoder that uses ImageDecoder to decode GIFs and animated WebPs on Android P and above.","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-r-e-p-e-a-t_-c-o-u-n-t_-k-e-y/","text":"coil-gif / coil.decode / ImageDecoderDecoder / REPEAT_COUNT_KEY REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":" r e p e a t  c o u n t  k e y"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-r-e-p-e-a-t_-c-o-u-n-t_-k-e-y/#repeat_count_key","text":"const val REPEAT_COUNT_KEY: String","title":"REPEAT_COUNT_KEY"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/decode/","text":"coil-gif / coil.decode / ImageDecoderDecoder / decode decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"Decode"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/decode/#decode","text":"suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"decode"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/handles/","text":"coil-gif / coil.decode / ImageDecoderDecoder / handles handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Handles"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/handles/#handles","text":"fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"handles"},{"location":"api/coil-gif/coil.drawable/","text":"coil-gif / coil.drawable Package coil.drawable Types Name Summary MovieDrawable A Drawable that supports rendering Movie s (i.e. GIFs). class MovieDrawable : Drawable , Animatable2Compat ScaleDrawable A Drawable that centers and scales its child to fill its bounds. class ScaleDrawable : Drawable , Callback , Animatable","title":"Home"},{"location":"api/coil-gif/coil.drawable/#package-coildrawable","text":"","title":"Package coil.drawable"},{"location":"api/coil-gif/coil.drawable/#types","text":"Name Summary MovieDrawable A Drawable that supports rendering Movie s (i.e. GIFs). class MovieDrawable : Drawable , Animatable2Compat ScaleDrawable A Drawable that centers and scales its child to fill its bounds. class ScaleDrawable : Drawable , Callback , Animatable","title":"Types"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/","text":"coil-gif / coil.drawable / MovieDrawable MovieDrawable class MovieDrawable : Drawable , Animatable2Compat A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on Android P and above. Constructors Name Summary init A Drawable that supports rendering Movie s (i.e. GIFs). MovieDrawable(movie: Movie , config: Config , scale: Scale , pool: BitmapPool ) Functions Name Summary clearAnimationCallbacks fun clearAnimationCallbacks(): Unit draw fun draw(canvas: Canvas ): Unit getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int getRepeatCount Get the number of times the animation will repeat. fun getRepeatCount(): Int isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setRepeatCount Set the number of times to repeat the animation. fun setRepeatCount(repeatCount: Int ): Unit start fun start(): Unit stop fun stop(): Unit unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean Companion Object Properties Name Summary REPEAT_INFINITE Pass this to setRepeatCount to repeat infinitely. const val REPEAT_INFINITE: Int","title":"Home"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#moviedrawable","text":"class MovieDrawable : Drawable , Animatable2Compat A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on Android P and above.","title":"MovieDrawable"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#constructors","text":"Name Summary init A Drawable that supports rendering Movie s (i.e. GIFs). MovieDrawable(movie: Movie , config: Config , scale: Scale , pool: BitmapPool )","title":"Constructors"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#functions","text":"Name Summary clearAnimationCallbacks fun clearAnimationCallbacks(): Unit draw fun draw(canvas: Canvas ): Unit getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int getRepeatCount Get the number of times the animation will repeat. fun getRepeatCount(): Int isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setRepeatCount Set the number of times to repeat the animation. fun setRepeatCount(repeatCount: Int ): Unit start fun start(): Unit stop fun stop(): Unit unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean","title":"Functions"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#companion-object-properties","text":"Name Summary REPEAT_INFINITE Pass this to setRepeatCount to repeat infinitely. const val REPEAT_INFINITE: Int","title":"Companion Object Properties"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/-init-/","text":"coil-gif / coil.drawable / MovieDrawable / init init MovieDrawable(movie: Movie , config: Config , scale: Scale , pool: BitmapPool ) A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on Android P and above.","title":" init "},{"location":"api/coil-gif/coil.drawable/-movie-drawable/-init-/#init","text":"MovieDrawable(movie: Movie , config: Config , scale: Scale , pool: BitmapPool ) A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on Android P and above.","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/-r-e-p-e-a-t_-i-n-f-i-n-i-t-e/","text":"coil-gif / coil.drawable / MovieDrawable / REPEAT_INFINITE REPEAT_INFINITE const val REPEAT_INFINITE: Int Pass this to setRepeatCount to repeat infinitely.","title":" r e p e a t  i n f i n i t e"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/-r-e-p-e-a-t_-i-n-f-i-n-i-t-e/#repeat_infinite","text":"const val REPEAT_INFINITE: Int Pass this to setRepeatCount to repeat infinitely.","title":"REPEAT_INFINITE"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/clear-animation-callbacks/","text":"coil-gif / coil.drawable / MovieDrawable / clearAnimationCallbacks clearAnimationCallbacks fun clearAnimationCallbacks(): Unit","title":"Clear animation callbacks"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/clear-animation-callbacks/#clearanimationcallbacks","text":"fun clearAnimationCallbacks(): Unit","title":"clearAnimationCallbacks"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/draw/","text":"coil-gif / coil.drawable / MovieDrawable / draw draw fun draw(canvas: Canvas ): Unit","title":"Draw"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/draw/#draw","text":"fun draw(canvas: Canvas ): Unit","title":"draw"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-height/","text":"coil-gif / coil.drawable / MovieDrawable / getIntrinsicHeight getIntrinsicHeight fun getIntrinsicHeight(): Int","title":"Get intrinsic height"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-height/#getintrinsicheight","text":"fun getIntrinsicHeight(): Int","title":"getIntrinsicHeight"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-width/","text":"coil-gif / coil.drawable / MovieDrawable / getIntrinsicWidth getIntrinsicWidth fun getIntrinsicWidth(): Int","title":"Get intrinsic width"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-width/#getintrinsicwidth","text":"fun getIntrinsicWidth(): Int","title":"getIntrinsicWidth"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-opacity/","text":"coil-gif / coil.drawable / MovieDrawable / getOpacity getOpacity fun getOpacity(): Int","title":"Get opacity"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-opacity/#getopacity","text":"fun getOpacity(): Int","title":"getOpacity"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-repeat-count/","text":"coil-gif / coil.drawable / MovieDrawable / getRepeatCount getRepeatCount fun getRepeatCount(): Int Get the number of times the animation will repeat.","title":"Get repeat count"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-repeat-count/#getrepeatcount","text":"fun getRepeatCount(): Int Get the number of times the animation will repeat.","title":"getRepeatCount"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/is-running/","text":"coil-gif / coil.drawable / MovieDrawable / isRunning isRunning fun isRunning(): Boolean","title":"Is running"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/is-running/#isrunning","text":"fun isRunning(): Boolean","title":"isRunning"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/on-bounds-change/","text":"coil-gif / coil.drawable / MovieDrawable / onBoundsChange onBoundsChange protected fun onBoundsChange(bounds: Rect ): Unit","title":"On bounds change"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/on-bounds-change/#onboundschange","text":"protected fun onBoundsChange(bounds: Rect ): Unit","title":"onBoundsChange"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/register-animation-callback/","text":"coil-gif / coil.drawable / MovieDrawable / registerAnimationCallback registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit","title":"Register animation callback"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/register-animation-callback/#registeranimationcallback","text":"fun registerAnimationCallback(callback: AnimationCallback ): Unit","title":"registerAnimationCallback"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-alpha/","text":"coil-gif / coil.drawable / MovieDrawable / setAlpha setAlpha fun setAlpha(alpha: Int ): Unit","title":"Set alpha"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-alpha/#setalpha","text":"fun setAlpha(alpha: Int ): Unit","title":"setAlpha"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-color-filter/","text":"coil-gif / coil.drawable / MovieDrawable / setColorFilter setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"Set color filter"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-color-filter/#setcolorfilter","text":"fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"setColorFilter"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-repeat-count/","text":"coil-gif / coil.drawable / MovieDrawable / setRepeatCount setRepeatCount fun setRepeatCount(repeatCount: Int ): Unit Set the number of times to repeat the animation. If the animation is already running, any iterations that have already occurred will count towards the new count. NOTE: This method matches the behavior of AnimatedImageDrawable.setRepeatCount . i.e. setting repeatCount to 2 will result in the animation playing 3 times. Setting repeatCount to 0 will result in the animation playing once. Default: REPEAT_INFINITE","title":"Set repeat count"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-repeat-count/#setrepeatcount","text":"fun setRepeatCount(repeatCount: Int ): Unit Set the number of times to repeat the animation. If the animation is already running, any iterations that have already occurred will count towards the new count. NOTE: This method matches the behavior of AnimatedImageDrawable.setRepeatCount . i.e. setting repeatCount to 2 will result in the animation playing 3 times. Setting repeatCount to 0 will result in the animation playing once. Default: REPEAT_INFINITE","title":"setRepeatCount"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/start/","text":"coil-gif / coil.drawable / MovieDrawable / start start fun start(): Unit","title":"Start"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/start/#start","text":"fun start(): Unit","title":"start"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/stop/","text":"coil-gif / coil.drawable / MovieDrawable / stop stop fun stop(): Unit","title":"Stop"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/stop/#stop","text":"fun stop(): Unit","title":"stop"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/unregister-animation-callback/","text":"coil-gif / coil.drawable / MovieDrawable / unregisterAnimationCallback unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean","title":"Unregister animation callback"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/unregister-animation-callback/#unregisteranimationcallback","text":"fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean","title":"unregisterAnimationCallback"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/","text":"coil-gif / coil.drawable / ScaleDrawable ScaleDrawable class ScaleDrawable : Drawable , Callback , Animatable A Drawable that centers and scales its child to fill its bounds. This allows drawables that only draw within their intrinsic dimensions (e.g. AnimatedImageDrawable ) to fill their entire bounds. Constructors Name Summary init A Drawable that centers and scales its child to fill its bounds. ScaleDrawable(child: Drawable , scale: Scale = Scale.FIT) Properties Name Summary child val child: Drawable Functions Name Summary draw fun draw(canvas: Canvas ): Unit getAlpha fun getAlpha(): Int getColorFilter fun getColorFilter(): ColorFilter ! getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit onLevelChange fun onLevelChange(level: Int ): Boolean onStateChange fun onStateChange(state: IntArray ): Boolean scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setTint fun setTint(tintColor: Int ): Unit setTintBlendMode fun setTintBlendMode(blendMode: BlendMode ?): Unit setTintList fun setTintList(tint: ColorStateList ?): Unit setTintMode fun setTintMode(tintMode: Mode ?): Unit start fun start(): Unit stop fun stop(): Unit unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Home"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/#scaledrawable","text":"class ScaleDrawable : Drawable , Callback , Animatable A Drawable that centers and scales its child to fill its bounds. This allows drawables that only draw within their intrinsic dimensions (e.g. AnimatedImageDrawable ) to fill their entire bounds.","title":"ScaleDrawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/#constructors","text":"Name Summary init A Drawable that centers and scales its child to fill its bounds. ScaleDrawable(child: Drawable , scale: Scale = Scale.FIT)","title":"Constructors"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/#properties","text":"Name Summary child val child: Drawable","title":"Properties"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/#functions","text":"Name Summary draw fun draw(canvas: Canvas ): Unit getAlpha fun getAlpha(): Int getColorFilter fun getColorFilter(): ColorFilter ! getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit onLevelChange fun onLevelChange(level: Int ): Boolean onStateChange fun onStateChange(state: IntArray ): Boolean scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setTint fun setTint(tintColor: Int ): Unit setTintBlendMode fun setTintBlendMode(blendMode: BlendMode ?): Unit setTintList fun setTintList(tint: ColorStateList ?): Unit setTintMode fun setTintMode(tintMode: Mode ?): Unit start fun start(): Unit stop fun stop(): Unit unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Functions"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/-init-/","text":"coil-gif / coil.drawable / ScaleDrawable / init init ScaleDrawable(child: Drawable , scale: Scale = Scale.FIT) A Drawable that centers and scales its child to fill its bounds. This allows drawables that only draw within their intrinsic dimensions (e.g. AnimatedImageDrawable ) to fill their entire bounds.","title":" init "},{"location":"api/coil-gif/coil.drawable/-scale-drawable/-init-/#init","text":"ScaleDrawable(child: Drawable , scale: Scale = Scale.FIT) A Drawable that centers and scales its child to fill its bounds. This allows drawables that only draw within their intrinsic dimensions (e.g. AnimatedImageDrawable ) to fill their entire bounds.","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/child/","text":"coil-gif / coil.drawable / ScaleDrawable / child child val child: Drawable","title":"Child"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/child/#child","text":"val child: Drawable","title":"child"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/draw/","text":"coil-gif / coil.drawable / ScaleDrawable / draw draw fun draw(canvas: Canvas ): Unit","title":"Draw"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/draw/#draw","text":"fun draw(canvas: Canvas ): Unit","title":"draw"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-alpha/","text":"coil-gif / coil.drawable / ScaleDrawable / getAlpha getAlpha fun getAlpha(): Int","title":"Get alpha"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-alpha/#getalpha","text":"fun getAlpha(): Int","title":"getAlpha"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-color-filter/","text":"coil-gif / coil.drawable / ScaleDrawable / getColorFilter getColorFilter fun getColorFilter(): ColorFilter !","title":"Get color filter"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-color-filter/#getcolorfilter","text":"fun getColorFilter(): ColorFilter !","title":"getColorFilter"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-intrinsic-height/","text":"coil-gif / coil.drawable / ScaleDrawable / getIntrinsicHeight getIntrinsicHeight fun getIntrinsicHeight(): Int","title":"Get intrinsic height"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-intrinsic-height/#getintrinsicheight","text":"fun getIntrinsicHeight(): Int","title":"getIntrinsicHeight"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-intrinsic-width/","text":"coil-gif / coil.drawable / ScaleDrawable / getIntrinsicWidth getIntrinsicWidth fun getIntrinsicWidth(): Int","title":"Get intrinsic width"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-intrinsic-width/#getintrinsicwidth","text":"fun getIntrinsicWidth(): Int","title":"getIntrinsicWidth"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-opacity/","text":"coil-gif / coil.drawable / ScaleDrawable / getOpacity getOpacity fun getOpacity(): Int","title":"Get opacity"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-opacity/#getopacity","text":"fun getOpacity(): Int","title":"getOpacity"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/invalidate-drawable/","text":"coil-gif / coil.drawable / ScaleDrawable / invalidateDrawable invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit","title":"Invalidate drawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/invalidate-drawable/#invalidatedrawable","text":"fun invalidateDrawable(who: Drawable ): Unit","title":"invalidateDrawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/is-running/","text":"coil-gif / coil.drawable / ScaleDrawable / isRunning isRunning fun isRunning(): Boolean","title":"Is running"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/is-running/#isrunning","text":"fun isRunning(): Boolean","title":"isRunning"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-bounds-change/","text":"coil-gif / coil.drawable / ScaleDrawable / onBoundsChange onBoundsChange protected fun onBoundsChange(bounds: Rect ): Unit","title":"On bounds change"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-bounds-change/#onboundschange","text":"protected fun onBoundsChange(bounds: Rect ): Unit","title":"onBoundsChange"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-level-change/","text":"coil-gif / coil.drawable / ScaleDrawable / onLevelChange onLevelChange protected fun onLevelChange(level: Int ): Boolean","title":"On level change"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-level-change/#onlevelchange","text":"protected fun onLevelChange(level: Int ): Boolean","title":"onLevelChange"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-state-change/","text":"coil-gif / coil.drawable / ScaleDrawable / onStateChange onStateChange protected fun onStateChange(state: IntArray ): Boolean","title":"On state change"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-state-change/#onstatechange","text":"protected fun onStateChange(state: IntArray ): Boolean","title":"onStateChange"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/schedule-drawable/","text":"coil-gif / coil.drawable / ScaleDrawable / scheduleDrawable scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit","title":"Schedule drawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/schedule-drawable/#scheduledrawable","text":"fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit","title":"scheduleDrawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-alpha/","text":"coil-gif / coil.drawable / ScaleDrawable / setAlpha setAlpha fun setAlpha(alpha: Int ): Unit","title":"Set alpha"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-alpha/#setalpha","text":"fun setAlpha(alpha: Int ): Unit","title":"setAlpha"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-color-filter/","text":"coil-gif / coil.drawable / ScaleDrawable / setColorFilter setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"Set color filter"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-color-filter/#setcolorfilter","text":"fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"setColorFilter"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-blend-mode/","text":"coil-gif / coil.drawable / ScaleDrawable / setTintBlendMode setTintBlendMode fun setTintBlendMode(blendMode: BlendMode ?): Unit","title":"Set tint blend mode"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-blend-mode/#settintblendmode","text":"fun setTintBlendMode(blendMode: BlendMode ?): Unit","title":"setTintBlendMode"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-list/","text":"coil-gif / coil.drawable / ScaleDrawable / setTintList setTintList fun setTintList(tint: ColorStateList ?): Unit","title":"Set tint list"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-list/#settintlist","text":"fun setTintList(tint: ColorStateList ?): Unit","title":"setTintList"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-mode/","text":"coil-gif / coil.drawable / ScaleDrawable / setTintMode setTintMode fun setTintMode(tintMode: Mode ?): Unit","title":"Set tint mode"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-mode/#settintmode","text":"fun setTintMode(tintMode: Mode ?): Unit","title":"setTintMode"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint/","text":"coil-gif / coil.drawable / ScaleDrawable / setTint setTint fun setTint(tintColor: Int ): Unit","title":"Set tint"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint/#settint","text":"fun setTint(tintColor: Int ): Unit","title":"setTint"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/start/","text":"coil-gif / coil.drawable / ScaleDrawable / start start fun start(): Unit","title":"Start"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/start/#start","text":"fun start(): Unit","title":"start"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/stop/","text":"coil-gif / coil.drawable / ScaleDrawable / stop stop fun stop(): Unit","title":"Stop"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/stop/#stop","text":"fun stop(): Unit","title":"stop"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/unschedule-drawable/","text":"coil-gif / coil.drawable / ScaleDrawable / unscheduleDrawable unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Unschedule drawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/unschedule-drawable/#unscheduledrawable","text":"fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"unscheduleDrawable"},{"location":"api/coil-gif/coil.extension/","text":"coil-gif / coil.extension Package coil.extension Extensions for External Classes Name Summary coil.request.Parameters coil.request.RequestBuilder","title":"Home"},{"location":"api/coil-gif/coil.extension/#package-coilextension","text":"","title":"Package coil.extension"},{"location":"api/coil-gif/coil.extension/#extensions-for-external-classes","text":"Name Summary coil.request.Parameters coil.request.RequestBuilder","title":"Extensions for External Classes"},{"location":"api/coil-gif/coil.extension/coil.request.-parameters/","text":"coil-gif / coil.extension / coil.request.Parameters Extensions for coil.request.Parameters Name Summary repeatCount Get the number of times to repeat the animation if the result is an animated Drawable . fun Parameters .repeatCount(): Int ?","title":"Home"},{"location":"api/coil-gif/coil.extension/coil.request.-parameters/#extensions-for-coilrequestparameters","text":"Name Summary repeatCount Get the number of times to repeat the animation if the result is an animated Drawable . fun Parameters .repeatCount(): Int ?","title":"Extensions for coil.request.Parameters"},{"location":"api/coil-gif/coil.extension/coil.request.-parameters/repeat-count/","text":"coil-gif / coil.extension / coil.request.Parameters / repeatCount repeatCount fun Parameters .repeatCount(): Int ? Get the number of times to repeat the animation if the result is an animated Drawable .","title":"Repeat count"},{"location":"api/coil-gif/coil.extension/coil.request.-parameters/repeat-count/#repeatcount","text":"fun Parameters .repeatCount(): Int ? Get the number of times to repeat the animation if the result is an animated Drawable .","title":"repeatCount"},{"location":"api/coil-gif/coil.extension/coil.request.-request-builder/","text":"coil-gif / coil.extension / coil.request.RequestBuilder Extensions for coil.request.RequestBuilder Name Summary repeatCount Set the number of times to repeat the animation if the result is an animated Drawable . fun RequestBuilder * .repeatCount(repeatCount: Int ): Unit","title":"Home"},{"location":"api/coil-gif/coil.extension/coil.request.-request-builder/#extensions-for-coilrequestrequestbuilder","text":"Name Summary repeatCount Set the number of times to repeat the animation if the result is an animated Drawable . fun RequestBuilder * .repeatCount(repeatCount: Int ): Unit","title":"Extensions for coil.request.RequestBuilder"},{"location":"api/coil-gif/coil.extension/coil.request.-request-builder/repeat-count/","text":"coil-gif / coil.extension / coil.request.RequestBuilder / repeatCount repeatCount fun RequestBuilder * .repeatCount(repeatCount: Int ): Unit Set the number of times to repeat the animation if the result is an animated Drawable . Default: MovieDrawable.REPEAT_INFINITE See Also MovieDrawable.setRepeatCount AnimatedImageDrawable.setRepeatCount","title":"Repeat count"},{"location":"api/coil-gif/coil.extension/coil.request.-request-builder/repeat-count/#repeatcount","text":"fun RequestBuilder * .repeatCount(repeatCount: Int ): Unit Set the number of times to repeat the animation if the result is an animated Drawable . Default: MovieDrawable.REPEAT_INFINITE See Also MovieDrawable.setRepeatCount AnimatedImageDrawable.setRepeatCount","title":"repeatCount"},{"location":"api/coil-svg/","text":"coil-svg Packages Name Summary coil.decode Index All Types","title":"coil-svg"},{"location":"api/coil-svg/#packages","text":"Name Summary coil.decode","title":"Packages"},{"location":"api/coil-svg/#index","text":"All Types","title":"Index"},{"location":"api/coil-svg/alltypes/","text":"All Types Name Summary coil.decode.SvgDecoder A Decoder that uses AndroidSVG to decode SVG files.","title":"Home"},{"location":"api/coil-svg/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/coil-svg/alltypes/#coildecodesvgdecoder","text":"A Decoder that uses AndroidSVG to decode SVG files.","title":"coil.decode.SvgDecoder"},{"location":"api/coil-svg/coil.decode/","text":"coil-svg / coil.decode Package coil.decode Types Name Summary SvgDecoder A Decoder that uses AndroidSVG to decode SVG files. class SvgDecoder : Decoder","title":"Home"},{"location":"api/coil-svg/coil.decode/#package-coildecode","text":"","title":"Package coil.decode"},{"location":"api/coil-svg/coil.decode/#types","text":"Name Summary SvgDecoder A Decoder that uses AndroidSVG to decode SVG files. class SvgDecoder : Decoder","title":"Types"},{"location":"api/coil-svg/coil.decode/-svg-decoder/","text":"coil-svg / coil.decode / SvgDecoder SvgDecoder class SvgDecoder : Decoder A Decoder that uses AndroidSVG to decode SVG files. Constructors Name Summary init A Decoder that uses AndroidSVG to decode SVG files. SvgDecoder(context: Context ) Functions Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Home"},{"location":"api/coil-svg/coil.decode/-svg-decoder/#svgdecoder","text":"class SvgDecoder : Decoder A Decoder that uses AndroidSVG to decode SVG files.","title":"SvgDecoder"},{"location":"api/coil-svg/coil.decode/-svg-decoder/#constructors","text":"Name Summary init A Decoder that uses AndroidSVG to decode SVG files. SvgDecoder(context: Context )","title":"Constructors"},{"location":"api/coil-svg/coil.decode/-svg-decoder/#functions","text":"Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-svg/coil.decode/-svg-decoder/-init-/","text":"coil-svg / coil.decode / SvgDecoder / init init SvgDecoder(context: Context ) A Decoder that uses AndroidSVG to decode SVG files.","title":" init "},{"location":"api/coil-svg/coil.decode/-svg-decoder/-init-/#init","text":"SvgDecoder(context: Context ) A Decoder that uses AndroidSVG to decode SVG files.","title":"&lt;init&gt;"},{"location":"api/coil-svg/coil.decode/-svg-decoder/decode/","text":"coil-svg / coil.decode / SvgDecoder / decode decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"Decode"},{"location":"api/coil-svg/coil.decode/-svg-decoder/decode/#decode","text":"suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"decode"},{"location":"api/coil-svg/coil.decode/-svg-decoder/handles/","text":"coil-svg / coil.decode / SvgDecoder / handles handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Handles"},{"location":"api/coil-svg/coil.decode/-svg-decoder/handles/#handles","text":"fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"handles"}]}